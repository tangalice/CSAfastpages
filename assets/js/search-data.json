{
  
    
        "post0": {
            "title": "Wordle",
            "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;Wordle&lt;/title&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale = 1.0&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;wordle.css&quot;&gt; &lt;script src=&quot;wordle.js&quot;&gt;&lt;/script&gt; &lt;button onClick=&quot;window.location.reload();&quot;&gt;Play Again&lt;/button&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 id=&quot;title&quot;&gt;Wordle&lt;/h1&gt; &lt;hr&gt; &lt;br&gt; &lt;div id=&quot;board&quot;&gt; &lt;/div&gt; &lt;br&gt; &lt;h1 id=&quot;answer&quot;&gt;&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; &lt;script&gt; var height = 6; //number of guesses var width = 5; //length of the word var row = 0; //current guess (attempt #) var col = 0; //current letter for that attempt var gameOver = false; // var word = &quot;SQUID&quot;; var wordList = [&quot;cigar&quot;, &quot;rebut&quot;, &quot;sissy&quot;, &quot;humph&quot;, &quot;awake&quot;, &quot;blush&quot;, &quot;focal&quot;, &quot;evade&quot;, &quot;naval&quot;, &quot;serve&quot;, &quot;heath&quot;, &quot;dwarf&quot;, &quot;model&quot;, &quot;karma&quot;, &quot;stink&quot;, &quot;grade&quot;, &quot;quiet&quot;, &quot;bench&quot;, &quot;abate&quot;, &quot;feign&quot;, &quot;major&quot;, &quot;death&quot;, &quot;fresh&quot;, &quot;crust&quot;, &quot;stool&quot;, &quot;colon&quot;, &quot;abase&quot;, &quot;marry&quot;, &quot;react&quot;, &quot;batty&quot;, &quot;pride&quot;, &quot;floss&quot;, &quot;helix&quot;, &quot;croak&quot;, &quot;staff&quot;, &quot;paper&quot;, &quot;unfed&quot;, &quot;whelp&quot;, &quot;trawl&quot;, &quot;outdo&quot;, &quot;adobe&quot;, &quot;crazy&quot;, &quot;sower&quot;, &quot;repay&quot;, &quot;digit&quot;, &quot;crate&quot;, &quot;cluck&quot;, &quot;spike&quot;, &quot;mimic&quot;, &quot;pound&quot;, &quot;maxim&quot;, &quot;linen&quot;, &quot;unmet&quot;, &quot;flesh&quot;, &quot;booby&quot;, &quot;forth&quot;, &quot;first&quot;, &quot;stand&quot;, &quot;belly&quot;, &quot;ivory&quot;, &quot;seedy&quot;, &quot;print&quot;, &quot;yearn&quot;, &quot;drain&quot;, &quot;bribe&quot;, &quot;stout&quot;, &quot;panel&quot;, &quot;crass&quot;, &quot;flume&quot;, &quot;offal&quot;, &quot;agree&quot;, &quot;error&quot;, &quot;swirl&quot;, &quot;argue&quot;, &quot;bleed&quot;, &quot;delta&quot;, &quot;flick&quot;, &quot;totem&quot;, &quot;wooer&quot;, &quot;front&quot;, &quot;shrub&quot;, &quot;parry&quot;, &quot;biome&quot;, &quot;lapel&quot;, &quot;start&quot;, &quot;greet&quot;, &quot;goner&quot;, &quot;golem&quot;, &quot;lusty&quot;, &quot;loopy&quot;, &quot;round&quot;, &quot;audit&quot;, &quot;lying&quot;, &quot;gamma&quot;, &quot;labor&quot;, &quot;islet&quot;, &quot;civic&quot;, &quot;forge&quot;, &quot;corny&quot;, &quot;moult&quot;, &quot;basic&quot;, &quot;salad&quot;, &quot;agate&quot;, &quot;spicy&quot;, &quot;spray&quot;, &quot;essay&quot;, &quot;fjord&quot;, &quot;spend&quot;, &quot;kebab&quot;, &quot;guild&quot;, &quot;aback&quot;, &quot;motor&quot;, &quot;alone&quot;, &quot;hatch&quot;, &quot;hyper&quot;, &quot;thumb&quot;, &quot;dowry&quot;, &quot;ought&quot;, &quot;belch&quot;, &quot;dutch&quot;, &quot;pilot&quot;, &quot;tweed&quot;, &quot;comet&quot;, &quot;jaunt&quot;, &quot;enema&quot;, &quot;steed&quot;, &quot;abyss&quot;, &quot;growl&quot;, &quot;fling&quot;, &quot;dozen&quot;, &quot;boozy&quot;, &quot;erode&quot;, &quot;world&quot;, &quot;gouge&quot;, &quot;click&quot;, &quot;briar&quot;, &quot;great&quot;, &quot;altar&quot;, &quot;pulpy&quot;, &quot;blurt&quot;, &quot;coast&quot;, &quot;duchy&quot;, &quot;groin&quot;, &quot;fixer&quot;, &quot;group&quot;, &quot;rogue&quot;, &quot;badly&quot;, &quot;smart&quot;, &quot;pithy&quot;, &quot;gaudy&quot;, &quot;chill&quot;, &quot;heron&quot;, &quot;vodka&quot;, &quot;finer&quot;, &quot;surer&quot;, &quot;radio&quot;, &quot;rouge&quot;, &quot;perch&quot;, &quot;retch&quot;, &quot;wrote&quot;, &quot;clock&quot;, &quot;tilde&quot;, &quot;store&quot;, &quot;prove&quot;, &quot;bring&quot;, &quot;solve&quot;, &quot;cheat&quot;, &quot;grime&quot;, &quot;exult&quot;, &quot;usher&quot;, &quot;epoch&quot;, &quot;triad&quot;, &quot;break&quot;, &quot;rhino&quot;, &quot;viral&quot;, &quot;conic&quot;, &quot;masse&quot;, &quot;sonic&quot;, &quot;vital&quot;, &quot;trace&quot;, &quot;using&quot;, &quot;peach&quot;, &quot;champ&quot;, &quot;baton&quot;, &quot;brake&quot;, &quot;pluck&quot;, &quot;craze&quot;, &quot;gripe&quot;, &quot;weary&quot;, &quot;picky&quot;, &quot;acute&quot;, &quot;ferry&quot;, &quot;aside&quot;, &quot;tapir&quot;, &quot;troll&quot;, &quot;unify&quot;, &quot;rebus&quot;, &quot;boost&quot;, &quot;truss&quot;, &quot;siege&quot;, &quot;tiger&quot;, &quot;banal&quot;, &quot;slump&quot;, &quot;crank&quot;, &quot;gorge&quot;, &quot;query&quot;, &quot;drink&quot;, &quot;favor&quot;, &quot;abbey&quot;, &quot;tangy&quot;, &quot;panic&quot;, &quot;solar&quot;, &quot;shire&quot;, &quot;proxy&quot;, &quot;point&quot;, &quot;robot&quot;, &quot;prick&quot;, &quot;wince&quot;, &quot;crimp&quot;, &quot;knoll&quot;, &quot;sugar&quot;, &quot;whack&quot;, &quot;mount&quot;, &quot;perky&quot;, &quot;could&quot;, &quot;wrung&quot;, &quot;light&quot;, &quot;those&quot;, &quot;moist&quot;, &quot;shard&quot;, &quot;pleat&quot;, &quot;aloft&quot;, &quot;skill&quot;, &quot;elder&quot;, &quot;frame&quot;, &quot;humor&quot;, &quot;pause&quot;, &quot;ulcer&quot;, &quot;ultra&quot;, &quot;robin&quot;, &quot;cynic&quot;, &quot;aroma&quot;, &quot;caulk&quot;, &quot;shake&quot;, &quot;dodge&quot;, &quot;swill&quot;, &quot;tacit&quot;, &quot;other&quot;, &quot;thorn&quot;, &quot;trove&quot;, &quot;bloke&quot;, &quot;vivid&quot;, &quot;spill&quot;, &quot;chant&quot;, &quot;choke&quot;, &quot;rupee&quot;, &quot;nasty&quot;, &quot;mourn&quot;, &quot;ahead&quot;, &quot;brine&quot;, &quot;cloth&quot;, &quot;hoard&quot;, &quot;sweet&quot;, &quot;month&quot;, &quot;lapse&quot;, &quot;watch&quot;, &quot;today&quot;, &quot;focus&quot;, &quot;smelt&quot;, &quot;tease&quot;, &quot;cater&quot;, &quot;movie&quot;, &quot;saute&quot;, &quot;allow&quot;, &quot;renew&quot;, &quot;their&quot;, &quot;slosh&quot;, &quot;purge&quot;, &quot;chest&quot;, &quot;depot&quot;, &quot;epoxy&quot;, &quot;nymph&quot;, &quot;found&quot;, &quot;shall&quot;, &quot;harry&quot;, &quot;stove&quot;, &quot;lowly&quot;, &quot;snout&quot;, &quot;trope&quot;, &quot;fewer&quot;, &quot;shawl&quot;, &quot;natal&quot;, &quot;comma&quot;, &quot;foray&quot;, &quot;scare&quot;, &quot;stair&quot;, &quot;black&quot;, &quot;squad&quot;, &quot;royal&quot;, &quot;chunk&quot;, &quot;mince&quot;, &quot;shame&quot;, &quot;cheek&quot;, &quot;ample&quot;, &quot;flair&quot;, &quot;foyer&quot;, &quot;cargo&quot;, &quot;oxide&quot;, &quot;plant&quot;, &quot;olive&quot;, &quot;inert&quot;, &quot;askew&quot;, &quot;heist&quot;, &quot;shown&quot;, &quot;zesty&quot;, &quot;hasty&quot;, &quot;trash&quot;, &quot;fella&quot;, &quot;larva&quot;, &quot;forgo&quot;, &quot;story&quot;, &quot;hairy&quot;, &quot;train&quot;, &quot;homer&quot;, &quot;badge&quot;, &quot;midst&quot;, &quot;canny&quot;, &quot;fetus&quot;, &quot;butch&quot;, &quot;farce&quot;, &quot;slung&quot;, &quot;tipsy&quot;, &quot;metal&quot;, &quot;yield&quot;, &quot;delve&quot;, &quot;being&quot;, &quot;scour&quot;, &quot;glass&quot;, &quot;gamer&quot;, &quot;scrap&quot;, &quot;money&quot;, &quot;hinge&quot;, &quot;album&quot;, &quot;vouch&quot;, &quot;asset&quot;, &quot;tiara&quot;, &quot;crept&quot;, &quot;bayou&quot;, &quot;atoll&quot;, &quot;manor&quot;, &quot;creak&quot;, &quot;showy&quot;, &quot;phase&quot;, &quot;froth&quot;, &quot;depth&quot;, &quot;gloom&quot;, &quot;flood&quot;, &quot;trait&quot;, &quot;girth&quot;, &quot;piety&quot;, &quot;payer&quot;, &quot;goose&quot;, &quot;float&quot;, &quot;donor&quot;, &quot;atone&quot;, &quot;primo&quot;, &quot;apron&quot;, &quot;blown&quot;, &quot;cacao&quot;, &quot;loser&quot;, &quot;input&quot;, &quot;gloat&quot;, &quot;awful&quot;, &quot;brink&quot;, &quot;smite&quot;, &quot;beady&quot;, &quot;rusty&quot;, &quot;retro&quot;, &quot;droll&quot;, &quot;gawky&quot;, &quot;hutch&quot;, &quot;pinto&quot;, &quot;gaily&quot;, &quot;egret&quot;, &quot;lilac&quot;, &quot;sever&quot;, &quot;field&quot;, &quot;fluff&quot;, &quot;hydro&quot;, &quot;flack&quot;, &quot;agape&quot;, &quot;voice&quot;, &quot;stead&quot;, &quot;stalk&quot;, &quot;berth&quot;, &quot;madam&quot;, &quot;night&quot;, &quot;bland&quot;, &quot;liver&quot;, &quot;wedge&quot;, &quot;augur&quot;, &quot;roomy&quot;, &quot;wacky&quot;, &quot;flock&quot;, &quot;angry&quot;, &quot;bobby&quot;, &quot;trite&quot;, &quot;aphid&quot;, &quot;tryst&quot;, &quot;midge&quot;, &quot;power&quot;, &quot;elope&quot;, &quot;cinch&quot;, &quot;motto&quot;, &quot;stomp&quot;, &quot;upset&quot;, &quot;bluff&quot;, &quot;cramp&quot;, &quot;quart&quot;, &quot;coyly&quot;, &quot;youth&quot;, &quot;rhyme&quot;, &quot;buggy&quot;, &quot;alien&quot;, &quot;smear&quot;, &quot;unfit&quot;, &quot;patty&quot;, &quot;cling&quot;, &quot;glean&quot;, &quot;label&quot;, &quot;hunky&quot;, &quot;khaki&quot;, &quot;poker&quot;, &quot;gruel&quot;, &quot;twice&quot;, &quot;twang&quot;, &quot;shrug&quot;, &quot;treat&quot;, &quot;unlit&quot;, &quot;waste&quot;, &quot;merit&quot;, &quot;woven&quot;, &quot;octal&quot;, &quot;needy&quot;, &quot;clown&quot;, &quot;widow&quot;, &quot;irony&quot;, &quot;ruder&quot;, &quot;gauze&quot;, &quot;chief&quot;, &quot;onset&quot;, &quot;prize&quot;, &quot;fungi&quot;, &quot;charm&quot;, &quot;gully&quot;, &quot;inter&quot;, &quot;whoop&quot;, &quot;taunt&quot;, &quot;leery&quot;, &quot;class&quot;, &quot;theme&quot;, &quot;lofty&quot;, &quot;tibia&quot;, &quot;booze&quot;, &quot;alpha&quot;, &quot;thyme&quot;, &quot;eclat&quot;, &quot;doubt&quot;, &quot;parer&quot;, &quot;chute&quot;, &quot;stick&quot;, &quot;trice&quot;, &quot;alike&quot;, &quot;sooth&quot;, &quot;recap&quot;, &quot;saint&quot;, &quot;liege&quot;, &quot;glory&quot;, &quot;grate&quot;, &quot;admit&quot;, &quot;brisk&quot;, &quot;soggy&quot;, &quot;usurp&quot;, &quot;scald&quot;, &quot;scorn&quot;, &quot;leave&quot;, &quot;twine&quot;, &quot;sting&quot;, &quot;bough&quot;, &quot;marsh&quot;, &quot;sloth&quot;, &quot;dandy&quot;, &quot;vigor&quot;, &quot;howdy&quot;, &quot;enjoy&quot;, &quot;valid&quot;, &quot;ionic&quot;, &quot;equal&quot;, &quot;unset&quot;, &quot;floor&quot;, &quot;catch&quot;, &quot;spade&quot;, &quot;stein&quot;, &quot;exist&quot;, &quot;quirk&quot;, &quot;denim&quot;, &quot;grove&quot;, &quot;spiel&quot;, &quot;mummy&quot;, &quot;fault&quot;, &quot;foggy&quot;, &quot;flout&quot;, &quot;carry&quot;, &quot;sneak&quot;, &quot;libel&quot;, &quot;waltz&quot;, &quot;aptly&quot;, &quot;piney&quot;, &quot;inept&quot;, &quot;aloud&quot;, &quot;photo&quot;, &quot;dream&quot;, &quot;stale&quot;, &quot;vomit&quot;, &quot;ombre&quot;, &quot;fanny&quot;, &quot;unite&quot;, &quot;snarl&quot;, &quot;baker&quot;, &quot;there&quot;, &quot;glyph&quot;, &quot;pooch&quot;, &quot;hippy&quot;, &quot;spell&quot;, &quot;folly&quot;, &quot;louse&quot;, &quot;gulch&quot;, &quot;vault&quot;, &quot;godly&quot;, &quot;threw&quot;, &quot;fleet&quot;, &quot;grave&quot;, &quot;inane&quot;, &quot;shock&quot;, &quot;crave&quot;, &quot;spite&quot;, &quot;valve&quot;, &quot;skimp&quot;, &quot;claim&quot;, &quot;rainy&quot;, &quot;musty&quot;, &quot;pique&quot;, &quot;daddy&quot;, &quot;quasi&quot;, &quot;arise&quot;, &quot;aging&quot;, &quot;valet&quot;, &quot;opium&quot;, &quot;avert&quot;, &quot;stuck&quot;, &quot;recut&quot;, &quot;mulch&quot;, &quot;genre&quot;, &quot;plume&quot;, &quot;rifle&quot;, &quot;count&quot;, &quot;incur&quot;, &quot;total&quot;, &quot;wrest&quot;, &quot;mocha&quot;, &quot;deter&quot;, &quot;study&quot;, &quot;lover&quot;, &quot;safer&quot;, &quot;rivet&quot;, &quot;funny&quot;, &quot;smoke&quot;, &quot;mound&quot;, &quot;undue&quot;, &quot;sedan&quot;, &quot;pagan&quot;, &quot;swine&quot;, &quot;guile&quot;, &quot;gusty&quot;, &quot;equip&quot;, &quot;tough&quot;, &quot;canoe&quot;, &quot;chaos&quot;, &quot;covet&quot;, &quot;human&quot;, &quot;udder&quot;, &quot;lunch&quot;, &quot;blast&quot;, &quot;stray&quot;, &quot;manga&quot;, &quot;melee&quot;, &quot;lefty&quot;, &quot;quick&quot;, &quot;paste&quot;, &quot;given&quot;, &quot;octet&quot;, &quot;risen&quot;, &quot;groan&quot;, &quot;leaky&quot;, &quot;grind&quot;, &quot;carve&quot;, &quot;loose&quot;, &quot;sadly&quot;, &quot;spilt&quot;, &quot;apple&quot;, &quot;slack&quot;, &quot;honey&quot;, &quot;final&quot;, &quot;sheen&quot;, &quot;eerie&quot;, &quot;minty&quot;, &quot;slick&quot;, &quot;derby&quot;, &quot;wharf&quot;, &quot;spelt&quot;, &quot;coach&quot;, &quot;erupt&quot;, &quot;singe&quot;, &quot;price&quot;, &quot;spawn&quot;, &quot;fairy&quot;, &quot;jiffy&quot;, &quot;filmy&quot;, &quot;stack&quot;, &quot;chose&quot;, &quot;sleep&quot;, &quot;ardor&quot;, &quot;nanny&quot;, &quot;niece&quot;, &quot;woozy&quot;, &quot;handy&quot;, &quot;grace&quot;, &quot;ditto&quot;, &quot;stank&quot;, &quot;cream&quot;, &quot;usual&quot;, &quot;diode&quot;, &quot;valor&quot;, &quot;angle&quot;, &quot;ninja&quot;, &quot;muddy&quot;, &quot;chase&quot;, &quot;reply&quot;, &quot;prone&quot;, &quot;spoil&quot;, &quot;heart&quot;, &quot;shade&quot;, &quot;diner&quot;, &quot;arson&quot;, &quot;onion&quot;, &quot;sleet&quot;, &quot;dowel&quot;, &quot;couch&quot;, &quot;palsy&quot;, &quot;bowel&quot;, &quot;smile&quot;, &quot;evoke&quot;, &quot;creek&quot;, &quot;lance&quot;, &quot;eagle&quot;, &quot;idiot&quot;, &quot;siren&quot;, &quot;built&quot;, &quot;embed&quot;, &quot;award&quot;, &quot;dross&quot;, &quot;annul&quot;, &quot;goody&quot;, &quot;frown&quot;, &quot;patio&quot;, &quot;laden&quot;, &quot;humid&quot;, &quot;elite&quot;, &quot;lymph&quot;, &quot;edify&quot;, &quot;might&quot;, &quot;reset&quot;, &quot;visit&quot;, &quot;gusto&quot;, &quot;purse&quot;, &quot;vapor&quot;, &quot;crock&quot;, &quot;write&quot;, &quot;sunny&quot;, &quot;loath&quot;, &quot;chaff&quot;, &quot;slide&quot;, &quot;queer&quot;, &quot;venom&quot;, &quot;stamp&quot;, &quot;sorry&quot;, &quot;still&quot;, &quot;acorn&quot;, &quot;aping&quot;, &quot;pushy&quot;, &quot;tamer&quot;, &quot;hater&quot;, &quot;mania&quot;, &quot;awoke&quot;, &quot;brawn&quot;, &quot;swift&quot;, &quot;exile&quot;, &quot;birch&quot;, &quot;lucky&quot;, &quot;freer&quot;, &quot;risky&quot;, &quot;ghost&quot;, &quot;plier&quot;, &quot;lunar&quot;, &quot;winch&quot;, &quot;snare&quot;, &quot;nurse&quot;, &quot;house&quot;, &quot;borax&quot;, &quot;nicer&quot;, &quot;lurch&quot;, &quot;exalt&quot;, &quot;about&quot;, &quot;savvy&quot;, &quot;toxin&quot;, &quot;tunic&quot;, &quot;pried&quot;, &quot;inlay&quot;, &quot;chump&quot;, &quot;lanky&quot;, &quot;cress&quot;, &quot;eater&quot;, &quot;elude&quot;, &quot;cycle&quot;, &quot;kitty&quot;, &quot;boule&quot;, &quot;moron&quot;, &quot;tenet&quot;, &quot;place&quot;, &quot;lobby&quot;, &quot;plush&quot;, &quot;vigil&quot;, &quot;index&quot;, &quot;blink&quot;, &quot;clung&quot;, &quot;qualm&quot;, &quot;croup&quot;, &quot;clink&quot;, &quot;juicy&quot;, &quot;stage&quot;, &quot;decay&quot;, &quot;nerve&quot;, &quot;flier&quot;, &quot;shaft&quot;, &quot;crook&quot;, &quot;clean&quot;, &quot;china&quot;, &quot;ridge&quot;, &quot;vowel&quot;, &quot;gnome&quot;, &quot;snuck&quot;, &quot;icing&quot;, &quot;spiny&quot;, &quot;rigor&quot;, &quot;snail&quot;, &quot;flown&quot;, &quot;rabid&quot;, &quot;prose&quot;, &quot;thank&quot;, &quot;poppy&quot;, &quot;budge&quot;, &quot;fiber&quot;, &quot;moldy&quot;, &quot;dowdy&quot;, &quot;kneel&quot;, &quot;track&quot;, &quot;caddy&quot;, &quot;quell&quot;, &quot;dumpy&quot;, &quot;paler&quot;, &quot;swore&quot;, &quot;rebar&quot;, &quot;scuba&quot;, &quot;splat&quot;, &quot;flyer&quot;, &quot;horny&quot;, &quot;mason&quot;, &quot;doing&quot;, &quot;ozone&quot;, &quot;amply&quot;, &quot;molar&quot;, &quot;ovary&quot;, &quot;beset&quot;, &quot;queue&quot;, &quot;cliff&quot;, &quot;magic&quot;, &quot;truce&quot;, &quot;sport&quot;, &quot;fritz&quot;, &quot;edict&quot;, &quot;twirl&quot;, &quot;verse&quot;, &quot;llama&quot;, &quot;eaten&quot;, &quot;range&quot;, &quot;whisk&quot;, &quot;hovel&quot;, &quot;rehab&quot;, &quot;macaw&quot;, &quot;sigma&quot;, &quot;spout&quot;, &quot;verve&quot;, &quot;sushi&quot;, &quot;dying&quot;, &quot;fetid&quot;, &quot;brain&quot;, &quot;buddy&quot;, &quot;thump&quot;, &quot;scion&quot;, &quot;candy&quot;, &quot;chord&quot;, &quot;basin&quot;, &quot;march&quot;, &quot;crowd&quot;, &quot;arbor&quot;, &quot;gayly&quot;, &quot;musky&quot;, &quot;stain&quot;, &quot;dally&quot;, &quot;bless&quot;, &quot;bravo&quot;, &quot;stung&quot;, &quot;title&quot;, &quot;ruler&quot;, &quot;kiosk&quot;, &quot;blond&quot;, &quot;ennui&quot;, &quot;layer&quot;, &quot;fluid&quot;, &quot;tatty&quot;, &quot;score&quot;, &quot;cutie&quot;, &quot;zebra&quot;, &quot;barge&quot;, &quot;matey&quot;, &quot;bluer&quot;, &quot;aider&quot;, &quot;shook&quot;, &quot;river&quot;, &quot;privy&quot;, &quot;betel&quot;, &quot;frisk&quot;, &quot;bongo&quot;, &quot;begun&quot;, &quot;azure&quot;, &quot;weave&quot;, &quot;genie&quot;, &quot;sound&quot;, &quot;glove&quot;, &quot;braid&quot;, &quot;scope&quot;, &quot;wryly&quot;, &quot;rover&quot;, &quot;assay&quot;, &quot;ocean&quot;, &quot;bloom&quot;, &quot;irate&quot;, &quot;later&quot;, &quot;woken&quot;, &quot;silky&quot;, &quot;wreck&quot;, &quot;dwelt&quot;, &quot;slate&quot;, &quot;smack&quot;, &quot;solid&quot;, &quot;amaze&quot;, &quot;hazel&quot;, &quot;wrist&quot;, &quot;jolly&quot;, &quot;globe&quot;, &quot;flint&quot;, &quot;rouse&quot;, &quot;civil&quot;, &quot;vista&quot;, &quot;relax&quot;, &quot;cover&quot;, &quot;alive&quot;, &quot;beech&quot;, &quot;jetty&quot;, &quot;bliss&quot;, &quot;vocal&quot;, &quot;often&quot;, &quot;dolly&quot;, &quot;eight&quot;, &quot;joker&quot;, &quot;since&quot;, &quot;event&quot;, &quot;ensue&quot;, &quot;shunt&quot;, &quot;diver&quot;, &quot;poser&quot;, &quot;worst&quot;, &quot;sweep&quot;, &quot;alley&quot;, &quot;creed&quot;, &quot;anime&quot;, &quot;leafy&quot;, &quot;bosom&quot;, &quot;dunce&quot;, &quot;stare&quot;, &quot;pudgy&quot;, &quot;waive&quot;, &quot;choir&quot;, &quot;stood&quot;, &quot;spoke&quot;, &quot;outgo&quot;, &quot;delay&quot;, &quot;bilge&quot;, &quot;ideal&quot;, &quot;clasp&quot;, &quot;seize&quot;, &quot;hotly&quot;, &quot;laugh&quot;, &quot;sieve&quot;, &quot;block&quot;, &quot;meant&quot;, &quot;grape&quot;, &quot;noose&quot;, &quot;hardy&quot;, &quot;shied&quot;, &quot;drawl&quot;, &quot;daisy&quot;, &quot;putty&quot;, &quot;strut&quot;, &quot;burnt&quot;, &quot;tulip&quot;, &quot;crick&quot;, &quot;idyll&quot;, &quot;vixen&quot;, &quot;furor&quot;, &quot;geeky&quot;, &quot;cough&quot;, &quot;naive&quot;, &quot;shoal&quot;, &quot;stork&quot;, &quot;bathe&quot;, &quot;aunty&quot;, &quot;check&quot;, &quot;prime&quot;, &quot;brass&quot;, &quot;outer&quot;, &quot;furry&quot;, &quot;razor&quot;, &quot;elect&quot;, &quot;evict&quot;, &quot;imply&quot;, &quot;demur&quot;, &quot;quota&quot;, &quot;haven&quot;, &quot;cavil&quot;, &quot;swear&quot;, &quot;crump&quot;, &quot;dough&quot;, &quot;gavel&quot;, &quot;wagon&quot;, &quot;salon&quot;, &quot;nudge&quot;, &quot;harem&quot;, &quot;pitch&quot;, &quot;sworn&quot;, &quot;pupil&quot;, &quot;excel&quot;, &quot;stony&quot;, &quot;cabin&quot;, &quot;unzip&quot;, &quot;queen&quot;, &quot;trout&quot;, &quot;polyp&quot;, &quot;earth&quot;, &quot;storm&quot;, &quot;until&quot;, &quot;taper&quot;, &quot;enter&quot;, &quot;child&quot;, &quot;adopt&quot;, &quot;minor&quot;, &quot;fatty&quot;, &quot;husky&quot;, &quot;brave&quot;, &quot;filet&quot;, &quot;slime&quot;, &quot;glint&quot;, &quot;tread&quot;, &quot;steal&quot;, &quot;regal&quot;, &quot;guest&quot;, &quot;every&quot;, &quot;murky&quot;, &quot;share&quot;, &quot;spore&quot;, &quot;hoist&quot;, &quot;buxom&quot;, &quot;inner&quot;, &quot;otter&quot;, &quot;dimly&quot;, &quot;level&quot;, &quot;sumac&quot;, &quot;donut&quot;, &quot;stilt&quot;, &quot;arena&quot;, &quot;sheet&quot;, &quot;scrub&quot;, &quot;fancy&quot;, &quot;slimy&quot;, &quot;pearl&quot;, &quot;silly&quot;, &quot;porch&quot;, &quot;dingo&quot;, &quot;sepia&quot;, &quot;amble&quot;, &quot;shady&quot;, &quot;bread&quot;, &quot;friar&quot;, &quot;reign&quot;, &quot;dairy&quot;, &quot;quill&quot;, &quot;cross&quot;, &quot;brood&quot;, &quot;tuber&quot;, &quot;shear&quot;, &quot;posit&quot;, &quot;blank&quot;, &quot;villa&quot;, &quot;shank&quot;, &quot;piggy&quot;, &quot;freak&quot;, &quot;which&quot;, &quot;among&quot;, &quot;fecal&quot;, &quot;shell&quot;, &quot;would&quot;, &quot;algae&quot;, &quot;large&quot;, &quot;rabbi&quot;, &quot;agony&quot;, &quot;amuse&quot;, &quot;bushy&quot;, &quot;copse&quot;, &quot;swoon&quot;, &quot;knife&quot;, &quot;pouch&quot;, &quot;ascot&quot;, &quot;plane&quot;, &quot;crown&quot;, &quot;urban&quot;, &quot;snide&quot;, &quot;relay&quot;, &quot;abide&quot;, &quot;viola&quot;, &quot;rajah&quot;, &quot;straw&quot;, &quot;dilly&quot;, &quot;crash&quot;, &quot;amass&quot;, &quot;third&quot;, &quot;trick&quot;, &quot;tutor&quot;, &quot;woody&quot;, &quot;blurb&quot;, &quot;grief&quot;, &quot;disco&quot;, &quot;where&quot;, &quot;sassy&quot;, &quot;beach&quot;, &quot;sauna&quot;, &quot;comic&quot;, &quot;clued&quot;, &quot;creep&quot;, &quot;caste&quot;, &quot;graze&quot;, &quot;snuff&quot;, &quot;frock&quot;, &quot;gonad&quot;, &quot;drunk&quot;, &quot;prong&quot;, &quot;lurid&quot;, &quot;steel&quot;, &quot;halve&quot;, &quot;buyer&quot;, &quot;vinyl&quot;, &quot;utile&quot;, &quot;smell&quot;, &quot;adage&quot;, &quot;worry&quot;, &quot;tasty&quot;, &quot;local&quot;, &quot;trade&quot;, &quot;finch&quot;, &quot;ashen&quot;, &quot;modal&quot;, &quot;gaunt&quot;, &quot;clove&quot;, &quot;enact&quot;, &quot;adorn&quot;, &quot;roast&quot;, &quot;speck&quot;, &quot;sheik&quot;, &quot;missy&quot;, &quot;grunt&quot;, &quot;snoop&quot;, &quot;party&quot;, &quot;touch&quot;, &quot;mafia&quot;, &quot;emcee&quot;, &quot;array&quot;, &quot;south&quot;, &quot;vapid&quot;, &quot;jelly&quot;, &quot;skulk&quot;, &quot;angst&quot;, &quot;tubal&quot;, &quot;lower&quot;, &quot;crest&quot;, &quot;sweat&quot;, &quot;cyber&quot;, &quot;adore&quot;, &quot;tardy&quot;, &quot;swami&quot;, &quot;notch&quot;, &quot;groom&quot;, &quot;roach&quot;, &quot;hitch&quot;, &quot;young&quot;, &quot;align&quot;, &quot;ready&quot;, &quot;frond&quot;, &quot;strap&quot;, &quot;puree&quot;, &quot;realm&quot;, &quot;venue&quot;, &quot;swarm&quot;, &quot;offer&quot;, &quot;seven&quot;, &quot;dryer&quot;, &quot;diary&quot;, &quot;dryly&quot;, &quot;drank&quot;, &quot;acrid&quot;, &quot;heady&quot;, &quot;theta&quot;, &quot;junto&quot;, &quot;pixie&quot;, &quot;quoth&quot;, &quot;bonus&quot;, &quot;shalt&quot;, &quot;penne&quot;, &quot;amend&quot;, &quot;datum&quot;, &quot;build&quot;, &quot;piano&quot;, &quot;shelf&quot;, &quot;lodge&quot;, &quot;suing&quot;, &quot;rearm&quot;, &quot;coral&quot;, &quot;ramen&quot;, &quot;worth&quot;, &quot;psalm&quot;, &quot;infer&quot;, &quot;overt&quot;, &quot;mayor&quot;, &quot;ovoid&quot;, &quot;glide&quot;, &quot;usage&quot;, &quot;poise&quot;, &quot;randy&quot;, &quot;chuck&quot;, &quot;prank&quot;, &quot;fishy&quot;, &quot;tooth&quot;, &quot;ether&quot;, &quot;drove&quot;, &quot;idler&quot;, &quot;swath&quot;, &quot;stint&quot;, &quot;while&quot;, &quot;begat&quot;, &quot;apply&quot;, &quot;slang&quot;, &quot;tarot&quot;, &quot;radar&quot;, &quot;credo&quot;, &quot;aware&quot;, &quot;canon&quot;, &quot;shift&quot;, &quot;timer&quot;, &quot;bylaw&quot;, &quot;serum&quot;, &quot;three&quot;, &quot;steak&quot;, &quot;iliac&quot;, &quot;shirk&quot;, &quot;blunt&quot;, &quot;puppy&quot;, &quot;penal&quot;, &quot;joist&quot;, &quot;bunny&quot;, &quot;shape&quot;, &quot;beget&quot;, &quot;wheel&quot;, &quot;adept&quot;, &quot;stunt&quot;, &quot;stole&quot;, &quot;topaz&quot;, &quot;chore&quot;, &quot;fluke&quot;, &quot;afoot&quot;, &quot;bloat&quot;, &quot;bully&quot;, &quot;dense&quot;, &quot;caper&quot;, &quot;sneer&quot;, &quot;boxer&quot;, &quot;jumbo&quot;, &quot;lunge&quot;, &quot;space&quot;, &quot;avail&quot;, &quot;short&quot;, &quot;slurp&quot;, &quot;loyal&quot;, &quot;flirt&quot;, &quot;pizza&quot;, &quot;conch&quot;, &quot;tempo&quot;, &quot;droop&quot;, &quot;plate&quot;, &quot;bible&quot;, &quot;plunk&quot;, &quot;afoul&quot;, &quot;savoy&quot;, &quot;steep&quot;, &quot;agile&quot;, &quot;stake&quot;, &quot;dwell&quot;, &quot;knave&quot;, &quot;beard&quot;, &quot;arose&quot;, &quot;motif&quot;, &quot;smash&quot;, &quot;broil&quot;, &quot;glare&quot;, &quot;shove&quot;, &quot;baggy&quot;, &quot;mammy&quot;, &quot;swamp&quot;, &quot;along&quot;, &quot;rugby&quot;, &quot;wager&quot;, &quot;quack&quot;, &quot;squat&quot;, &quot;snaky&quot;, &quot;debit&quot;, &quot;mange&quot;, &quot;skate&quot;, &quot;ninth&quot;, &quot;joust&quot;, &quot;tramp&quot;, &quot;spurn&quot;, &quot;medal&quot;, &quot;micro&quot;, &quot;rebel&quot;, &quot;flank&quot;, &quot;learn&quot;, &quot;nadir&quot;, &quot;maple&quot;, &quot;comfy&quot;, &quot;remit&quot;, &quot;gruff&quot;, &quot;ester&quot;, &quot;least&quot;, &quot;mogul&quot;, &quot;fetch&quot;, &quot;cause&quot;, &quot;oaken&quot;, &quot;aglow&quot;, &quot;meaty&quot;, &quot;gaffe&quot;, &quot;shyly&quot;, &quot;racer&quot;, &quot;prowl&quot;, &quot;thief&quot;, &quot;stern&quot;, &quot;poesy&quot;, &quot;rocky&quot;, &quot;tweet&quot;, &quot;waist&quot;, &quot;spire&quot;, &quot;grope&quot;, &quot;havoc&quot;, &quot;patsy&quot;, &quot;truly&quot;, &quot;forty&quot;, &quot;deity&quot;, &quot;uncle&quot;, &quot;swish&quot;, &quot;giver&quot;, &quot;preen&quot;, &quot;bevel&quot;, &quot;lemur&quot;, &quot;draft&quot;, &quot;slope&quot;, &quot;annoy&quot;, &quot;lingo&quot;, &quot;bleak&quot;, &quot;ditty&quot;, &quot;curly&quot;, &quot;cedar&quot;, &quot;dirge&quot;, &quot;grown&quot;, &quot;horde&quot;, &quot;drool&quot;, &quot;shuck&quot;, &quot;crypt&quot;, &quot;cumin&quot;, &quot;stock&quot;, &quot;gravy&quot;, &quot;locus&quot;, &quot;wider&quot;, &quot;breed&quot;, &quot;quite&quot;, &quot;chafe&quot;, &quot;cache&quot;, &quot;blimp&quot;, &quot;deign&quot;, &quot;fiend&quot;, &quot;logic&quot;, &quot;cheap&quot;, &quot;elide&quot;, &quot;rigid&quot;, &quot;false&quot;, &quot;renal&quot;, &quot;pence&quot;, &quot;rowdy&quot;, &quot;shoot&quot;, &quot;blaze&quot;, &quot;envoy&quot;, &quot;posse&quot;, &quot;brief&quot;, &quot;never&quot;, &quot;abort&quot;, &quot;mouse&quot;, &quot;mucky&quot;, &quot;sulky&quot;, &quot;fiery&quot;, &quot;media&quot;, &quot;trunk&quot;, &quot;yeast&quot;, &quot;clear&quot;, &quot;skunk&quot;, &quot;scalp&quot;, &quot;bitty&quot;, &quot;cider&quot;, &quot;koala&quot;, &quot;duvet&quot;, &quot;segue&quot;, &quot;creme&quot;, &quot;super&quot;, &quot;grill&quot;, &quot;after&quot;, &quot;owner&quot;, &quot;ember&quot;, &quot;reach&quot;, &quot;nobly&quot;, &quot;empty&quot;, &quot;speed&quot;, &quot;gipsy&quot;, &quot;recur&quot;, &quot;smock&quot;, &quot;dread&quot;, &quot;merge&quot;, &quot;burst&quot;, &quot;kappa&quot;, &quot;amity&quot;, &quot;shaky&quot;, &quot;hover&quot;, &quot;carol&quot;, &quot;snort&quot;, &quot;synod&quot;, &quot;faint&quot;, &quot;haunt&quot;, &quot;flour&quot;, &quot;chair&quot;, &quot;detox&quot;, &quot;shrew&quot;, &quot;tense&quot;, &quot;plied&quot;, &quot;quark&quot;, &quot;burly&quot;, &quot;novel&quot;, &quot;waxen&quot;, &quot;stoic&quot;, &quot;jerky&quot;, &quot;blitz&quot;, &quot;beefy&quot;, &quot;lyric&quot;, &quot;hussy&quot;, &quot;towel&quot;, &quot;quilt&quot;, &quot;below&quot;, &quot;bingo&quot;, &quot;wispy&quot;, &quot;brash&quot;, &quot;scone&quot;, &quot;toast&quot;, &quot;easel&quot;, &quot;saucy&quot;, &quot;value&quot;, &quot;spice&quot;, &quot;honor&quot;, &quot;route&quot;, &quot;sharp&quot;, &quot;bawdy&quot;, &quot;radii&quot;, &quot;skull&quot;, &quot;phony&quot;, &quot;issue&quot;, &quot;lager&quot;, &quot;swell&quot;, &quot;urine&quot;, &quot;gassy&quot;, &quot;trial&quot;, &quot;flora&quot;, &quot;upper&quot;, &quot;latch&quot;, &quot;wight&quot;, &quot;brick&quot;, &quot;retry&quot;, &quot;holly&quot;, &quot;decal&quot;, &quot;grass&quot;, &quot;shack&quot;, &quot;dogma&quot;, &quot;mover&quot;, &quot;defer&quot;, &quot;sober&quot;, &quot;optic&quot;, &quot;crier&quot;, &quot;vying&quot;, &quot;nomad&quot;, &quot;flute&quot;, &quot;hippo&quot;, &quot;shark&quot;, &quot;drier&quot;, &quot;obese&quot;, &quot;bugle&quot;, &quot;tawny&quot;, &quot;chalk&quot;, &quot;feast&quot;, &quot;ruddy&quot;, &quot;pedal&quot;, &quot;scarf&quot;, &quot;cruel&quot;, &quot;bleat&quot;, &quot;tidal&quot;, &quot;slush&quot;, &quot;semen&quot;, &quot;windy&quot;, &quot;dusty&quot;, &quot;sally&quot;, &quot;igloo&quot;, &quot;nerdy&quot;, &quot;jewel&quot;, &quot;shone&quot;, &quot;whale&quot;, &quot;hymen&quot;, &quot;abuse&quot;, &quot;fugue&quot;, &quot;elbow&quot;, &quot;crumb&quot;, &quot;pansy&quot;, &quot;welsh&quot;, &quot;syrup&quot;, &quot;terse&quot;, &quot;suave&quot;, &quot;gamut&quot;, &quot;swung&quot;, &quot;drake&quot;, &quot;freed&quot;, &quot;afire&quot;, &quot;shirt&quot;, &quot;grout&quot;, &quot;oddly&quot;, &quot;tithe&quot;, &quot;plaid&quot;, &quot;dummy&quot;, &quot;broom&quot;, &quot;blind&quot;, &quot;torch&quot;, &quot;enemy&quot;, &quot;again&quot;, &quot;tying&quot;, &quot;pesky&quot;, &quot;alter&quot;, &quot;gazer&quot;, &quot;noble&quot;, &quot;ethos&quot;, &quot;bride&quot;, &quot;extol&quot;, &quot;decor&quot;, &quot;hobby&quot;, &quot;beast&quot;, &quot;idiom&quot;, &quot;utter&quot;, &quot;these&quot;, &quot;sixth&quot;, &quot;alarm&quot;, &quot;erase&quot;, &quot;elegy&quot;, &quot;spunk&quot;, &quot;piper&quot;, &quot;scaly&quot;, &quot;scold&quot;, &quot;hefty&quot;, &quot;chick&quot;, &quot;sooty&quot;, &quot;canal&quot;, &quot;whiny&quot;, &quot;slash&quot;, &quot;quake&quot;, &quot;joint&quot;, &quot;swept&quot;, &quot;prude&quot;, &quot;heavy&quot;, &quot;wield&quot;, &quot;femme&quot;, &quot;lasso&quot;, &quot;maize&quot;, &quot;shale&quot;, &quot;screw&quot;, &quot;spree&quot;, &quot;smoky&quot;, &quot;whiff&quot;, &quot;scent&quot;, &quot;glade&quot;, &quot;spent&quot;, &quot;prism&quot;, &quot;stoke&quot;, &quot;riper&quot;, &quot;orbit&quot;, &quot;cocoa&quot;, &quot;guilt&quot;, &quot;humus&quot;, &quot;shush&quot;, &quot;table&quot;, &quot;smirk&quot;, &quot;wrong&quot;, &quot;noisy&quot;, &quot;alert&quot;, &quot;shiny&quot;, &quot;elate&quot;, &quot;resin&quot;, &quot;whole&quot;, &quot;hunch&quot;, &quot;pixel&quot;, &quot;polar&quot;, &quot;hotel&quot;, &quot;sword&quot;, &quot;cleat&quot;, &quot;mango&quot;, &quot;rumba&quot;, &quot;puffy&quot;, &quot;filly&quot;, &quot;billy&quot;, &quot;leash&quot;, &quot;clout&quot;, &quot;dance&quot;, &quot;ovate&quot;, &quot;facet&quot;, &quot;chili&quot;, &quot;paint&quot;, &quot;liner&quot;, &quot;curio&quot;, &quot;salty&quot;, &quot;audio&quot;, &quot;snake&quot;, &quot;fable&quot;, &quot;cloak&quot;, &quot;navel&quot;, &quot;spurt&quot;, &quot;pesto&quot;, &quot;balmy&quot;, &quot;flash&quot;, &quot;unwed&quot;, &quot;early&quot;, &quot;churn&quot;, &quot;weedy&quot;, &quot;stump&quot;, &quot;lease&quot;, &quot;witty&quot;, &quot;wimpy&quot;, &quot;spoof&quot;, &quot;saner&quot;, &quot;blend&quot;, &quot;salsa&quot;, &quot;thick&quot;, &quot;warty&quot;, &quot;manic&quot;, &quot;blare&quot;, &quot;squib&quot;, &quot;spoon&quot;, &quot;probe&quot;, &quot;crepe&quot;, &quot;knack&quot;, &quot;force&quot;, &quot;debut&quot;, &quot;order&quot;, &quot;haste&quot;, &quot;teeth&quot;, &quot;agent&quot;, &quot;widen&quot;, &quot;icily&quot;, &quot;slice&quot;, &quot;ingot&quot;, &quot;clash&quot;, &quot;juror&quot;, &quot;blood&quot;, &quot;abode&quot;, &quot;throw&quot;, &quot;unity&quot;, &quot;pivot&quot;, &quot;slept&quot;, &quot;troop&quot;, &quot;spare&quot;, &quot;sewer&quot;, &quot;parse&quot;, &quot;morph&quot;, &quot;cacti&quot;, &quot;tacky&quot;, &quot;spool&quot;, &quot;demon&quot;, &quot;moody&quot;, &quot;annex&quot;, &quot;begin&quot;, &quot;fuzzy&quot;, &quot;patch&quot;, &quot;water&quot;, &quot;lumpy&quot;, &quot;admin&quot;, &quot;omega&quot;, &quot;limit&quot;, &quot;tabby&quot;, &quot;macho&quot;, &quot;aisle&quot;, &quot;skiff&quot;, &quot;basis&quot;, &quot;plank&quot;, &quot;verge&quot;, &quot;botch&quot;, &quot;crawl&quot;, &quot;lousy&quot;, &quot;slain&quot;, &quot;cubic&quot;, &quot;raise&quot;, &quot;wrack&quot;, &quot;guide&quot;, &quot;foist&quot;, &quot;cameo&quot;, &quot;under&quot;, &quot;actor&quot;, &quot;revue&quot;, &quot;fraud&quot;, &quot;harpy&quot;, &quot;scoop&quot;, &quot;climb&quot;, &quot;refer&quot;, &quot;olden&quot;, &quot;clerk&quot;, &quot;debar&quot;, &quot;tally&quot;, &quot;ethic&quot;, &quot;cairn&quot;, &quot;tulle&quot;, &quot;ghoul&quot;, &quot;hilly&quot;, &quot;crude&quot;, &quot;apart&quot;, &quot;scale&quot;, &quot;older&quot;, &quot;plain&quot;, &quot;sperm&quot;, &quot;briny&quot;, &quot;abbot&quot;, &quot;rerun&quot;, &quot;quest&quot;, &quot;crisp&quot;, &quot;bound&quot;, &quot;befit&quot;, &quot;drawn&quot;, &quot;suite&quot;, &quot;itchy&quot;, &quot;cheer&quot;, &quot;bagel&quot;, &quot;guess&quot;, &quot;broad&quot;, &quot;axiom&quot;, &quot;chard&quot;, &quot;caput&quot;, &quot;leant&quot;, &quot;harsh&quot;, &quot;curse&quot;, &quot;proud&quot;, &quot;swing&quot;, &quot;opine&quot;, &quot;taste&quot;, &quot;lupus&quot;, &quot;gumbo&quot;, &quot;miner&quot;, &quot;green&quot;, &quot;chasm&quot;, &quot;lipid&quot;, &quot;topic&quot;, &quot;armor&quot;, &quot;brush&quot;, &quot;crane&quot;, &quot;mural&quot;, &quot;abled&quot;, &quot;habit&quot;, &quot;bossy&quot;, &quot;maker&quot;, &quot;dusky&quot;, &quot;dizzy&quot;, &quot;lithe&quot;, &quot;brook&quot;, &quot;jazzy&quot;, &quot;fifty&quot;, &quot;sense&quot;, &quot;giant&quot;, &quot;surly&quot;, &quot;legal&quot;, &quot;fatal&quot;, &quot;flunk&quot;, &quot;began&quot;, &quot;prune&quot;, &quot;small&quot;, &quot;slant&quot;, &quot;scoff&quot;, &quot;torus&quot;, &quot;ninny&quot;, &quot;covey&quot;, &quot;viper&quot;, &quot;taken&quot;, &quot;moral&quot;, &quot;vogue&quot;, &quot;owing&quot;, &quot;token&quot;, &quot;entry&quot;, &quot;booth&quot;, &quot;voter&quot;, &quot;chide&quot;, &quot;elfin&quot;, &quot;ebony&quot;, &quot;neigh&quot;, &quot;minim&quot;, &quot;melon&quot;, &quot;kneed&quot;, &quot;decoy&quot;, &quot;voila&quot;, &quot;ankle&quot;, &quot;arrow&quot;, &quot;mushy&quot;, &quot;tribe&quot;, &quot;cease&quot;, &quot;eager&quot;, &quot;birth&quot;, &quot;graph&quot;, &quot;odder&quot;, &quot;terra&quot;, &quot;weird&quot;, &quot;tried&quot;, &quot;clack&quot;, &quot;color&quot;, &quot;rough&quot;, &quot;weigh&quot;, &quot;uncut&quot;, &quot;ladle&quot;, &quot;strip&quot;, &quot;craft&quot;, &quot;minus&quot;, &quot;dicey&quot;, &quot;titan&quot;, &quot;lucid&quot;, &quot;vicar&quot;, &quot;dress&quot;, &quot;ditch&quot;, &quot;gypsy&quot;, &quot;pasta&quot;, &quot;taffy&quot;, &quot;flame&quot;, &quot;swoop&quot;, &quot;aloof&quot;, &quot;sight&quot;, &quot;broke&quot;, &quot;teary&quot;, &quot;chart&quot;, &quot;sixty&quot;, &quot;wordy&quot;, &quot;sheer&quot;, &quot;leper&quot;, &quot;nosey&quot;, &quot;bulge&quot;, &quot;savor&quot;, &quot;clamp&quot;, &quot;funky&quot;, &quot;foamy&quot;, &quot;toxic&quot;, &quot;brand&quot;, &quot;plumb&quot;, &quot;dingy&quot;, &quot;butte&quot;, &quot;drill&quot;, &quot;tripe&quot;, &quot;bicep&quot;, &quot;tenor&quot;, &quot;krill&quot;, &quot;worse&quot;, &quot;drama&quot;, &quot;hyena&quot;, &quot;think&quot;, &quot;ratio&quot;, &quot;cobra&quot;, &quot;basil&quot;, &quot;scrum&quot;, &quot;bused&quot;, &quot;phone&quot;, &quot;court&quot;, &quot;camel&quot;, &quot;proof&quot;, &quot;heard&quot;, &quot;angel&quot;, &quot;petal&quot;, &quot;pouty&quot;, &quot;throb&quot;, &quot;maybe&quot;, &quot;fetal&quot;, &quot;sprig&quot;, &quot;spine&quot;, &quot;shout&quot;, &quot;cadet&quot;, &quot;macro&quot;, &quot;dodgy&quot;, &quot;satyr&quot;, &quot;rarer&quot;, &quot;binge&quot;, &quot;trend&quot;, &quot;nutty&quot;, &quot;leapt&quot;, &quot;amiss&quot;, &quot;split&quot;, &quot;myrrh&quot;, &quot;width&quot;, &quot;sonar&quot;, &quot;tower&quot;, &quot;baron&quot;, &quot;fever&quot;, &quot;waver&quot;, &quot;spark&quot;, &quot;belie&quot;, &quot;sloop&quot;, &quot;expel&quot;, &quot;smote&quot;, &quot;baler&quot;, &quot;above&quot;, &quot;north&quot;, &quot;wafer&quot;, &quot;scant&quot;, &quot;frill&quot;, &quot;awash&quot;, &quot;snack&quot;, &quot;scowl&quot;, &quot;frail&quot;, &quot;drift&quot;, &quot;limbo&quot;, &quot;fence&quot;, &quot;motel&quot;, &quot;ounce&quot;, &quot;wreak&quot;, &quot;revel&quot;, &quot;talon&quot;, &quot;prior&quot;, &quot;knelt&quot;, &quot;cello&quot;, &quot;flake&quot;, &quot;debug&quot;, &quot;anode&quot;, &quot;crime&quot;, &quot;salve&quot;, &quot;scout&quot;, &quot;imbue&quot;, &quot;pinky&quot;, &quot;stave&quot;, &quot;vague&quot;, &quot;chock&quot;, &quot;fight&quot;, &quot;video&quot;, &quot;stone&quot;, &quot;teach&quot;, &quot;cleft&quot;, &quot;frost&quot;, &quot;prawn&quot;, &quot;booty&quot;, &quot;twist&quot;, &quot;apnea&quot;, &quot;stiff&quot;, &quot;plaza&quot;, &quot;ledge&quot;, &quot;tweak&quot;, &quot;board&quot;, &quot;grant&quot;, &quot;medic&quot;, &quot;bacon&quot;, &quot;cable&quot;, &quot;brawl&quot;, &quot;slunk&quot;, &quot;raspy&quot;, &quot;forum&quot;, &quot;drone&quot;, &quot;women&quot;, &quot;mucus&quot;, &quot;boast&quot;, &quot;toddy&quot;, &quot;coven&quot;, &quot;tumor&quot;, &quot;truer&quot;, &quot;wrath&quot;, &quot;stall&quot;, &quot;steam&quot;, &quot;axial&quot;, &quot;purer&quot;, &quot;daily&quot;, &quot;trail&quot;, &quot;niche&quot;, &quot;mealy&quot;, &quot;juice&quot;, &quot;nylon&quot;, &quot;plump&quot;, &quot;merry&quot;, &quot;flail&quot;, &quot;papal&quot;, &quot;wheat&quot;, &quot;berry&quot;, &quot;cower&quot;, &quot;erect&quot;, &quot;brute&quot;, &quot;leggy&quot;, &quot;snipe&quot;, &quot;sinew&quot;, &quot;skier&quot;, &quot;penny&quot;, &quot;jumpy&quot;, &quot;rally&quot;, &quot;umbra&quot;, &quot;scary&quot;, &quot;modem&quot;, &quot;gross&quot;, &quot;avian&quot;, &quot;greed&quot;, &quot;satin&quot;, &quot;tonic&quot;, &quot;parka&quot;, &quot;sniff&quot;, &quot;livid&quot;, &quot;stark&quot;, &quot;trump&quot;, &quot;giddy&quot;, &quot;reuse&quot;, &quot;taboo&quot;, &quot;avoid&quot;, &quot;quote&quot;, &quot;devil&quot;, &quot;liken&quot;, &quot;gloss&quot;, &quot;gayer&quot;, &quot;beret&quot;, &quot;noise&quot;, &quot;gland&quot;, &quot;dealt&quot;, &quot;sling&quot;, &quot;rumor&quot;, &quot;opera&quot;, &quot;thigh&quot;, &quot;tonga&quot;, &quot;flare&quot;, &quot;wound&quot;, &quot;white&quot;, &quot;bulky&quot;, &quot;etude&quot;, &quot;horse&quot;, &quot;circa&quot;, &quot;paddy&quot;, &quot;inbox&quot;, &quot;fizzy&quot;, &quot;grain&quot;, &quot;exert&quot;, &quot;surge&quot;, &quot;gleam&quot;, &quot;belle&quot;, &quot;salvo&quot;, &quot;crush&quot;, &quot;fruit&quot;, &quot;sappy&quot;, &quot;taker&quot;, &quot;tract&quot;, &quot;ovine&quot;, &quot;spiky&quot;, &quot;frank&quot;, &quot;reedy&quot;, &quot;filth&quot;, &quot;spasm&quot;, &quot;heave&quot;, &quot;mambo&quot;, &quot;right&quot;, &quot;clank&quot;, &quot;trust&quot;, &quot;lumen&quot;, &quot;borne&quot;, &quot;spook&quot;, &quot;sauce&quot;, &quot;amber&quot;, &quot;lathe&quot;, &quot;carat&quot;, &quot;corer&quot;, &quot;dirty&quot;, &quot;slyly&quot;, &quot;affix&quot;, &quot;alloy&quot;, &quot;taint&quot;, &quot;sheep&quot;, &quot;kinky&quot;, &quot;wooly&quot;, &quot;mauve&quot;, &quot;flung&quot;, &quot;yacht&quot;, &quot;fried&quot;, &quot;quail&quot;, &quot;brunt&quot;, &quot;grimy&quot;, &quot;curvy&quot;, &quot;cagey&quot;, &quot;rinse&quot;, &quot;deuce&quot;, &quot;state&quot;, &quot;grasp&quot;, &quot;milky&quot;, &quot;bison&quot;, &quot;graft&quot;, &quot;sandy&quot;, &quot;baste&quot;, &quot;flask&quot;, &quot;hedge&quot;, &quot;girly&quot;, &quot;swash&quot;, &quot;boney&quot;, &quot;coupe&quot;, &quot;endow&quot;, &quot;abhor&quot;, &quot;welch&quot;, &quot;blade&quot;, &quot;tight&quot;, &quot;geese&quot;, &quot;miser&quot;, &quot;mirth&quot;, &quot;cloud&quot;, &quot;cabal&quot;, &quot;leech&quot;, &quot;close&quot;, &quot;tenth&quot;, &quot;pecan&quot;, &quot;droit&quot;, &quot;grail&quot;, &quot;clone&quot;, &quot;guise&quot;, &quot;ralph&quot;, &quot;tango&quot;, &quot;biddy&quot;, &quot;smith&quot;, &quot;mower&quot;, &quot;payee&quot;, &quot;serif&quot;, &quot;drape&quot;, &quot;fifth&quot;, &quot;spank&quot;, &quot;glaze&quot;, &quot;allot&quot;, &quot;truck&quot;, &quot;kayak&quot;, &quot;virus&quot;, &quot;testy&quot;, &quot;tepee&quot;, &quot;fully&quot;, &quot;zonal&quot;, &quot;metro&quot;, &quot;curry&quot;, &quot;grand&quot;, &quot;banjo&quot;, &quot;axion&quot;, &quot;bezel&quot;, &quot;occur&quot;, &quot;chain&quot;, &quot;nasal&quot;, &quot;gooey&quot;, &quot;filer&quot;, &quot;brace&quot;, &quot;allay&quot;, &quot;pubic&quot;, &quot;raven&quot;, &quot;plead&quot;, &quot;gnash&quot;, &quot;flaky&quot;, &quot;munch&quot;, &quot;dully&quot;, &quot;eking&quot;, &quot;thing&quot;, &quot;slink&quot;, &quot;hurry&quot;, &quot;theft&quot;, &quot;shorn&quot;, &quot;pygmy&quot;, &quot;ranch&quot;, &quot;wring&quot;, &quot;lemon&quot;, &quot;shore&quot;, &quot;mamma&quot;, &quot;froze&quot;, &quot;newer&quot;, &quot;style&quot;, &quot;moose&quot;, &quot;antic&quot;, &quot;drown&quot;, &quot;vegan&quot;, &quot;chess&quot;, &quot;guppy&quot;, &quot;union&quot;, &quot;lever&quot;, &quot;lorry&quot;, &quot;image&quot;, &quot;cabby&quot;, &quot;druid&quot;, &quot;exact&quot;, &quot;truth&quot;, &quot;dopey&quot;, &quot;spear&quot;, &quot;cried&quot;, &quot;chime&quot;, &quot;crony&quot;, &quot;stunk&quot;, &quot;timid&quot;, &quot;batch&quot;, &quot;gauge&quot;, &quot;rotor&quot;, &quot;crack&quot;, &quot;curve&quot;, &quot;latte&quot;, &quot;witch&quot;, &quot;bunch&quot;, &quot;repel&quot;, &quot;anvil&quot;, &quot;soapy&quot;, &quot;meter&quot;, &quot;broth&quot;, &quot;madly&quot;, &quot;dried&quot;, &quot;scene&quot;, &quot;known&quot;, &quot;magma&quot;, &quot;roost&quot;, &quot;woman&quot;, &quot;thong&quot;, &quot;punch&quot;, &quot;pasty&quot;, &quot;downy&quot;, &quot;knead&quot;, &quot;whirl&quot;, &quot;rapid&quot;, &quot;clang&quot;, &quot;anger&quot;, &quot;drive&quot;, &quot;goofy&quot;, &quot;email&quot;, &quot;music&quot;, &quot;stuff&quot;, &quot;bleep&quot;, &quot;rider&quot;, &quot;mecca&quot;, &quot;folio&quot;, &quot;setup&quot;, &quot;verso&quot;, &quot;quash&quot;, &quot;fauna&quot;, &quot;gummy&quot;, &quot;happy&quot;, &quot;newly&quot;, &quot;fussy&quot;, &quot;relic&quot;, &quot;guava&quot;, &quot;ratty&quot;, &quot;fudge&quot;, &quot;femur&quot;, &quot;chirp&quot;, &quot;forte&quot;, &quot;alibi&quot;, &quot;whine&quot;, &quot;petty&quot;, &quot;golly&quot;, &quot;plait&quot;, &quot;fleck&quot;, &quot;felon&quot;, &quot;gourd&quot;, &quot;brown&quot;, &quot;thrum&quot;, &quot;ficus&quot;, &quot;stash&quot;, &quot;decry&quot;, &quot;wiser&quot;, &quot;junta&quot;, &quot;visor&quot;, &quot;daunt&quot;, &quot;scree&quot;, &quot;impel&quot;, &quot;await&quot;, &quot;press&quot;, &quot;whose&quot;, &quot;turbo&quot;, &quot;stoop&quot;, &quot;speak&quot;, &quot;mangy&quot;, &quot;eying&quot;, &quot;inlet&quot;, &quot;crone&quot;, &quot;pulse&quot;, &quot;mossy&quot;, &quot;staid&quot;, &quot;hence&quot;, &quot;pinch&quot;, &quot;teddy&quot;, &quot;sully&quot;, &quot;snore&quot;, &quot;ripen&quot;, &quot;snowy&quot;, &quot;attic&quot;, &quot;going&quot;, &quot;leach&quot;, &quot;mouth&quot;, &quot;hound&quot;, &quot;clump&quot;, &quot;tonal&quot;, &quot;bigot&quot;, &quot;peril&quot;, &quot;piece&quot;, &quot;blame&quot;, &quot;haute&quot;, &quot;spied&quot;, &quot;undid&quot;, &quot;intro&quot;, &quot;basal&quot;, &quot;shine&quot;, &quot;gecko&quot;, &quot;rodeo&quot;, &quot;guard&quot;, &quot;steer&quot;, &quot;loamy&quot;, &quot;scamp&quot;, &quot;scram&quot;, &quot;manly&quot;, &quot;hello&quot;, &quot;vaunt&quot;, &quot;organ&quot;, &quot;feral&quot;, &quot;knock&quot;, &quot;extra&quot;, &quot;condo&quot;, &quot;adapt&quot;, &quot;willy&quot;, &quot;polka&quot;, &quot;rayon&quot;, &quot;skirt&quot;, &quot;faith&quot;, &quot;torso&quot;, &quot;match&quot;, &quot;mercy&quot;, &quot;tepid&quot;, &quot;sleek&quot;, &quot;riser&quot;, &quot;twixt&quot;, &quot;peace&quot;, &quot;flush&quot;, &quot;catty&quot;, &quot;login&quot;, &quot;eject&quot;, &quot;roger&quot;, &quot;rival&quot;, &quot;untie&quot;, &quot;refit&quot;, &quot;aorta&quot;, &quot;adult&quot;, &quot;judge&quot;, &quot;rower&quot;, &quot;artsy&quot;, &quot;rural&quot;, &quot;shave&quot;] var guessList = [&quot;aahed&quot;, &quot;aalii&quot;, &quot;aargh&quot;, &quot;aarti&quot;, &quot;abaca&quot;, &quot;abaci&quot;, &quot;abacs&quot;, &quot;abaft&quot;, &quot;abaka&quot;, &quot;abamp&quot;, &quot;aband&quot;, &quot;abash&quot;, &quot;abask&quot;, &quot;abaya&quot;, &quot;abbas&quot;, &quot;abbed&quot;, &quot;abbes&quot;, &quot;abcee&quot;, &quot;abeam&quot;, &quot;abear&quot;, &quot;abele&quot;, &quot;abers&quot;, &quot;abets&quot;, &quot;abies&quot;, &quot;abler&quot;, &quot;ables&quot;, &quot;ablet&quot;, &quot;ablow&quot;, &quot;abmho&quot;, &quot;abohm&quot;, &quot;aboil&quot;, &quot;aboma&quot;, &quot;aboon&quot;, &quot;abord&quot;, &quot;abore&quot;, &quot;abram&quot;, &quot;abray&quot;, &quot;abrim&quot;, &quot;abrin&quot;, &quot;abris&quot;, &quot;absey&quot;, &quot;absit&quot;, &quot;abuna&quot;, &quot;abune&quot;, &quot;abuts&quot;, &quot;abuzz&quot;, &quot;abyes&quot;, &quot;abysm&quot;, &quot;acais&quot;, &quot;acari&quot;, &quot;accas&quot;, &quot;accoy&quot;, &quot;acerb&quot;, &quot;acers&quot;, &quot;aceta&quot;, &quot;achar&quot;, &quot;ached&quot;, &quot;aches&quot;, &quot;achoo&quot;, &quot;acids&quot;, &quot;acidy&quot;, &quot;acing&quot;, &quot;acini&quot;, &quot;ackee&quot;, &quot;acker&quot;, &quot;acmes&quot;, &quot;acmic&quot;, &quot;acned&quot;, &quot;acnes&quot;, &quot;acock&quot;, &quot;acold&quot;, &quot;acred&quot;, &quot;acres&quot;, &quot;acros&quot;, &quot;acted&quot;, &quot;actin&quot;, &quot;acton&quot;, &quot;acyls&quot;, &quot;adaws&quot;, &quot;adays&quot;, &quot;adbot&quot;, &quot;addax&quot;, &quot;added&quot;, &quot;adder&quot;, &quot;addio&quot;, &quot;addle&quot;, &quot;adeem&quot;, &quot;adhan&quot;, &quot;adieu&quot;, &quot;adios&quot;, &quot;adits&quot;, &quot;adman&quot;, &quot;admen&quot;, &quot;admix&quot;, &quot;adobo&quot;, &quot;adown&quot;, &quot;adoze&quot;, &quot;adrad&quot;, &quot;adred&quot;, &quot;adsum&quot;, &quot;aduki&quot;, &quot;adunc&quot;, &quot;adust&quot;, &quot;advew&quot;, &quot;adyta&quot;, &quot;adzed&quot;, &quot;adzes&quot;, &quot;aecia&quot;, &quot;aedes&quot;, &quot;aegis&quot;, &quot;aeons&quot;, &quot;aerie&quot;, &quot;aeros&quot;, &quot;aesir&quot;, &quot;afald&quot;, &quot;afara&quot;, &quot;afars&quot;, &quot;afear&quot;, &quot;aflaj&quot;, &quot;afore&quot;, &quot;afrit&quot;, &quot;afros&quot;, &quot;agama&quot;, &quot;agami&quot;, &quot;agars&quot;, &quot;agast&quot;, &quot;agave&quot;, &quot;agaze&quot;, &quot;agene&quot;, &quot;agers&quot;, &quot;agger&quot;, &quot;aggie&quot;, &quot;aggri&quot;, &quot;aggro&quot;, &quot;aggry&quot;, &quot;aghas&quot;, &quot;agila&quot;, &quot;agios&quot;, &quot;agism&quot;, &quot;agist&quot;, &quot;agita&quot;, &quot;aglee&quot;, &quot;aglet&quot;, &quot;agley&quot;, &quot;agloo&quot;, &quot;aglus&quot;, &quot;agmas&quot;, &quot;agoge&quot;, &quot;agone&quot;, &quot;agons&quot;, &quot;agood&quot;, &quot;agria&quot;, &quot;agrin&quot;, &quot;agros&quot;, &quot;agued&quot;, &quot;agues&quot;, &quot;aguna&quot;, &quot;aguti&quot;, &quot;aheap&quot;, &quot;ahent&quot;, &quot;ahigh&quot;, &quot;ahind&quot;, &quot;ahing&quot;, &quot;ahint&quot;, &quot;ahold&quot;, &quot;ahull&quot;, &quot;ahuru&quot;, &quot;aidas&quot;, &quot;aided&quot;, &quot;aides&quot;, &quot;aidoi&quot;, &quot;aidos&quot;, &quot;aiery&quot;, &quot;aigas&quot;, &quot;aight&quot;, &quot;ailed&quot;, &quot;aimed&quot;, &quot;aimer&quot;, &quot;ainee&quot;, &quot;ainga&quot;, &quot;aioli&quot;, &quot;aired&quot;, &quot;airer&quot;, &quot;airns&quot;, &quot;airth&quot;, &quot;airts&quot;, &quot;aitch&quot;, &quot;aitus&quot;, &quot;aiver&quot;, &quot;aiyee&quot;, &quot;aizle&quot;, &quot;ajies&quot;, &quot;ajiva&quot;, &quot;ajuga&quot;, &quot;ajwan&quot;, &quot;akees&quot;, &quot;akela&quot;, &quot;akene&quot;, &quot;aking&quot;, &quot;akita&quot;, &quot;akkas&quot;, &quot;alaap&quot;, &quot;alack&quot;, &quot;alamo&quot;, &quot;aland&quot;, &quot;alane&quot;, &quot;alang&quot;, &quot;alans&quot;, &quot;alant&quot;, &quot;alapa&quot;, &quot;alaps&quot;, &quot;alary&quot;, &quot;alate&quot;, &quot;alays&quot;, &quot;albas&quot;, &quot;albee&quot;, &quot;alcid&quot;, &quot;alcos&quot;, &quot;aldea&quot;, &quot;alder&quot;, &quot;aldol&quot;, &quot;aleck&quot;, &quot;alecs&quot;, &quot;alefs&quot;, &quot;aleft&quot;, &quot;aleph&quot;, &quot;alews&quot;, &quot;aleye&quot;, &quot;alfas&quot;, &quot;algal&quot;, &quot;algas&quot;, &quot;algid&quot;, &quot;algin&quot;, &quot;algor&quot;, &quot;algum&quot;, &quot;alias&quot;, &quot;alifs&quot;, &quot;aline&quot;, &quot;alist&quot;, &quot;aliya&quot;, &quot;alkie&quot;, &quot;alkos&quot;, &quot;alkyd&quot;, &quot;alkyl&quot;, &quot;allee&quot;, &quot;allel&quot;, &quot;allis&quot;, &quot;allod&quot;, &quot;allyl&quot;, &quot;almah&quot;, &quot;almas&quot;, &quot;almeh&quot;, &quot;almes&quot;, &quot;almud&quot;, &quot;almug&quot;, &quot;alods&quot;, &quot;aloed&quot;, &quot;aloes&quot;, &quot;aloha&quot;, &quot;aloin&quot;, &quot;aloos&quot;, &quot;alowe&quot;, &quot;altho&quot;, &quot;altos&quot;, &quot;alula&quot;, &quot;alums&quot;, &quot;alure&quot;, &quot;alvar&quot;, &quot;alway&quot;, &quot;amahs&quot;, &quot;amain&quot;, &quot;amate&quot;, &quot;amaut&quot;, &quot;amban&quot;, &quot;ambit&quot;, &quot;ambos&quot;, &quot;ambry&quot;, &quot;ameba&quot;, &quot;ameer&quot;, &quot;amene&quot;, &quot;amens&quot;, &quot;ament&quot;, &quot;amias&quot;, &quot;amice&quot;, &quot;amici&quot;, &quot;amide&quot;, &quot;amido&quot;, &quot;amids&quot;, &quot;amies&quot;, &quot;amiga&quot;, &quot;amigo&quot;, &quot;amine&quot;, &quot;amino&quot;, &quot;amins&quot;, &quot;amirs&quot;, &quot;amlas&quot;, &quot;amman&quot;, &quot;ammon&quot;, &quot;ammos&quot;, &quot;amnia&quot;, &quot;amnic&quot;, &quot;amnio&quot;, &quot;amoks&quot;, &quot;amole&quot;, &quot;amort&quot;, &quot;amour&quot;, &quot;amove&quot;, &quot;amowt&quot;, &quot;amped&quot;, &quot;ampul&quot;, &quot;amrit&quot;, &quot;amuck&quot;, &quot;amyls&quot;, &quot;anana&quot;, &quot;anata&quot;, &quot;ancho&quot;, &quot;ancle&quot;, &quot;ancon&quot;, &quot;andro&quot;, &quot;anear&quot;, &quot;anele&quot;, &quot;anent&quot;, &quot;angas&quot;, &quot;anglo&quot;, &quot;anigh&quot;, &quot;anile&quot;, &quot;anils&quot;, &quot;anima&quot;, &quot;animi&quot;, &quot;anion&quot;, &quot;anise&quot;, &quot;anker&quot;, &quot;ankhs&quot;, &quot;ankus&quot;, &quot;anlas&quot;, &quot;annal&quot;, &quot;annas&quot;, &quot;annat&quot;, &quot;anoas&quot;, &quot;anole&quot;, &quot;anomy&quot;, &quot;ansae&quot;, &quot;antae&quot;, &quot;antar&quot;, &quot;antas&quot;, &quot;anted&quot;, &quot;antes&quot;, &quot;antis&quot;, &quot;antra&quot;, &quot;antre&quot;, &quot;antsy&quot;, &quot;anura&quot;, &quot;anyon&quot;, &quot;apace&quot;, &quot;apage&quot;, &quot;apaid&quot;, &quot;apayd&quot;, &quot;apays&quot;, &quot;apeak&quot;, &quot;apeek&quot;, &quot;apers&quot;, &quot;apert&quot;, &quot;apery&quot;, &quot;apgar&quot;, &quot;aphis&quot;, &quot;apian&quot;, &quot;apiol&quot;, &quot;apish&quot;, &quot;apism&quot;, &quot;apode&quot;, &quot;apods&quot;, &quot;apoop&quot;, &quot;aport&quot;, &quot;appal&quot;, &quot;appay&quot;, &quot;appel&quot;, &quot;appro&quot;, &quot;appui&quot;, &quot;appuy&quot;, &quot;apres&quot;, &quot;apses&quot;, &quot;apsis&quot;, &quot;apsos&quot;, &quot;apted&quot;, &quot;apter&quot;, &quot;aquae&quot;, &quot;aquas&quot;, &quot;araba&quot;, &quot;araks&quot;, &quot;arame&quot;, &quot;arars&quot;, &quot;arbas&quot;, &quot;arced&quot;, &quot;archi&quot;, &quot;arcos&quot;, &quot;arcus&quot;, &quot;ardeb&quot;, &quot;ardri&quot;, &quot;aread&quot;, &quot;areae&quot;, &quot;areal&quot;, &quot;arear&quot;, &quot;areas&quot;, &quot;areca&quot;, &quot;aredd&quot;, &quot;arede&quot;, &quot;arefy&quot;, &quot;areic&quot;, &quot;arene&quot;, &quot;arepa&quot;, &quot;arere&quot;, &quot;arete&quot;, &quot;arets&quot;, &quot;arett&quot;, &quot;argal&quot;, &quot;argan&quot;, &quot;argil&quot;, &quot;argle&quot;, &quot;argol&quot;, &quot;argon&quot;, &quot;argot&quot;, &quot;argus&quot;, &quot;arhat&quot;, &quot;arias&quot;, &quot;ariel&quot;, &quot;ariki&quot;, &quot;arils&quot;, &quot;ariot&quot;, &quot;arish&quot;, &quot;arked&quot;, &quot;arled&quot;, &quot;arles&quot;, &quot;armed&quot;, &quot;armer&quot;, &quot;armet&quot;, &quot;armil&quot;, &quot;arnas&quot;, &quot;arnut&quot;, &quot;aroba&quot;, &quot;aroha&quot;, &quot;aroid&quot;, &quot;arpas&quot;, &quot;arpen&quot;, &quot;arrah&quot;, &quot;arras&quot;, &quot;arret&quot;, &quot;arris&quot;, &quot;arroz&quot;, &quot;arsed&quot;, &quot;arses&quot;, &quot;arsey&quot;, &quot;arsis&quot;, &quot;artal&quot;, &quot;artel&quot;, &quot;artic&quot;, &quot;artis&quot;, &quot;aruhe&quot;, &quot;arums&quot;, &quot;arval&quot;, &quot;arvee&quot;, &quot;arvos&quot;, &quot;aryls&quot;, &quot;asana&quot;, &quot;ascon&quot;, &quot;ascus&quot;, &quot;asdic&quot;, &quot;ashed&quot;, &quot;ashes&quot;, &quot;ashet&quot;, &quot;asked&quot;, &quot;asker&quot;, &quot;askoi&quot;, &quot;askos&quot;, &quot;aspen&quot;, &quot;asper&quot;, &quot;aspic&quot;, &quot;aspie&quot;, &quot;aspis&quot;, &quot;aspro&quot;, &quot;assai&quot;, &quot;assam&quot;, &quot;asses&quot;, &quot;assez&quot;, &quot;assot&quot;, &quot;aster&quot;, &quot;astir&quot;, &quot;astun&quot;, &quot;asura&quot;, &quot;asway&quot;, &quot;aswim&quot;, &quot;asyla&quot;, &quot;ataps&quot;, &quot;ataxy&quot;, &quot;atigi&quot;, &quot;atilt&quot;, &quot;atimy&quot;, &quot;atlas&quot;, &quot;atman&quot;, &quot;atmas&quot;, &quot;atmos&quot;, &quot;atocs&quot;, &quot;atoke&quot;, &quot;atoks&quot;, &quot;atoms&quot;, &quot;atomy&quot;, &quot;atony&quot;, &quot;atopy&quot;, &quot;atria&quot;, &quot;atrip&quot;, &quot;attap&quot;, &quot;attar&quot;, &quot;atuas&quot;, &quot;audad&quot;, &quot;auger&quot;, &quot;aught&quot;, &quot;aulas&quot;, &quot;aulic&quot;, &quot;auloi&quot;, &quot;aulos&quot;, &quot;aumil&quot;, &quot;aunes&quot;, &quot;aunts&quot;, &quot;aurae&quot;, &quot;aural&quot;, &quot;aurar&quot;, &quot;auras&quot;, &quot;aurei&quot;, &quot;aures&quot;, &quot;auric&quot;, &quot;auris&quot;, &quot;aurum&quot;, &quot;autos&quot;, &quot;auxin&quot;, &quot;avale&quot;, &quot;avant&quot;, &quot;avast&quot;, &quot;avels&quot;, &quot;avens&quot;, &quot;avers&quot;, &quot;avgas&quot;, &quot;avine&quot;, &quot;avion&quot;, &quot;avise&quot;, &quot;aviso&quot;, &quot;avize&quot;, &quot;avows&quot;, &quot;avyze&quot;, &quot;awarn&quot;, &quot;awato&quot;, &quot;awave&quot;, &quot;aways&quot;, &quot;awdls&quot;, &quot;aweel&quot;, &quot;aweto&quot;, &quot;awing&quot;, &quot;awmry&quot;, &quot;awned&quot;, &quot;awner&quot;, &quot;awols&quot;, &quot;awork&quot;, &quot;axels&quot;, &quot;axile&quot;, &quot;axils&quot;, &quot;axing&quot;, &quot;axite&quot;, &quot;axled&quot;, &quot;axles&quot;, &quot;axman&quot;, &quot;axmen&quot;, &quot;axoid&quot;, &quot;axone&quot;, &quot;axons&quot;, &quot;ayahs&quot;, &quot;ayaya&quot;, &quot;ayelp&quot;, &quot;aygre&quot;, &quot;ayins&quot;, &quot;ayont&quot;, &quot;ayres&quot;, &quot;ayrie&quot;, &quot;azans&quot;, &quot;azide&quot;, &quot;azido&quot;, &quot;azine&quot;, &quot;azlon&quot;, &quot;azoic&quot;, &quot;azole&quot;, &quot;azons&quot;, &quot;azote&quot;, &quot;azoth&quot;, &quot;azuki&quot;, &quot;azurn&quot;, &quot;azury&quot;, &quot;azygy&quot;, &quot;azyme&quot;, &quot;azyms&quot;, &quot;baaed&quot;, &quot;baals&quot;, &quot;babas&quot;, &quot;babel&quot;, &quot;babes&quot;, &quot;babka&quot;, &quot;baboo&quot;, &quot;babul&quot;, &quot;babus&quot;, &quot;bacca&quot;, &quot;bacco&quot;, &quot;baccy&quot;, &quot;bacha&quot;, &quot;bachs&quot;, &quot;backs&quot;, &quot;baddy&quot;, &quot;baels&quot;, &quot;baffs&quot;, &quot;baffy&quot;, &quot;bafts&quot;, &quot;baghs&quot;, &quot;bagie&quot;, &quot;bahts&quot;, &quot;bahus&quot;, &quot;bahut&quot;, &quot;bails&quot;, &quot;bairn&quot;, &quot;baisa&quot;, &quot;baith&quot;, &quot;baits&quot;, &quot;baiza&quot;, &quot;baize&quot;, &quot;bajan&quot;, &quot;bajra&quot;, &quot;bajri&quot;, &quot;bajus&quot;, &quot;baked&quot;, &quot;baken&quot;, &quot;bakes&quot;, &quot;bakra&quot;, &quot;balas&quot;, &quot;balds&quot;, &quot;baldy&quot;, &quot;baled&quot;, &quot;bales&quot;, &quot;balks&quot;, &quot;balky&quot;, &quot;balls&quot;, &quot;bally&quot;, &quot;balms&quot;, &quot;baloo&quot;, &quot;balsa&quot;, &quot;balti&quot;, &quot;balun&quot;, &quot;balus&quot;, &quot;bambi&quot;, &quot;banak&quot;, &quot;banco&quot;, &quot;bancs&quot;, &quot;banda&quot;, &quot;bandh&quot;, &quot;bands&quot;, &quot;bandy&quot;, &quot;baned&quot;, &quot;banes&quot;, &quot;bangs&quot;, &quot;bania&quot;, &quot;banks&quot;, &quot;banns&quot;, &quot;bants&quot;, &quot;bantu&quot;, &quot;banty&quot;, &quot;banya&quot;, &quot;bapus&quot;, &quot;barbe&quot;, &quot;barbs&quot;, &quot;barby&quot;, &quot;barca&quot;, &quot;barde&quot;, &quot;bardo&quot;, &quot;bards&quot;, &quot;bardy&quot;, &quot;bared&quot;, &quot;barer&quot;, &quot;bares&quot;, &quot;barfi&quot;, &quot;barfs&quot;, &quot;baric&quot;, &quot;barks&quot;, &quot;barky&quot;, &quot;barms&quot;, &quot;barmy&quot;, &quot;barns&quot;, &quot;barny&quot;, &quot;barps&quot;, &quot;barra&quot;, &quot;barre&quot;, &quot;barro&quot;, &quot;barry&quot;, &quot;barye&quot;, &quot;basan&quot;, &quot;based&quot;, &quot;basen&quot;, &quot;baser&quot;, &quot;bases&quot;, &quot;basho&quot;, &quot;basij&quot;, &quot;basks&quot;, &quot;bason&quot;, &quot;basse&quot;, &quot;bassi&quot;, &quot;basso&quot;, &quot;bassy&quot;, &quot;basta&quot;, &quot;basti&quot;, &quot;basto&quot;, &quot;basts&quot;, &quot;bated&quot;, &quot;bates&quot;, &quot;baths&quot;, &quot;batik&quot;, &quot;batta&quot;, &quot;batts&quot;, &quot;battu&quot;, &quot;bauds&quot;, &quot;bauks&quot;, &quot;baulk&quot;, &quot;baurs&quot;, &quot;bavin&quot;, &quot;bawds&quot;, &quot;bawks&quot;, &quot;bawls&quot;, &quot;bawns&quot;, &quot;bawrs&quot;, &quot;bawty&quot;, &quot;bayed&quot;, &quot;bayer&quot;, &quot;bayes&quot;, &quot;bayle&quot;, &quot;bayts&quot;, &quot;bazar&quot;, &quot;bazoo&quot;, &quot;beads&quot;, &quot;beaks&quot;, &quot;beaky&quot;, &quot;beals&quot;, &quot;beams&quot;, &quot;beamy&quot;, &quot;beano&quot;, &quot;beans&quot;, &quot;beany&quot;, &quot;beare&quot;, &quot;bears&quot;, &quot;beath&quot;, &quot;beats&quot;, &quot;beaty&quot;, &quot;beaus&quot;, &quot;beaut&quot;, &quot;beaux&quot;, &quot;bebop&quot;, &quot;becap&quot;, &quot;becke&quot;, &quot;becks&quot;, &quot;bedad&quot;, &quot;bedel&quot;, &quot;bedes&quot;, &quot;bedew&quot;, &quot;bedim&quot;, &quot;bedye&quot;, &quot;beedi&quot;, &quot;beefs&quot;, &quot;beeps&quot;, &quot;beers&quot;, &quot;beery&quot;, &quot;beets&quot;, &quot;befog&quot;, &quot;begad&quot;, &quot;begar&quot;, &quot;begem&quot;, &quot;begot&quot;, &quot;begum&quot;, &quot;beige&quot;, &quot;beigy&quot;, &quot;beins&quot;, &quot;bekah&quot;, &quot;belah&quot;, &quot;belar&quot;, &quot;belay&quot;, &quot;belee&quot;, &quot;belga&quot;, &quot;bells&quot;, &quot;belon&quot;, &quot;belts&quot;, &quot;bemad&quot;, &quot;bemas&quot;, &quot;bemix&quot;, &quot;bemud&quot;, &quot;bends&quot;, &quot;bendy&quot;, &quot;benes&quot;, &quot;benet&quot;, &quot;benga&quot;, &quot;benis&quot;, &quot;benne&quot;, &quot;benni&quot;, &quot;benny&quot;, &quot;bento&quot;, &quot;bents&quot;, &quot;benty&quot;, &quot;bepat&quot;, &quot;beray&quot;, &quot;beres&quot;, &quot;bergs&quot;, &quot;berko&quot;, &quot;berks&quot;, &quot;berme&quot;, &quot;berms&quot;, &quot;berob&quot;, &quot;beryl&quot;, &quot;besat&quot;, &quot;besaw&quot;, &quot;besee&quot;, &quot;beses&quot;, &quot;besit&quot;, &quot;besom&quot;, &quot;besot&quot;, &quot;besti&quot;, &quot;bests&quot;, &quot;betas&quot;, &quot;beted&quot;, &quot;betes&quot;, &quot;beths&quot;, &quot;betid&quot;, &quot;beton&quot;, &quot;betta&quot;, &quot;betty&quot;, &quot;bever&quot;, &quot;bevor&quot;, &quot;bevue&quot;, &quot;bevvy&quot;, &quot;bewet&quot;, &quot;bewig&quot;, &quot;bezes&quot;, &quot;bezil&quot;, &quot;bezzy&quot;, &quot;bhais&quot;, &quot;bhaji&quot;, &quot;bhang&quot;, &quot;bhats&quot;, &quot;bhels&quot;, &quot;bhoot&quot;, &quot;bhuna&quot;, &quot;bhuts&quot;, &quot;biach&quot;, &quot;biali&quot;, &quot;bialy&quot;, &quot;bibbs&quot;, &quot;bibes&quot;, &quot;biccy&quot;, &quot;bices&quot;, &quot;bided&quot;, &quot;bider&quot;, &quot;bides&quot;, &quot;bidet&quot;, &quot;bidis&quot;, &quot;bidon&quot;, &quot;bield&quot;, &quot;biers&quot;, &quot;biffo&quot;, &quot;biffs&quot;, &quot;biffy&quot;, &quot;bifid&quot;, &quot;bigae&quot;, &quot;biggs&quot;, &quot;biggy&quot;, &quot;bigha&quot;, &quot;bight&quot;, &quot;bigly&quot;, &quot;bigos&quot;, &quot;bijou&quot;, &quot;biked&quot;, &quot;biker&quot;, &quot;bikes&quot;, &quot;bikie&quot;, &quot;bilbo&quot;, &quot;bilby&quot;, &quot;biled&quot;, &quot;biles&quot;, &quot;bilgy&quot;, &quot;bilks&quot;, &quot;bills&quot;, &quot;bimah&quot;, &quot;bimas&quot;, &quot;bimbo&quot;, &quot;binal&quot;, &quot;bindi&quot;, &quot;binds&quot;, &quot;biner&quot;, &quot;bines&quot;, &quot;bings&quot;, &quot;bingy&quot;, &quot;binit&quot;, &quot;binks&quot;, &quot;bints&quot;, &quot;biogs&quot;, &quot;biont&quot;, &quot;biota&quot;, &quot;biped&quot;, &quot;bipod&quot;, &quot;birds&quot;, &quot;birks&quot;, &quot;birle&quot;, &quot;birls&quot;, &quot;biros&quot;, &quot;birrs&quot;, &quot;birse&quot;, &quot;birsy&quot;, &quot;bises&quot;, &quot;bisks&quot;, &quot;bisom&quot;, &quot;biter&quot;, &quot;bites&quot;, &quot;bitos&quot;, &quot;bitou&quot;, &quot;bitsy&quot;, &quot;bitte&quot;, &quot;bitts&quot;, &quot;bivia&quot;, &quot;bivvy&quot;, &quot;bizes&quot;, &quot;bizzo&quot;, &quot;bizzy&quot;, &quot;blabs&quot;, &quot;blads&quot;, &quot;blady&quot;, &quot;blaer&quot;, &quot;blaes&quot;, &quot;blaff&quot;, &quot;blags&quot;, &quot;blahs&quot;, &quot;blain&quot;, &quot;blams&quot;, &quot;blart&quot;, &quot;blase&quot;, &quot;blash&quot;, &quot;blate&quot;, &quot;blats&quot;, &quot;blatt&quot;, &quot;blaud&quot;, &quot;blawn&quot;, &quot;blaws&quot;, &quot;blays&quot;, &quot;blear&quot;, &quot;blebs&quot;, &quot;blech&quot;, &quot;blees&quot;, &quot;blent&quot;, &quot;blert&quot;, &quot;blest&quot;, &quot;blets&quot;, &quot;bleys&quot;, &quot;blimy&quot;, &quot;bling&quot;, &quot;blini&quot;, &quot;blins&quot;, &quot;bliny&quot;, &quot;blips&quot;, &quot;blist&quot;, &quot;blite&quot;, &quot;blits&quot;, &quot;blive&quot;, &quot;blobs&quot;, &quot;blocs&quot;, &quot;blogs&quot;, &quot;blook&quot;, &quot;bloop&quot;, &quot;blore&quot;, &quot;blots&quot;, &quot;blows&quot;, &quot;blowy&quot;, &quot;blubs&quot;, &quot;blude&quot;, &quot;bluds&quot;, &quot;bludy&quot;, &quot;blued&quot;, &quot;blues&quot;, &quot;bluet&quot;, &quot;bluey&quot;, &quot;bluid&quot;, &quot;blume&quot;, &quot;blunk&quot;, &quot;blurs&quot;, &quot;blype&quot;, &quot;boabs&quot;, &quot;boaks&quot;, &quot;boars&quot;, &quot;boart&quot;, &quot;boats&quot;, &quot;bobac&quot;, &quot;bobak&quot;, &quot;bobas&quot;, &quot;bobol&quot;, &quot;bobos&quot;, &quot;bocca&quot;, &quot;bocce&quot;, &quot;bocci&quot;, &quot;boche&quot;, &quot;bocks&quot;, &quot;boded&quot;, &quot;bodes&quot;, &quot;bodge&quot;, &quot;bodhi&quot;, &quot;bodle&quot;, &quot;boeps&quot;, &quot;boets&quot;, &quot;boeuf&quot;, &quot;boffo&quot;, &quot;boffs&quot;, &quot;bogan&quot;, &quot;bogey&quot;, &quot;boggy&quot;, &quot;bogie&quot;, &quot;bogle&quot;, &quot;bogue&quot;, &quot;bogus&quot;, &quot;bohea&quot;, &quot;bohos&quot;, &quot;boils&quot;, &quot;boing&quot;, &quot;boink&quot;, &quot;boite&quot;, &quot;boked&quot;, &quot;bokeh&quot;, &quot;bokes&quot;, &quot;bokos&quot;, &quot;bolar&quot;, &quot;bolas&quot;, &quot;bolds&quot;, &quot;boles&quot;, &quot;bolix&quot;, &quot;bolls&quot;, &quot;bolos&quot;, &quot;bolts&quot;, &quot;bolus&quot;, &quot;bomas&quot;, &quot;bombe&quot;, &quot;bombo&quot;, &quot;bombs&quot;, &quot;bonce&quot;, &quot;bonds&quot;, &quot;boned&quot;, &quot;boner&quot;, &quot;bones&quot;, &quot;bongs&quot;, &quot;bonie&quot;, &quot;bonks&quot;, &quot;bonne&quot;, &quot;bonny&quot;, &quot;bonza&quot;, &quot;bonze&quot;, &quot;booai&quot;, &quot;booay&quot;, &quot;boobs&quot;, &quot;boody&quot;, &quot;booed&quot;, &quot;boofy&quot;, &quot;boogy&quot;, &quot;boohs&quot;, &quot;books&quot;, &quot;booky&quot;, &quot;bools&quot;, &quot;booms&quot;, &quot;boomy&quot;, &quot;boong&quot;, &quot;boons&quot;, &quot;boord&quot;, &quot;boors&quot;, &quot;boose&quot;, &quot;boots&quot;, &quot;boppy&quot;, &quot;borak&quot;, &quot;boral&quot;, &quot;boras&quot;, &quot;borde&quot;, &quot;bords&quot;, &quot;bored&quot;, &quot;boree&quot;, &quot;borel&quot;, &quot;borer&quot;, &quot;bores&quot;, &quot;borgo&quot;, &quot;boric&quot;, &quot;borks&quot;, &quot;borms&quot;, &quot;borna&quot;, &quot;boron&quot;, &quot;borts&quot;, &quot;borty&quot;, &quot;bortz&quot;, &quot;bosie&quot;, &quot;bosks&quot;, &quot;bosky&quot;, &quot;boson&quot;, &quot;bosun&quot;, &quot;botas&quot;, &quot;botel&quot;, &quot;botes&quot;, &quot;bothy&quot;, &quot;botte&quot;, &quot;botts&quot;, &quot;botty&quot;, &quot;bouge&quot;, &quot;bouks&quot;, &quot;boult&quot;, &quot;bouns&quot;, &quot;bourd&quot;, &quot;bourg&quot;, &quot;bourn&quot;, &quot;bouse&quot;, &quot;bousy&quot;, &quot;bouts&quot;, &quot;bovid&quot;, &quot;bowat&quot;, &quot;bowed&quot;, &quot;bower&quot;, &quot;bowes&quot;, &quot;bowet&quot;, &quot;bowie&quot;, &quot;bowls&quot;, &quot;bowne&quot;, &quot;bowrs&quot;, &quot;bowse&quot;, &quot;boxed&quot;, &quot;boxen&quot;, &quot;boxes&quot;, &quot;boxla&quot;, &quot;boxty&quot;, &quot;boyar&quot;, &quot;boyau&quot;, &quot;boyed&quot;, &quot;boyfs&quot;, &quot;boygs&quot;, &quot;boyla&quot;, &quot;boyos&quot;, &quot;boysy&quot;, &quot;bozos&quot;, &quot;braai&quot;, &quot;brach&quot;, &quot;brack&quot;, &quot;bract&quot;, &quot;brads&quot;, &quot;braes&quot;, &quot;brags&quot;, &quot;brail&quot;, &quot;braks&quot;, &quot;braky&quot;, &quot;brame&quot;, &quot;brane&quot;, &quot;brank&quot;, &quot;brans&quot;, &quot;brant&quot;, &quot;brast&quot;, &quot;brats&quot;, &quot;brava&quot;, &quot;bravi&quot;, &quot;braws&quot;, &quot;braxy&quot;, &quot;brays&quot;, &quot;braza&quot;, &quot;braze&quot;, &quot;bream&quot;, &quot;brede&quot;, &quot;breds&quot;, &quot;breem&quot;, &quot;breer&quot;, &quot;brees&quot;, &quot;breid&quot;, &quot;breis&quot;, &quot;breme&quot;, &quot;brens&quot;, &quot;brent&quot;, &quot;brere&quot;, &quot;brers&quot;, &quot;breve&quot;, &quot;brews&quot;, &quot;breys&quot;, &quot;brier&quot;, &quot;bries&quot;, &quot;brigs&quot;, &quot;briki&quot;, &quot;briks&quot;, &quot;brill&quot;, &quot;brims&quot;, &quot;brins&quot;, &quot;brios&quot;, &quot;brise&quot;, &quot;briss&quot;, &quot;brith&quot;, &quot;brits&quot;, &quot;britt&quot;, &quot;brize&quot;, &quot;broch&quot;, &quot;brock&quot;, &quot;brods&quot;, &quot;brogh&quot;, &quot;brogs&quot;, &quot;brome&quot;, &quot;bromo&quot;, &quot;bronc&quot;, &quot;brond&quot;, &quot;brool&quot;, &quot;broos&quot;, &quot;brose&quot;, &quot;brosy&quot;, &quot;brows&quot;, &quot;brugh&quot;, &quot;bruin&quot;, &quot;bruit&quot;, &quot;brule&quot;, &quot;brume&quot;, &quot;brung&quot;, &quot;brusk&quot;, &quot;brust&quot;, &quot;bruts&quot;, &quot;buats&quot;, &quot;buaze&quot;, &quot;bubal&quot;, &quot;bubas&quot;, &quot;bubba&quot;, &quot;bubbe&quot;, &quot;bubby&quot;, &quot;bubus&quot;, &quot;buchu&quot;, &quot;bucko&quot;, &quot;bucks&quot;, &quot;bucku&quot;, &quot;budas&quot;, &quot;budis&quot;, &quot;budos&quot;, &quot;buffa&quot;, &quot;buffe&quot;, &quot;buffi&quot;, &quot;buffo&quot;, &quot;buffs&quot;, &quot;buffy&quot;, &quot;bufos&quot;, &quot;bufty&quot;, &quot;buhls&quot;, &quot;buhrs&quot;, &quot;buiks&quot;, &quot;buist&quot;, &quot;bukes&quot;, &quot;bulbs&quot;, &quot;bulgy&quot;, &quot;bulks&quot;, &quot;bulla&quot;, &quot;bulls&quot;, &quot;bulse&quot;, &quot;bumbo&quot;, &quot;bumfs&quot;, &quot;bumph&quot;, &quot;bumps&quot;, &quot;bumpy&quot;, &quot;bunas&quot;, &quot;bunce&quot;, &quot;bunco&quot;, &quot;bunde&quot;, &quot;bundh&quot;, &quot;bunds&quot;, &quot;bundt&quot;, &quot;bundu&quot;, &quot;bundy&quot;, &quot;bungs&quot;, &quot;bungy&quot;, &quot;bunia&quot;, &quot;bunje&quot;, &quot;bunjy&quot;, &quot;bunko&quot;, &quot;bunks&quot;, &quot;bunns&quot;, &quot;bunts&quot;, &quot;bunty&quot;, &quot;bunya&quot;, &quot;buoys&quot;, &quot;buppy&quot;, &quot;buran&quot;, &quot;buras&quot;, &quot;burbs&quot;, &quot;burds&quot;, &quot;buret&quot;, &quot;burfi&quot;, &quot;burgh&quot;, &quot;burgs&quot;, &quot;burin&quot;, &quot;burka&quot;, &quot;burke&quot;, &quot;burks&quot;, &quot;burls&quot;, &quot;burns&quot;, &quot;buroo&quot;, &quot;burps&quot;, &quot;burqa&quot;, &quot;burro&quot;, &quot;burrs&quot;, &quot;burry&quot;, &quot;bursa&quot;, &quot;burse&quot;, &quot;busby&quot;, &quot;buses&quot;, &quot;busks&quot;, &quot;busky&quot;, &quot;bussu&quot;, &quot;busti&quot;, &quot;busts&quot;, &quot;busty&quot;, &quot;buteo&quot;, &quot;butes&quot;, &quot;butle&quot;, &quot;butoh&quot;, &quot;butts&quot;, &quot;butty&quot;, &quot;butut&quot;, &quot;butyl&quot;, &quot;buzzy&quot;, &quot;bwana&quot;, &quot;bwazi&quot;, &quot;byded&quot;, &quot;bydes&quot;, &quot;byked&quot;, &quot;bykes&quot;, &quot;byres&quot;, &quot;byrls&quot;, &quot;byssi&quot;, &quot;bytes&quot;, &quot;byway&quot;, &quot;caaed&quot;, &quot;cabas&quot;, &quot;caber&quot;, &quot;cabob&quot;, &quot;caboc&quot;, &quot;cabre&quot;, &quot;cacas&quot;, &quot;cacks&quot;, &quot;cacky&quot;, &quot;cadee&quot;, &quot;cades&quot;, &quot;cadge&quot;, &quot;cadgy&quot;, &quot;cadie&quot;, &quot;cadis&quot;, &quot;cadre&quot;, &quot;caeca&quot;, &quot;caese&quot;, &quot;cafes&quot;, &quot;caffs&quot;, &quot;caged&quot;, &quot;cager&quot;, &quot;cages&quot;, &quot;cagot&quot;, &quot;cahow&quot;, &quot;caids&quot;, &quot;cains&quot;, &quot;caird&quot;, &quot;cajon&quot;, &quot;cajun&quot;, &quot;caked&quot;, &quot;cakes&quot;, &quot;cakey&quot;, &quot;calfs&quot;, &quot;calid&quot;, &quot;calif&quot;, &quot;calix&quot;, &quot;calks&quot;, &quot;calla&quot;, &quot;calls&quot;, &quot;calms&quot;, &quot;calmy&quot;, &quot;calos&quot;, &quot;calpa&quot;, &quot;calps&quot;, &quot;calve&quot;, &quot;calyx&quot;, &quot;caman&quot;, &quot;camas&quot;, &quot;cames&quot;, &quot;camis&quot;, &quot;camos&quot;, &quot;campi&quot;, &quot;campo&quot;, &quot;camps&quot;, &quot;campy&quot;, &quot;camus&quot;, &quot;caned&quot;, &quot;caneh&quot;, &quot;caner&quot;, &quot;canes&quot;, &quot;cangs&quot;, &quot;canid&quot;, &quot;canna&quot;, &quot;canns&quot;, &quot;canso&quot;, &quot;canst&quot;, &quot;canto&quot;, &quot;cants&quot;, &quot;canty&quot;, &quot;capas&quot;, &quot;caped&quot;, &quot;capes&quot;, &quot;capex&quot;, &quot;caphs&quot;, &quot;capiz&quot;, &quot;caple&quot;, &quot;capon&quot;, &quot;capos&quot;, &quot;capot&quot;, &quot;capri&quot;, &quot;capul&quot;, &quot;carap&quot;, &quot;carbo&quot;, &quot;carbs&quot;, &quot;carby&quot;, &quot;cardi&quot;, &quot;cards&quot;, &quot;cardy&quot;, &quot;cared&quot;, &quot;carer&quot;, &quot;cares&quot;, &quot;caret&quot;, &quot;carex&quot;, &quot;carks&quot;, &quot;carle&quot;, &quot;carls&quot;, &quot;carns&quot;, &quot;carny&quot;, &quot;carob&quot;, &quot;carom&quot;, &quot;caron&quot;, &quot;carpi&quot;, &quot;carps&quot;, &quot;carrs&quot;, &quot;carse&quot;, &quot;carta&quot;, &quot;carte&quot;, &quot;carts&quot;, &quot;carvy&quot;, &quot;casas&quot;, &quot;casco&quot;, &quot;cased&quot;, &quot;cases&quot;, &quot;casks&quot;, &quot;casky&quot;, &quot;casts&quot;, &quot;casus&quot;, &quot;cates&quot;, &quot;cauda&quot;, &quot;cauks&quot;, &quot;cauld&quot;, &quot;cauls&quot;, &quot;caums&quot;, &quot;caups&quot;, &quot;cauri&quot;, &quot;causa&quot;, &quot;cavas&quot;, &quot;caved&quot;, &quot;cavel&quot;, &quot;caver&quot;, &quot;caves&quot;, &quot;cavie&quot;, &quot;cawed&quot;, &quot;cawks&quot;, &quot;caxon&quot;, &quot;ceaze&quot;, &quot;cebid&quot;, &quot;cecal&quot;, &quot;cecum&quot;, &quot;ceded&quot;, &quot;ceder&quot;, &quot;cedes&quot;, &quot;cedis&quot;, &quot;ceiba&quot;, &quot;ceili&quot;, &quot;ceils&quot;, &quot;celeb&quot;, &quot;cella&quot;, &quot;celli&quot;, &quot;cells&quot;, &quot;celom&quot;, &quot;celts&quot;, &quot;cense&quot;, &quot;cento&quot;, &quot;cents&quot;, &quot;centu&quot;, &quot;ceorl&quot;, &quot;cepes&quot;, &quot;cerci&quot;, &quot;cered&quot;, &quot;ceres&quot;, &quot;cerge&quot;, &quot;ceria&quot;, &quot;ceric&quot;, &quot;cerne&quot;, &quot;ceroc&quot;, &quot;ceros&quot;, &quot;certs&quot;, &quot;certy&quot;, &quot;cesse&quot;, &quot;cesta&quot;, &quot;cesti&quot;, &quot;cetes&quot;, &quot;cetyl&quot;, &quot;cezve&quot;, &quot;chace&quot;, &quot;chack&quot;, &quot;chaco&quot;, &quot;chado&quot;, &quot;chads&quot;, &quot;chaft&quot;, &quot;chais&quot;, &quot;chals&quot;, &quot;chams&quot;, &quot;chana&quot;, &quot;chang&quot;, &quot;chank&quot;, &quot;chape&quot;, &quot;chaps&quot;, &quot;chapt&quot;, &quot;chara&quot;, &quot;chare&quot;, &quot;chark&quot;, &quot;charr&quot;, &quot;chars&quot;, &quot;chary&quot;, &quot;chats&quot;, &quot;chave&quot;, &quot;chavs&quot;, &quot;chawk&quot;, &quot;chaws&quot;, &quot;chaya&quot;, &quot;chays&quot;, &quot;cheep&quot;, &quot;chefs&quot;, &quot;cheka&quot;, &quot;chela&quot;, &quot;chelp&quot;, &quot;chemo&quot;, &quot;chems&quot;, &quot;chere&quot;, &quot;chert&quot;, &quot;cheth&quot;, &quot;chevy&quot;, &quot;chews&quot;, &quot;chewy&quot;, &quot;chiao&quot;, &quot;chias&quot;, &quot;chibs&quot;, &quot;chica&quot;, &quot;chich&quot;, &quot;chico&quot;, &quot;chics&quot;, &quot;chiel&quot;, &quot;chiks&quot;, &quot;chile&quot;, &quot;chimb&quot;, &quot;chimo&quot;, &quot;chimp&quot;, &quot;chine&quot;, &quot;ching&quot;, &quot;chino&quot;, &quot;chins&quot;, &quot;chips&quot;, &quot;chirk&quot;, &quot;chirl&quot;, &quot;chirm&quot;, &quot;chiro&quot;, &quot;chirr&quot;, &quot;chirt&quot;, &quot;chiru&quot;, &quot;chits&quot;, &quot;chive&quot;, &quot;chivs&quot;, &quot;chivy&quot;, &quot;chizz&quot;, &quot;choco&quot;, &quot;chocs&quot;, &quot;chode&quot;, &quot;chogs&quot;, &quot;choil&quot;, &quot;choko&quot;, &quot;choky&quot;, &quot;chola&quot;, &quot;choli&quot;, &quot;cholo&quot;, &quot;chomp&quot;, &quot;chons&quot;, &quot;choof&quot;, &quot;chook&quot;, &quot;choom&quot;, &quot;choon&quot;, &quot;chops&quot;, &quot;chota&quot;, &quot;chott&quot;, &quot;chout&quot;, &quot;choux&quot;, &quot;chowk&quot;, &quot;chows&quot;, &quot;chubs&quot;, &quot;chufa&quot;, &quot;chuff&quot;, &quot;chugs&quot;, &quot;chums&quot;, &quot;churl&quot;, &quot;churr&quot;, &quot;chuse&quot;, &quot;chuts&quot;, &quot;chyle&quot;, &quot;chyme&quot;, &quot;chynd&quot;, &quot;cibol&quot;, &quot;cided&quot;, &quot;cides&quot;, &quot;ciels&quot;, &quot;ciggy&quot;, &quot;cilia&quot;, &quot;cills&quot;, &quot;cimar&quot;, &quot;cimex&quot;, &quot;cinct&quot;, &quot;cines&quot;, &quot;cinqs&quot;, &quot;cions&quot;, &quot;cippi&quot;, &quot;circs&quot;, &quot;cires&quot;, &quot;cirls&quot;, &quot;cirri&quot;, &quot;cisco&quot;, &quot;cissy&quot;, &quot;cists&quot;, &quot;cital&quot;, &quot;cited&quot;, &quot;citer&quot;, &quot;cites&quot;, &quot;cives&quot;, &quot;civet&quot;, &quot;civie&quot;, &quot;civvy&quot;, &quot;clach&quot;, &quot;clade&quot;, &quot;clads&quot;, &quot;claes&quot;, &quot;clags&quot;, &quot;clame&quot;, &quot;clams&quot;, &quot;clans&quot;, &quot;claps&quot;, &quot;clapt&quot;, &quot;claro&quot;, &quot;clart&quot;, &quot;clary&quot;, &quot;clast&quot;, &quot;clats&quot;, &quot;claut&quot;, &quot;clave&quot;, &quot;clavi&quot;, &quot;claws&quot;, &quot;clays&quot;, &quot;cleck&quot;, &quot;cleek&quot;, &quot;cleep&quot;, &quot;clefs&quot;, &quot;clegs&quot;, &quot;cleik&quot;, &quot;clems&quot;, &quot;clepe&quot;, &quot;clept&quot;, &quot;cleve&quot;, &quot;clews&quot;, &quot;clied&quot;, &quot;clies&quot;, &quot;clift&quot;, &quot;clime&quot;, &quot;cline&quot;, &quot;clint&quot;, &quot;clipe&quot;, &quot;clips&quot;, &quot;clipt&quot;, &quot;clits&quot;, &quot;cloam&quot;, &quot;clods&quot;, &quot;cloff&quot;, &quot;clogs&quot;, &quot;cloke&quot;, &quot;clomb&quot;, &quot;clomp&quot;, &quot;clonk&quot;, &quot;clons&quot;, &quot;cloop&quot;, &quot;cloot&quot;, &quot;clops&quot;, &quot;clote&quot;, &quot;clots&quot;, &quot;clour&quot;, &quot;clous&quot;, &quot;clows&quot;, &quot;cloye&quot;, &quot;cloys&quot;, &quot;cloze&quot;, &quot;clubs&quot;, &quot;clues&quot;, &quot;cluey&quot;, &quot;clunk&quot;, &quot;clype&quot;, &quot;cnida&quot;, &quot;coact&quot;, &quot;coady&quot;, &quot;coala&quot;, &quot;coals&quot;, &quot;coaly&quot;, &quot;coapt&quot;, &quot;coarb&quot;, &quot;coate&quot;, &quot;coati&quot;, &quot;coats&quot;, &quot;cobbs&quot;, &quot;cobby&quot;, &quot;cobia&quot;, &quot;coble&quot;, &quot;cobza&quot;, &quot;cocas&quot;, &quot;cocci&quot;, &quot;cocco&quot;, &quot;cocks&quot;, &quot;cocky&quot;, &quot;cocos&quot;, &quot;codas&quot;, &quot;codec&quot;, &quot;coded&quot;, &quot;coden&quot;, &quot;coder&quot;, &quot;codes&quot;, &quot;codex&quot;, &quot;codon&quot;, &quot;coeds&quot;, &quot;coffs&quot;, &quot;cogie&quot;, &quot;cogon&quot;, &quot;cogue&quot;, &quot;cohab&quot;, &quot;cohen&quot;, &quot;cohoe&quot;, &quot;cohog&quot;, &quot;cohos&quot;, &quot;coifs&quot;, &quot;coign&quot;, &quot;coils&quot;, &quot;coins&quot;, &quot;coirs&quot;, &quot;coits&quot;, &quot;coked&quot;, &quot;cokes&quot;, &quot;colas&quot;, &quot;colby&quot;, &quot;colds&quot;, &quot;coled&quot;, &quot;coles&quot;, &quot;coley&quot;, &quot;colic&quot;, &quot;colin&quot;, &quot;colls&quot;, &quot;colly&quot;, &quot;colog&quot;, &quot;colts&quot;, &quot;colza&quot;, &quot;comae&quot;, &quot;comal&quot;, &quot;comas&quot;, &quot;combe&quot;, &quot;combi&quot;, &quot;combo&quot;, &quot;combs&quot;, &quot;comby&quot;, &quot;comer&quot;, &quot;comes&quot;, &quot;comix&quot;, &quot;commo&quot;, &quot;comms&quot;, &quot;commy&quot;, &quot;compo&quot;, &quot;comps&quot;, &quot;compt&quot;, &quot;comte&quot;, &quot;comus&quot;, &quot;coned&quot;, &quot;cones&quot;, &quot;coney&quot;, &quot;confs&quot;, &quot;conga&quot;, &quot;conge&quot;, &quot;congo&quot;, &quot;conia&quot;, &quot;conin&quot;, &quot;conks&quot;, &quot;conky&quot;, &quot;conne&quot;, &quot;conns&quot;, &quot;conte&quot;, &quot;conto&quot;, &quot;conus&quot;, &quot;convo&quot;, &quot;cooch&quot;, &quot;cooed&quot;, &quot;cooee&quot;, &quot;cooer&quot;, &quot;cooey&quot;, &quot;coofs&quot;, &quot;cooks&quot;, &quot;cooky&quot;, &quot;cools&quot;, &quot;cooly&quot;, &quot;coomb&quot;, &quot;cooms&quot;, &quot;coomy&quot;, &quot;coops&quot;, &quot;coopt&quot;, &quot;coost&quot;, &quot;coots&quot;, &quot;cooze&quot;, &quot;copal&quot;, &quot;copay&quot;, &quot;coped&quot;, &quot;copen&quot;, &quot;coper&quot;, &quot;copes&quot;, &quot;coppy&quot;, &quot;copra&quot;, &quot;copsy&quot;, &quot;coqui&quot;, &quot;coram&quot;, &quot;corbe&quot;, &quot;corby&quot;, &quot;cords&quot;, &quot;cored&quot;, &quot;cores&quot;, &quot;corey&quot;, &quot;corgi&quot;, &quot;coria&quot;, &quot;corks&quot;, &quot;corky&quot;, &quot;corms&quot;, &quot;corni&quot;, &quot;corno&quot;, &quot;corns&quot;, &quot;cornu&quot;, &quot;corps&quot;, &quot;corse&quot;, &quot;corso&quot;, &quot;cosec&quot;, &quot;cosed&quot;, &quot;coses&quot;, &quot;coset&quot;, &quot;cosey&quot;, &quot;cosie&quot;, &quot;costa&quot;, &quot;coste&quot;, &quot;costs&quot;, &quot;cotan&quot;, &quot;coted&quot;, &quot;cotes&quot;, &quot;coths&quot;, &quot;cotta&quot;, &quot;cotts&quot;, &quot;coude&quot;, &quot;coups&quot;, &quot;courb&quot;, &quot;courd&quot;, &quot;coure&quot;, &quot;cours&quot;, &quot;couta&quot;, &quot;couth&quot;, &quot;coved&quot;, &quot;coves&quot;, &quot;covin&quot;, &quot;cowal&quot;, &quot;cowan&quot;, &quot;cowed&quot;, &quot;cowks&quot;, &quot;cowls&quot;, &quot;cowps&quot;, &quot;cowry&quot;, &quot;coxae&quot;, &quot;coxal&quot;, &quot;coxed&quot;, &quot;coxes&quot;, &quot;coxib&quot;, &quot;coyau&quot;, &quot;coyed&quot;, &quot;coyer&quot;, &quot;coypu&quot;, &quot;cozed&quot;, &quot;cozen&quot;, &quot;cozes&quot;, &quot;cozey&quot;, &quot;cozie&quot;, &quot;craal&quot;, &quot;crabs&quot;, &quot;crags&quot;, &quot;craic&quot;, &quot;craig&quot;, &quot;crake&quot;, &quot;crame&quot;, &quot;crams&quot;, &quot;crans&quot;, &quot;crape&quot;, &quot;craps&quot;, &quot;crapy&quot;, &quot;crare&quot;, &quot;craws&quot;, &quot;crays&quot;, &quot;creds&quot;, &quot;creel&quot;, &quot;crees&quot;, &quot;crems&quot;, &quot;crena&quot;, &quot;creps&quot;, &quot;crepy&quot;, &quot;crewe&quot;, &quot;crews&quot;, &quot;crias&quot;, &quot;cribs&quot;, &quot;cries&quot;, &quot;crims&quot;, &quot;crine&quot;, &quot;crios&quot;, &quot;cripe&quot;, &quot;crips&quot;, &quot;crise&quot;, &quot;crith&quot;, &quot;crits&quot;, &quot;croci&quot;, &quot;crocs&quot;, &quot;croft&quot;, &quot;crogs&quot;, &quot;cromb&quot;, &quot;crome&quot;, &quot;cronk&quot;, &quot;crons&quot;, &quot;crool&quot;, &quot;croon&quot;, &quot;crops&quot;, &quot;crore&quot;, &quot;crost&quot;, &quot;crout&quot;, &quot;crows&quot;, &quot;croze&quot;, &quot;cruck&quot;, &quot;crudo&quot;, &quot;cruds&quot;, &quot;crudy&quot;, &quot;crues&quot;, &quot;cruet&quot;, &quot;cruft&quot;, &quot;crunk&quot;, &quot;cruor&quot;, &quot;crura&quot;, &quot;cruse&quot;, &quot;crusy&quot;, &quot;cruve&quot;, &quot;crwth&quot;, &quot;cryer&quot;, &quot;ctene&quot;, &quot;cubby&quot;, &quot;cubeb&quot;, &quot;cubed&quot;, &quot;cuber&quot;, &quot;cubes&quot;, &quot;cubit&quot;, &quot;cuddy&quot;, &quot;cuffo&quot;, &quot;cuffs&quot;, &quot;cuifs&quot;, &quot;cuing&quot;, &quot;cuish&quot;, &quot;cuits&quot;, &quot;cukes&quot;, &quot;culch&quot;, &quot;culet&quot;, &quot;culex&quot;, &quot;culls&quot;, &quot;cully&quot;, &quot;culms&quot;, &quot;culpa&quot;, &quot;culti&quot;, &quot;cults&quot;, &quot;culty&quot;, &quot;cumec&quot;, &quot;cundy&quot;, &quot;cunei&quot;, &quot;cunit&quot;, &quot;cunts&quot;, &quot;cupel&quot;, &quot;cupid&quot;, &quot;cuppa&quot;, &quot;cuppy&quot;, &quot;curat&quot;, &quot;curbs&quot;, &quot;curch&quot;, &quot;curds&quot;, &quot;curdy&quot;, &quot;cured&quot;, &quot;curer&quot;, &quot;cures&quot;, &quot;curet&quot;, &quot;curfs&quot;, &quot;curia&quot;, &quot;curie&quot;, &quot;curli&quot;, &quot;curls&quot;, &quot;curns&quot;, &quot;curny&quot;, &quot;currs&quot;, &quot;cursi&quot;, &quot;curst&quot;, &quot;cusec&quot;, &quot;cushy&quot;, &quot;cusks&quot;, &quot;cusps&quot;, &quot;cuspy&quot;, &quot;cusso&quot;, &quot;cusum&quot;, &quot;cutch&quot;, &quot;cuter&quot;, &quot;cutes&quot;, &quot;cutey&quot;, &quot;cutin&quot;, &quot;cutis&quot;, &quot;cutto&quot;, &quot;cutty&quot;, &quot;cutup&quot;, &quot;cuvee&quot;, &quot;cuzes&quot;, &quot;cwtch&quot;, &quot;cyano&quot;, &quot;cyans&quot;, &quot;cycad&quot;, &quot;cycas&quot;, &quot;cyclo&quot;, &quot;cyder&quot;, &quot;cylix&quot;, &quot;cymae&quot;, &quot;cymar&quot;, &quot;cymas&quot;, &quot;cymes&quot;, &quot;cymol&quot;, &quot;cysts&quot;, &quot;cytes&quot;, &quot;cyton&quot;, &quot;czars&quot;, &quot;daals&quot;, &quot;dabba&quot;, &quot;daces&quot;, &quot;dacha&quot;, &quot;dacks&quot;, &quot;dadah&quot;, &quot;dadas&quot;, &quot;dados&quot;, &quot;daffs&quot;, &quot;daffy&quot;, &quot;dagga&quot;, &quot;daggy&quot;, &quot;dagos&quot;, &quot;dahls&quot;, &quot;daiko&quot;, &quot;daine&quot;, &quot;daint&quot;, &quot;daker&quot;, &quot;daled&quot;, &quot;dales&quot;, &quot;dalis&quot;, &quot;dalle&quot;, &quot;dalts&quot;, &quot;daman&quot;, &quot;damar&quot;, &quot;dames&quot;, &quot;damme&quot;, &quot;damns&quot;, &quot;damps&quot;, &quot;dampy&quot;, &quot;dancy&quot;, &quot;dangs&quot;, &quot;danio&quot;, &quot;danks&quot;, &quot;danny&quot;, &quot;dants&quot;, &quot;daraf&quot;, &quot;darbs&quot;, &quot;darcy&quot;, &quot;dared&quot;, &quot;darer&quot;, &quot;dares&quot;, &quot;darga&quot;, &quot;dargs&quot;, &quot;daric&quot;, &quot;daris&quot;, &quot;darks&quot;, &quot;darns&quot;, &quot;darre&quot;, &quot;darts&quot;, &quot;darzi&quot;, &quot;dashi&quot;, &quot;dashy&quot;, &quot;datal&quot;, &quot;dated&quot;, &quot;dater&quot;, &quot;dates&quot;, &quot;datos&quot;, &quot;datto&quot;, &quot;daube&quot;, &quot;daubs&quot;, &quot;dauby&quot;, &quot;dauds&quot;, &quot;dault&quot;, &quot;daurs&quot;, &quot;dauts&quot;, &quot;daven&quot;, &quot;davit&quot;, &quot;dawah&quot;, &quot;dawds&quot;, &quot;dawed&quot;, &quot;dawen&quot;, &quot;dawks&quot;, &quot;dawns&quot;, &quot;dawts&quot;, &quot;dayan&quot;, &quot;daych&quot;, &quot;daynt&quot;, &quot;dazed&quot;, &quot;dazer&quot;, &quot;dazes&quot;, &quot;deads&quot;, &quot;deair&quot;, &quot;deals&quot;, &quot;deans&quot;, &quot;deare&quot;, &quot;dearn&quot;, &quot;dears&quot;, &quot;deary&quot;, &quot;deash&quot;, &quot;deave&quot;, &quot;deaws&quot;, &quot;deawy&quot;, &quot;debag&quot;, &quot;debby&quot;, &quot;debel&quot;, &quot;debes&quot;, &quot;debts&quot;, &quot;debud&quot;, &quot;debur&quot;, &quot;debus&quot;, &quot;debye&quot;, &quot;decad&quot;, &quot;decaf&quot;, &quot;decan&quot;, &quot;decko&quot;, &quot;decks&quot;, &quot;decos&quot;, &quot;dedal&quot;, &quot;deeds&quot;, &quot;deedy&quot;, &quot;deely&quot;, &quot;deems&quot;, &quot;deens&quot;, &quot;deeps&quot;, &quot;deere&quot;, &quot;deers&quot;, &quot;deets&quot;, &quot;deeve&quot;, &quot;deevs&quot;, &quot;defat&quot;, &quot;deffo&quot;, &quot;defis&quot;, &quot;defog&quot;, &quot;degas&quot;, &quot;degum&quot;, &quot;degus&quot;, &quot;deice&quot;, &quot;deids&quot;, &quot;deify&quot;, &quot;deils&quot;, &quot;deism&quot;, &quot;deist&quot;, &quot;deked&quot;, &quot;dekes&quot;, &quot;dekko&quot;, &quot;deled&quot;, &quot;deles&quot;, &quot;delfs&quot;, &quot;delft&quot;, &quot;delis&quot;, &quot;dells&quot;, &quot;delly&quot;, &quot;delos&quot;, &quot;delph&quot;, &quot;delts&quot;, &quot;deman&quot;, &quot;demes&quot;, &quot;demic&quot;, &quot;demit&quot;, &quot;demob&quot;, &quot;demoi&quot;, &quot;demos&quot;, &quot;dempt&quot;, &quot;denar&quot;, &quot;denay&quot;, &quot;dench&quot;, &quot;denes&quot;, &quot;denet&quot;, &quot;denis&quot;, &quot;dents&quot;, &quot;deoxy&quot;, &quot;derat&quot;, &quot;deray&quot;, &quot;dered&quot;, &quot;deres&quot;, &quot;derig&quot;, &quot;derma&quot;, &quot;derms&quot;, &quot;derns&quot;, &quot;derny&quot;, &quot;deros&quot;, &quot;derro&quot;, &quot;derry&quot;, &quot;derth&quot;, &quot;dervs&quot;, &quot;desex&quot;, &quot;deshi&quot;, &quot;desis&quot;, &quot;desks&quot;, &quot;desse&quot;, &quot;devas&quot;, &quot;devel&quot;, &quot;devis&quot;, &quot;devon&quot;, &quot;devos&quot;, &quot;devot&quot;, &quot;dewan&quot;, &quot;dewar&quot;, &quot;dewax&quot;, &quot;dewed&quot;, &quot;dexes&quot;, &quot;dexie&quot;, &quot;dhaba&quot;, &quot;dhaks&quot;, &quot;dhals&quot;, &quot;dhikr&quot;, &quot;dhobi&quot;, &quot;dhole&quot;, &quot;dholl&quot;, &quot;dhols&quot;, &quot;dhoti&quot;, &quot;dhows&quot;, &quot;dhuti&quot;, &quot;diact&quot;, &quot;dials&quot;, &quot;diane&quot;, &quot;diazo&quot;, &quot;dibbs&quot;, &quot;diced&quot;, &quot;dicer&quot;, &quot;dices&quot;, &quot;dicht&quot;, &quot;dicks&quot;, &quot;dicky&quot;, &quot;dicot&quot;, &quot;dicta&quot;, &quot;dicts&quot;, &quot;dicty&quot;, &quot;diddy&quot;, &quot;didie&quot;, &quot;didos&quot;, &quot;didst&quot;, &quot;diebs&quot;, &quot;diels&quot;, &quot;diene&quot;, &quot;diets&quot;, &quot;diffs&quot;, &quot;dight&quot;, &quot;dikas&quot;, &quot;diked&quot;, &quot;diker&quot;, &quot;dikes&quot;, &quot;dikey&quot;, &quot;dildo&quot;, &quot;dilli&quot;, &quot;dills&quot;, &quot;dimbo&quot;, &quot;dimer&quot;, &quot;dimes&quot;, &quot;dimps&quot;, &quot;dinar&quot;, &quot;dined&quot;, &quot;dines&quot;, &quot;dinge&quot;, &quot;dings&quot;, &quot;dinic&quot;, &quot;dinks&quot;, &quot;dinky&quot;, &quot;dinna&quot;, &quot;dinos&quot;, &quot;dints&quot;, &quot;diols&quot;, &quot;diota&quot;, &quot;dippy&quot;, &quot;dipso&quot;, &quot;diram&quot;, &quot;direr&quot;, &quot;dirke&quot;, &quot;dirks&quot;, &quot;dirls&quot;, &quot;dirts&quot;, &quot;disas&quot;, &quot;disci&quot;, &quot;discs&quot;, &quot;dishy&quot;, &quot;disks&quot;, &quot;disme&quot;, &quot;dital&quot;, &quot;ditas&quot;, &quot;dited&quot;, &quot;dites&quot;, &quot;ditsy&quot;, &quot;ditts&quot;, &quot;ditzy&quot;, &quot;divan&quot;, &quot;divas&quot;, &quot;dived&quot;, &quot;dives&quot;, &quot;divis&quot;, &quot;divna&quot;, &quot;divos&quot;, &quot;divot&quot;, &quot;divvy&quot;, &quot;diwan&quot;, &quot;dixie&quot;, &quot;dixit&quot;, &quot;diyas&quot;, &quot;dizen&quot;, &quot;djinn&quot;, &quot;djins&quot;, &quot;doabs&quot;, &quot;doats&quot;, &quot;dobby&quot;, &quot;dobes&quot;, &quot;dobie&quot;, &quot;dobla&quot;, &quot;dobra&quot;, &quot;dobro&quot;, &quot;docht&quot;, &quot;docks&quot;, &quot;docos&quot;, &quot;docus&quot;, &quot;doddy&quot;, &quot;dodos&quot;, &quot;doeks&quot;, &quot;doers&quot;, &quot;doest&quot;, &quot;doeth&quot;, &quot;doffs&quot;, &quot;dogan&quot;, &quot;doges&quot;, &quot;dogey&quot;, &quot;doggo&quot;, &quot;doggy&quot;, &quot;dogie&quot;, &quot;dohyo&quot;, &quot;doilt&quot;, &quot;doily&quot;, &quot;doits&quot;, &quot;dojos&quot;, &quot;dolce&quot;, &quot;dolci&quot;, &quot;doled&quot;, &quot;doles&quot;, &quot;dolia&quot;, &quot;dolls&quot;, &quot;dolma&quot;, &quot;dolor&quot;, &quot;dolos&quot;, &quot;dolts&quot;, &quot;domal&quot;, &quot;domed&quot;, &quot;domes&quot;, &quot;domic&quot;, &quot;donah&quot;, &quot;donas&quot;, &quot;donee&quot;, &quot;doner&quot;, &quot;donga&quot;, &quot;dongs&quot;, &quot;donko&quot;, &quot;donna&quot;, &quot;donne&quot;, &quot;donny&quot;, &quot;donsy&quot;, &quot;doobs&quot;, &quot;dooce&quot;, &quot;doody&quot;, &quot;dooks&quot;, &quot;doole&quot;, &quot;dools&quot;, &quot;dooly&quot;, &quot;dooms&quot;, &quot;doomy&quot;, &quot;doona&quot;, &quot;doorn&quot;, &quot;doors&quot;, &quot;doozy&quot;, &quot;dopas&quot;, &quot;doped&quot;, &quot;doper&quot;, &quot;dopes&quot;, &quot;dorad&quot;, &quot;dorba&quot;, &quot;dorbs&quot;, &quot;doree&quot;, &quot;dores&quot;, &quot;doric&quot;, &quot;doris&quot;, &quot;dorks&quot;, &quot;dorky&quot;, &quot;dorms&quot;, &quot;dormy&quot;, &quot;dorps&quot;, &quot;dorrs&quot;, &quot;dorsa&quot;, &quot;dorse&quot;, &quot;dorts&quot;, &quot;dorty&quot;, &quot;dosai&quot;, &quot;dosas&quot;, &quot;dosed&quot;, &quot;doseh&quot;, &quot;doser&quot;, &quot;doses&quot;, &quot;dosha&quot;, &quot;dotal&quot;, &quot;doted&quot;, &quot;doter&quot;, &quot;dotes&quot;, &quot;dotty&quot;, &quot;douar&quot;, &quot;douce&quot;, &quot;doucs&quot;, &quot;douks&quot;, &quot;doula&quot;, &quot;douma&quot;, &quot;doums&quot;, &quot;doups&quot;, &quot;doura&quot;, &quot;douse&quot;, &quot;douts&quot;, &quot;doved&quot;, &quot;doven&quot;, &quot;dover&quot;, &quot;doves&quot;, &quot;dovie&quot;, &quot;dowar&quot;, &quot;dowds&quot;, &quot;dowed&quot;, &quot;dower&quot;, &quot;dowie&quot;, &quot;dowle&quot;, &quot;dowls&quot;, &quot;dowly&quot;, &quot;downa&quot;, &quot;downs&quot;, &quot;dowps&quot;, &quot;dowse&quot;, &quot;dowts&quot;, &quot;doxed&quot;, &quot;doxes&quot;, &quot;doxie&quot;, &quot;doyen&quot;, &quot;doyly&quot;, &quot;dozed&quot;, &quot;dozer&quot;, &quot;dozes&quot;, &quot;drabs&quot;, &quot;drack&quot;, &quot;draco&quot;, &quot;draff&quot;, &quot;drags&quot;, &quot;drail&quot;, &quot;drams&quot;, &quot;drant&quot;, &quot;draps&quot;, &quot;drats&quot;, &quot;drave&quot;, &quot;draws&quot;, &quot;drays&quot;, &quot;drear&quot;, &quot;dreck&quot;, &quot;dreed&quot;, &quot;dreer&quot;, &quot;drees&quot;, &quot;dregs&quot;, &quot;dreks&quot;, &quot;drent&quot;, &quot;drere&quot;, &quot;drest&quot;, &quot;dreys&quot;, &quot;dribs&quot;, &quot;drice&quot;, &quot;dries&quot;, &quot;drily&quot;, &quot;drips&quot;, &quot;dript&quot;, &quot;droid&quot;, &quot;droil&quot;, &quot;droke&quot;, &quot;drole&quot;, &quot;drome&quot;, &quot;drony&quot;, &quot;droob&quot;, &quot;droog&quot;, &quot;drook&quot;, &quot;drops&quot;, &quot;dropt&quot;, &quot;drouk&quot;, &quot;drows&quot;, &quot;drubs&quot;, &quot;drugs&quot;, &quot;drums&quot;, &quot;drupe&quot;, &quot;druse&quot;, &quot;drusy&quot;, &quot;druxy&quot;, &quot;dryad&quot;, &quot;dryas&quot;, &quot;dsobo&quot;, &quot;dsomo&quot;, &quot;duads&quot;, &quot;duals&quot;, &quot;duans&quot;, &quot;duars&quot;, &quot;dubbo&quot;, &quot;ducal&quot;, &quot;ducat&quot;, &quot;duces&quot;, &quot;ducks&quot;, &quot;ducky&quot;, &quot;ducts&quot;, &quot;duddy&quot;, &quot;duded&quot;, &quot;dudes&quot;, &quot;duels&quot;, &quot;duets&quot;, &quot;duett&quot;, &quot;duffs&quot;, &quot;dufus&quot;, &quot;duing&quot;, &quot;duits&quot;, &quot;dukas&quot;, &quot;duked&quot;, &quot;dukes&quot;, &quot;dukka&quot;, &quot;dulce&quot;, &quot;dules&quot;, &quot;dulia&quot;, &quot;dulls&quot;, &quot;dulse&quot;, &quot;dumas&quot;, &quot;dumbo&quot;, &quot;dumbs&quot;, &quot;dumka&quot;, &quot;dumky&quot;, &quot;dumps&quot;, &quot;dunam&quot;, &quot;dunch&quot;, &quot;dunes&quot;, &quot;dungs&quot;, &quot;dungy&quot;, &quot;dunks&quot;, &quot;dunno&quot;, &quot;dunny&quot;, &quot;dunsh&quot;, &quot;dunts&quot;, &quot;duomi&quot;, &quot;duomo&quot;, &quot;duped&quot;, &quot;duper&quot;, &quot;dupes&quot;, &quot;duple&quot;, &quot;duply&quot;, &quot;duppy&quot;, &quot;dural&quot;, &quot;duras&quot;, &quot;dured&quot;, &quot;dures&quot;, &quot;durgy&quot;, &quot;durns&quot;, &quot;duroc&quot;, &quot;duros&quot;, &quot;duroy&quot;, &quot;durra&quot;, &quot;durrs&quot;, &quot;durry&quot;, &quot;durst&quot;, &quot;durum&quot;, &quot;durzi&quot;, &quot;dusks&quot;, &quot;dusts&quot;, &quot;duxes&quot;, &quot;dwaal&quot;, &quot;dwale&quot;, &quot;dwalm&quot;, &quot;dwams&quot;, &quot;dwang&quot;, &quot;dwaum&quot;, &quot;dweeb&quot;, &quot;dwile&quot;, &quot;dwine&quot;, &quot;dyads&quot;, &quot;dyers&quot;, &quot;dykon&quot;, &quot;dynel&quot;, &quot;dynes&quot;, &quot;dzhos&quot;, &quot;eagre&quot;, &quot;ealed&quot;, &quot;eales&quot;, &quot;eaned&quot;, &quot;eards&quot;, &quot;eared&quot;, &quot;earls&quot;, &quot;earns&quot;, &quot;earnt&quot;, &quot;earst&quot;, &quot;eased&quot;, &quot;easer&quot;, &quot;eases&quot;, &quot;easle&quot;, &quot;easts&quot;, &quot;eathe&quot;, &quot;eaved&quot;, &quot;eaves&quot;, &quot;ebbed&quot;, &quot;ebbet&quot;, &quot;ebons&quot;, &quot;ebook&quot;, &quot;ecads&quot;, &quot;eched&quot;, &quot;eches&quot;, &quot;echos&quot;, &quot;ecrus&quot;, &quot;edema&quot;, &quot;edged&quot;, &quot;edger&quot;, &quot;edges&quot;, &quot;edile&quot;, &quot;edits&quot;, &quot;educe&quot;, &quot;educt&quot;, &quot;eejit&quot;, &quot;eensy&quot;, &quot;eeven&quot;, &quot;eevns&quot;, &quot;effed&quot;, &quot;egads&quot;, &quot;egers&quot;, &quot;egest&quot;, &quot;eggar&quot;, &quot;egged&quot;, &quot;egger&quot;, &quot;egmas&quot;, &quot;ehing&quot;, &quot;eider&quot;, &quot;eidos&quot;, &quot;eigne&quot;, &quot;eiked&quot;, &quot;eikon&quot;, &quot;eilds&quot;, &quot;eisel&quot;, &quot;ejido&quot;, &quot;ekkas&quot;, &quot;elain&quot;, &quot;eland&quot;, &quot;elans&quot;, &quot;elchi&quot;, &quot;eldin&quot;, &quot;elemi&quot;, &quot;elfed&quot;, &quot;eliad&quot;, &quot;elint&quot;, &quot;elmen&quot;, &quot;eloge&quot;, &quot;elogy&quot;, &quot;eloin&quot;, &quot;elops&quot;, &quot;elpee&quot;, &quot;elsin&quot;, &quot;elute&quot;, &quot;elvan&quot;, &quot;elven&quot;, &quot;elver&quot;, &quot;elves&quot;, &quot;emacs&quot;, &quot;embar&quot;, &quot;embay&quot;, &quot;embog&quot;, &quot;embow&quot;, &quot;embox&quot;, &quot;embus&quot;, &quot;emeer&quot;, &quot;emend&quot;, &quot;emerg&quot;, &quot;emery&quot;, &quot;emeus&quot;, &quot;emics&quot;, &quot;emirs&quot;, &quot;emits&quot;, &quot;emmas&quot;, &quot;emmer&quot;, &quot;emmet&quot;, &quot;emmew&quot;, &quot;emmys&quot;, &quot;emoji&quot;, &quot;emong&quot;, &quot;emote&quot;, &quot;emove&quot;, &quot;empts&quot;, &quot;emule&quot;, &quot;emure&quot;, &quot;emyde&quot;, &quot;emyds&quot;, &quot;enarm&quot;, &quot;enate&quot;, &quot;ended&quot;, &quot;ender&quot;, &quot;endew&quot;, &quot;endue&quot;, &quot;enews&quot;, &quot;enfix&quot;, &quot;eniac&quot;, &quot;enlit&quot;, &quot;enmew&quot;, &quot;ennog&quot;, &quot;enoki&quot;, &quot;enols&quot;, &quot;enorm&quot;, &quot;enows&quot;, &quot;enrol&quot;, &quot;ensew&quot;, &quot;ensky&quot;, &quot;entia&quot;, &quot;enure&quot;, &quot;enurn&quot;, &quot;envoi&quot;, &quot;enzym&quot;, &quot;eorls&quot;, &quot;eosin&quot;, &quot;epact&quot;, &quot;epees&quot;, &quot;ephah&quot;, &quot;ephas&quot;, &quot;ephod&quot;, &quot;ephor&quot;, &quot;epics&quot;, &quot;epode&quot;, &quot;epopt&quot;, &quot;epris&quot;, &quot;eques&quot;, &quot;equid&quot;, &quot;erbia&quot;, &quot;erevs&quot;, &quot;ergon&quot;, &quot;ergos&quot;, &quot;ergot&quot;, &quot;erhus&quot;, &quot;erica&quot;, &quot;erick&quot;, &quot;erics&quot;, &quot;ering&quot;, &quot;erned&quot;, &quot;ernes&quot;, &quot;erose&quot;, &quot;erred&quot;, &quot;erses&quot;, &quot;eruct&quot;, &quot;erugo&quot;, &quot;eruvs&quot;, &quot;erven&quot;, &quot;ervil&quot;, &quot;escar&quot;, &quot;escot&quot;, &quot;esile&quot;, &quot;eskar&quot;, &quot;esker&quot;, &quot;esnes&quot;, &quot;esses&quot;, &quot;estoc&quot;, &quot;estop&quot;, &quot;estro&quot;, &quot;etage&quot;, &quot;etape&quot;, &quot;etats&quot;, &quot;etens&quot;, &quot;ethal&quot;, &quot;ethne&quot;, &quot;ethyl&quot;, &quot;etics&quot;, &quot;etnas&quot;, &quot;ettin&quot;, &quot;ettle&quot;, &quot;etuis&quot;, &quot;etwee&quot;, &quot;etyma&quot;, &quot;eughs&quot;, &quot;euked&quot;, &quot;eupad&quot;, &quot;euros&quot;, &quot;eusol&quot;, &quot;evens&quot;, &quot;evert&quot;, &quot;evets&quot;, &quot;evhoe&quot;, &quot;evils&quot;, &quot;evite&quot;, &quot;evohe&quot;, &quot;ewers&quot;, &quot;ewest&quot;, &quot;ewhow&quot;, &quot;ewked&quot;, &quot;exams&quot;, &quot;exeat&quot;, &quot;execs&quot;, &quot;exeem&quot;, &quot;exeme&quot;, &quot;exfil&quot;, &quot;exies&quot;, &quot;exine&quot;, &quot;exing&quot;, &quot;exits&quot;, &quot;exode&quot;, &quot;exome&quot;, &quot;exons&quot;, &quot;expat&quot;, &quot;expos&quot;, &quot;exude&quot;, &quot;exuls&quot;, &quot;exurb&quot;, &quot;eyass&quot;, &quot;eyers&quot;, &quot;eyots&quot;, &quot;eyras&quot;, &quot;eyres&quot;, &quot;eyrie&quot;, &quot;eyrir&quot;, &quot;ezine&quot;, &quot;fabby&quot;, &quot;faced&quot;, &quot;facer&quot;, &quot;faces&quot;, &quot;facia&quot;, &quot;facta&quot;, &quot;facts&quot;, &quot;faddy&quot;, &quot;faded&quot;, &quot;fader&quot;, &quot;fades&quot;, &quot;fadge&quot;, &quot;fados&quot;, &quot;faena&quot;, &quot;faery&quot;, &quot;faffs&quot;, &quot;faffy&quot;, &quot;fagin&quot;, &quot;faiks&quot;, &quot;fails&quot;, &quot;faine&quot;, &quot;fains&quot;, &quot;fairs&quot;, &quot;faked&quot;, &quot;faker&quot;, &quot;fakes&quot;, &quot;fakey&quot;, &quot;fakie&quot;, &quot;fakir&quot;, &quot;falaj&quot;, &quot;falls&quot;, &quot;famed&quot;, &quot;fames&quot;, &quot;fanal&quot;, &quot;fands&quot;, &quot;fanes&quot;, &quot;fanga&quot;, &quot;fango&quot;, &quot;fangs&quot;, &quot;fanks&quot;, &quot;fanon&quot;, &quot;fanos&quot;, &quot;fanum&quot;, &quot;faqir&quot;, &quot;farad&quot;, &quot;farci&quot;, &quot;farcy&quot;, &quot;fards&quot;, &quot;fared&quot;, &quot;farer&quot;, &quot;fares&quot;, &quot;farle&quot;, &quot;farls&quot;, &quot;farms&quot;, &quot;faros&quot;, &quot;farro&quot;, &quot;farse&quot;, &quot;farts&quot;, &quot;fasci&quot;, &quot;fasti&quot;, &quot;fasts&quot;, &quot;fated&quot;, &quot;fates&quot;, &quot;fatly&quot;, &quot;fatso&quot;, &quot;fatwa&quot;, &quot;faugh&quot;, &quot;fauld&quot;, &quot;fauns&quot;, &quot;faurd&quot;, &quot;fauts&quot;, &quot;fauve&quot;, &quot;favas&quot;, &quot;favel&quot;, &quot;faver&quot;, &quot;faves&quot;, &quot;favus&quot;, &quot;fawns&quot;, &quot;fawny&quot;, &quot;faxed&quot;, &quot;faxes&quot;, &quot;fayed&quot;, &quot;fayer&quot;, &quot;fayne&quot;, &quot;fayre&quot;, &quot;fazed&quot;, &quot;fazes&quot;, &quot;feals&quot;, &quot;feare&quot;, &quot;fears&quot;, &quot;feart&quot;, &quot;fease&quot;, &quot;feats&quot;, &quot;feaze&quot;, &quot;feces&quot;, &quot;fecht&quot;, &quot;fecit&quot;, &quot;fecks&quot;, &quot;fedex&quot;, &quot;feebs&quot;, &quot;feeds&quot;, &quot;feels&quot;, &quot;feens&quot;, &quot;feers&quot;, &quot;feese&quot;, &quot;feeze&quot;, &quot;fehme&quot;, &quot;feint&quot;, &quot;feist&quot;, &quot;felch&quot;, &quot;felid&quot;, &quot;fells&quot;, &quot;felly&quot;, &quot;felts&quot;, &quot;felty&quot;, &quot;femal&quot;, &quot;femes&quot;, &quot;femmy&quot;, &quot;fends&quot;, &quot;fendy&quot;, &quot;fenis&quot;, &quot;fenks&quot;, &quot;fenny&quot;, &quot;fents&quot;, &quot;feods&quot;, &quot;feoff&quot;, &quot;ferer&quot;, &quot;feres&quot;, &quot;feria&quot;, &quot;ferly&quot;, &quot;fermi&quot;, &quot;ferms&quot;, &quot;ferns&quot;, &quot;ferny&quot;, &quot;fesse&quot;, &quot;festa&quot;, &quot;fests&quot;, &quot;festy&quot;, &quot;fetas&quot;, &quot;feted&quot;, &quot;fetes&quot;, &quot;fetor&quot;, &quot;fetta&quot;, &quot;fetts&quot;, &quot;fetwa&quot;, &quot;feuar&quot;, &quot;feuds&quot;, &quot;feued&quot;, &quot;feyed&quot;, &quot;feyer&quot;, &quot;feyly&quot;, &quot;fezes&quot;, &quot;fezzy&quot;, &quot;fiars&quot;, &quot;fiats&quot;, &quot;fibro&quot;, &quot;fices&quot;, &quot;fiche&quot;, &quot;fichu&quot;, &quot;ficin&quot;, &quot;ficos&quot;, &quot;fides&quot;, &quot;fidge&quot;, &quot;fidos&quot;, &quot;fiefs&quot;, &quot;fient&quot;, &quot;fiere&quot;, &quot;fiers&quot;, &quot;fiest&quot;, &quot;fifed&quot;, &quot;fifer&quot;, &quot;fifes&quot;, &quot;fifis&quot;, &quot;figgy&quot;, &quot;figos&quot;, &quot;fiked&quot;, &quot;fikes&quot;, &quot;filar&quot;, &quot;filch&quot;, &quot;filed&quot;, &quot;files&quot;, &quot;filii&quot;, &quot;filks&quot;, &quot;fille&quot;, &quot;fillo&quot;, &quot;fills&quot;, &quot;filmi&quot;, &quot;films&quot;, &quot;filos&quot;, &quot;filum&quot;, &quot;finca&quot;, &quot;finds&quot;, &quot;fined&quot;, &quot;fines&quot;, &quot;finis&quot;, &quot;finks&quot;, &quot;finny&quot;, &quot;finos&quot;, &quot;fiord&quot;, &quot;fiqhs&quot;, &quot;fique&quot;, &quot;fired&quot;, &quot;firer&quot;, &quot;fires&quot;, &quot;firie&quot;, &quot;firks&quot;, &quot;firms&quot;, &quot;firns&quot;, &quot;firry&quot;, &quot;firth&quot;, &quot;fiscs&quot;, &quot;fisks&quot;, &quot;fists&quot;, &quot;fisty&quot;, &quot;fitch&quot;, &quot;fitly&quot;, &quot;fitna&quot;, &quot;fitte&quot;, &quot;fitts&quot;, &quot;fiver&quot;, &quot;fives&quot;, &quot;fixed&quot;, &quot;fixes&quot;, &quot;fixit&quot;, &quot;fjeld&quot;, &quot;flabs&quot;, &quot;flaff&quot;, &quot;flags&quot;, &quot;flaks&quot;, &quot;flamm&quot;, &quot;flams&quot;, &quot;flamy&quot;, &quot;flane&quot;, &quot;flans&quot;, &quot;flaps&quot;, &quot;flary&quot;, &quot;flats&quot;, &quot;flava&quot;, &quot;flawn&quot;, &quot;flaws&quot;, &quot;flawy&quot;, &quot;flaxy&quot;, &quot;flays&quot;, &quot;fleam&quot;, &quot;fleas&quot;, &quot;fleek&quot;, &quot;fleer&quot;, &quot;flees&quot;, &quot;flegs&quot;, &quot;fleme&quot;, &quot;fleur&quot;, &quot;flews&quot;, &quot;flexi&quot;, &quot;flexo&quot;, &quot;fleys&quot;, &quot;flics&quot;, &quot;flied&quot;, &quot;flies&quot;, &quot;flimp&quot;, &quot;flims&quot;, &quot;flips&quot;, &quot;flirs&quot;, &quot;flisk&quot;, &quot;flite&quot;, &quot;flits&quot;, &quot;flitt&quot;, &quot;flobs&quot;, &quot;flocs&quot;, &quot;floes&quot;, &quot;flogs&quot;, &quot;flong&quot;, &quot;flops&quot;, &quot;flors&quot;, &quot;flory&quot;, &quot;flosh&quot;, &quot;flota&quot;, &quot;flote&quot;, &quot;flows&quot;, &quot;flubs&quot;, &quot;flued&quot;, &quot;flues&quot;, &quot;fluey&quot;, &quot;fluky&quot;, &quot;flump&quot;, &quot;fluor&quot;, &quot;flurr&quot;, &quot;fluty&quot;, &quot;fluyt&quot;, &quot;flyby&quot;, &quot;flype&quot;, &quot;flyte&quot;, &quot;foals&quot;, &quot;foams&quot;, &quot;foehn&quot;, &quot;fogey&quot;, &quot;fogie&quot;, &quot;fogle&quot;, &quot;fogou&quot;, &quot;fohns&quot;, &quot;foids&quot;, &quot;foils&quot;, &quot;foins&quot;, &quot;folds&quot;, &quot;foley&quot;, &quot;folia&quot;, &quot;folic&quot;, &quot;folie&quot;, &quot;folks&quot;, &quot;folky&quot;, &quot;fomes&quot;, &quot;fonda&quot;, &quot;fonds&quot;, &quot;fondu&quot;, &quot;fones&quot;, &quot;fonly&quot;, &quot;fonts&quot;, &quot;foods&quot;, &quot;foody&quot;, &quot;fools&quot;, &quot;foots&quot;, &quot;footy&quot;, &quot;foram&quot;, &quot;forbs&quot;, &quot;forby&quot;, &quot;fordo&quot;, &quot;fords&quot;, &quot;forel&quot;, &quot;fores&quot;, &quot;forex&quot;, &quot;forks&quot;, &quot;forky&quot;, &quot;forme&quot;, &quot;forms&quot;, &quot;forts&quot;, &quot;forza&quot;, &quot;forze&quot;, &quot;fossa&quot;, &quot;fosse&quot;, &quot;fouat&quot;, &quot;fouds&quot;, &quot;fouer&quot;, &quot;fouet&quot;, &quot;foule&quot;, &quot;fouls&quot;, &quot;fount&quot;, &quot;fours&quot;, &quot;fouth&quot;, &quot;fovea&quot;, &quot;fowls&quot;, &quot;fowth&quot;, &quot;foxed&quot;, &quot;foxes&quot;, &quot;foxie&quot;, &quot;foyle&quot;, &quot;foyne&quot;, &quot;frabs&quot;, &quot;frack&quot;, &quot;fract&quot;, &quot;frags&quot;, &quot;fraim&quot;, &quot;franc&quot;, &quot;frape&quot;, &quot;fraps&quot;, &quot;frass&quot;, &quot;frate&quot;, &quot;frati&quot;, &quot;frats&quot;, &quot;fraus&quot;, &quot;frays&quot;, &quot;frees&quot;, &quot;freet&quot;, &quot;freit&quot;, &quot;fremd&quot;, &quot;frena&quot;, &quot;freon&quot;, &quot;frere&quot;, &quot;frets&quot;, &quot;fribs&quot;, &quot;frier&quot;, &quot;fries&quot;, &quot;frigs&quot;, &quot;frise&quot;, &quot;frist&quot;, &quot;frith&quot;, &quot;frits&quot;, &quot;fritt&quot;, &quot;frize&quot;, &quot;frizz&quot;, &quot;froes&quot;, &quot;frogs&quot;, &quot;frons&quot;, &quot;frore&quot;, &quot;frorn&quot;, &quot;frory&quot;, &quot;frosh&quot;, &quot;frows&quot;, &quot;frowy&quot;, &quot;frugs&quot;, &quot;frump&quot;, &quot;frush&quot;, &quot;frust&quot;, &quot;fryer&quot;, &quot;fubar&quot;, &quot;fubby&quot;, &quot;fubsy&quot;, &quot;fucks&quot;, &quot;fucus&quot;, &quot;fuddy&quot;, &quot;fudgy&quot;, &quot;fuels&quot;, &quot;fuero&quot;, &quot;fuffs&quot;, &quot;fuffy&quot;, &quot;fugal&quot;, &quot;fuggy&quot;, &quot;fugie&quot;, &quot;fugio&quot;, &quot;fugle&quot;, &quot;fugly&quot;, &quot;fugus&quot;, &quot;fujis&quot;, &quot;fulls&quot;, &quot;fumed&quot;, &quot;fumer&quot;, &quot;fumes&quot;, &quot;fumet&quot;, &quot;fundi&quot;, &quot;funds&quot;, &quot;fundy&quot;, &quot;fungo&quot;, &quot;fungs&quot;, &quot;funks&quot;, &quot;fural&quot;, &quot;furan&quot;, &quot;furca&quot;, &quot;furls&quot;, &quot;furol&quot;, &quot;furrs&quot;, &quot;furth&quot;, &quot;furze&quot;, &quot;furzy&quot;, &quot;fused&quot;, &quot;fusee&quot;, &quot;fusel&quot;, &quot;fuses&quot;, &quot;fusil&quot;, &quot;fusks&quot;, &quot;fusts&quot;, &quot;fusty&quot;, &quot;futon&quot;, &quot;fuzed&quot;, &quot;fuzee&quot;, &quot;fuzes&quot;, &quot;fuzil&quot;, &quot;fyces&quot;, &quot;fyked&quot;, &quot;fykes&quot;, &quot;fyles&quot;, &quot;fyrds&quot;, &quot;fytte&quot;, &quot;gabba&quot;, &quot;gabby&quot;, &quot;gable&quot;, &quot;gaddi&quot;, &quot;gades&quot;, &quot;gadge&quot;, &quot;gadid&quot;, &quot;gadis&quot;, &quot;gadje&quot;, &quot;gadjo&quot;, &quot;gadso&quot;, &quot;gaffs&quot;, &quot;gaged&quot;, &quot;gager&quot;, &quot;gages&quot;, &quot;gaids&quot;, &quot;gains&quot;, &quot;gairs&quot;, &quot;gaita&quot;, &quot;gaits&quot;, &quot;gaitt&quot;, &quot;gajos&quot;, &quot;galah&quot;, &quot;galas&quot;, &quot;galax&quot;, &quot;galea&quot;, &quot;galed&quot;, &quot;gales&quot;, &quot;galls&quot;, &quot;gally&quot;, &quot;galop&quot;, &quot;galut&quot;, &quot;galvo&quot;, &quot;gamas&quot;, &quot;gamay&quot;, &quot;gamba&quot;, &quot;gambe&quot;, &quot;gambo&quot;, &quot;gambs&quot;, &quot;gamed&quot;, &quot;games&quot;, &quot;gamey&quot;, &quot;gamic&quot;, &quot;gamin&quot;, &quot;gamme&quot;, &quot;gammy&quot;, &quot;gamps&quot;, &quot;ganch&quot;, &quot;gandy&quot;, &quot;ganef&quot;, &quot;ganev&quot;, &quot;gangs&quot;, &quot;ganja&quot;, &quot;ganof&quot;, &quot;gants&quot;, &quot;gaols&quot;, &quot;gaped&quot;, &quot;gaper&quot;, &quot;gapes&quot;, &quot;gapos&quot;, &quot;gappy&quot;, &quot;garbe&quot;, &quot;garbo&quot;, &quot;garbs&quot;, &quot;garda&quot;, &quot;gares&quot;, &quot;garis&quot;, &quot;garms&quot;, &quot;garni&quot;, &quot;garre&quot;, &quot;garth&quot;, &quot;garum&quot;, &quot;gases&quot;, &quot;gasps&quot;, &quot;gaspy&quot;, &quot;gasts&quot;, &quot;gatch&quot;, &quot;gated&quot;, &quot;gater&quot;, &quot;gates&quot;, &quot;gaths&quot;, &quot;gator&quot;, &quot;gauch&quot;, &quot;gaucy&quot;, &quot;gauds&quot;, &quot;gauje&quot;, &quot;gault&quot;, &quot;gaums&quot;, &quot;gaumy&quot;, &quot;gaups&quot;, &quot;gaurs&quot;, &quot;gauss&quot;, &quot;gauzy&quot;, &quot;gavot&quot;, &quot;gawcy&quot;, &quot;gawds&quot;, &quot;gawks&quot;, &quot;gawps&quot;, &quot;gawsy&quot;, &quot;gayal&quot;, &quot;gazal&quot;, &quot;gazar&quot;, &quot;gazed&quot;, &quot;gazes&quot;, &quot;gazon&quot;, &quot;gazoo&quot;, &quot;geals&quot;, &quot;geans&quot;, &quot;geare&quot;, &quot;gears&quot;, &quot;geats&quot;, &quot;gebur&quot;, &quot;gecks&quot;, &quot;geeks&quot;, &quot;geeps&quot;, &quot;geest&quot;, &quot;geist&quot;, &quot;geits&quot;, &quot;gelds&quot;, &quot;gelee&quot;, &quot;gelid&quot;, &quot;gelly&quot;, &quot;gelts&quot;, &quot;gemel&quot;, &quot;gemma&quot;, &quot;gemmy&quot;, &quot;gemot&quot;, &quot;genal&quot;, &quot;genas&quot;, &quot;genes&quot;, &quot;genet&quot;, &quot;genic&quot;, &quot;genii&quot;, &quot;genip&quot;, &quot;genny&quot;, &quot;genoa&quot;, &quot;genom&quot;, &quot;genro&quot;, &quot;gents&quot;, &quot;genty&quot;, &quot;genua&quot;, &quot;genus&quot;, &quot;geode&quot;, &quot;geoid&quot;, &quot;gerah&quot;, &quot;gerbe&quot;, &quot;geres&quot;, &quot;gerle&quot;, &quot;germs&quot;, &quot;germy&quot;, &quot;gerne&quot;, &quot;gesse&quot;, &quot;gesso&quot;, &quot;geste&quot;, &quot;gests&quot;, &quot;getas&quot;, &quot;getup&quot;, &quot;geums&quot;, &quot;geyan&quot;, &quot;geyer&quot;, &quot;ghast&quot;, &quot;ghats&quot;, &quot;ghaut&quot;, &quot;ghazi&quot;, &quot;ghees&quot;, &quot;ghest&quot;, &quot;ghyll&quot;, &quot;gibed&quot;, &quot;gibel&quot;, &quot;giber&quot;, &quot;gibes&quot;, &quot;gibli&quot;, &quot;gibus&quot;, &quot;gifts&quot;, &quot;gigas&quot;, &quot;gighe&quot;, &quot;gigot&quot;, &quot;gigue&quot;, &quot;gilas&quot;, &quot;gilds&quot;, &quot;gilet&quot;, &quot;gills&quot;, &quot;gilly&quot;, &quot;gilpy&quot;, &quot;gilts&quot;, &quot;gimel&quot;, &quot;gimme&quot;, &quot;gimps&quot;, &quot;gimpy&quot;, &quot;ginch&quot;, &quot;ginge&quot;, &quot;gings&quot;, &quot;ginks&quot;, &quot;ginny&quot;, &quot;ginzo&quot;, &quot;gipon&quot;, &quot;gippo&quot;, &quot;gippy&quot;, &quot;girds&quot;, &quot;girls&quot;, &quot;girns&quot;, &quot;giron&quot;, &quot;giros&quot;, &quot;girrs&quot;, &quot;girsh&quot;, &quot;girts&quot;, &quot;gismo&quot;, &quot;gisms&quot;, &quot;gists&quot;, &quot;gitch&quot;, &quot;gites&quot;, &quot;giust&quot;, &quot;gived&quot;, &quot;gives&quot;, &quot;gizmo&quot;, &quot;glace&quot;, &quot;glads&quot;, &quot;glady&quot;, &quot;glaik&quot;, &quot;glair&quot;, &quot;glams&quot;, &quot;glans&quot;, &quot;glary&quot;, &quot;glaum&quot;, &quot;glaur&quot;, &quot;glazy&quot;, &quot;gleba&quot;, &quot;glebe&quot;, &quot;gleby&quot;, &quot;glede&quot;, &quot;gleds&quot;, &quot;gleed&quot;, &quot;gleek&quot;, &quot;glees&quot;, &quot;gleet&quot;, &quot;gleis&quot;, &quot;glens&quot;, &quot;glent&quot;, &quot;gleys&quot;, &quot;glial&quot;, &quot;glias&quot;, &quot;glibs&quot;, &quot;gliff&quot;, &quot;glift&quot;, &quot;glike&quot;, &quot;glime&quot;, &quot;glims&quot;, &quot;glisk&quot;, &quot;glits&quot;, &quot;glitz&quot;, &quot;gloam&quot;, &quot;globi&quot;, &quot;globs&quot;, &quot;globy&quot;, &quot;glode&quot;, &quot;glogg&quot;, &quot;gloms&quot;, &quot;gloop&quot;, &quot;glops&quot;, &quot;glost&quot;, &quot;glout&quot;, &quot;glows&quot;, &quot;gloze&quot;, &quot;glued&quot;, &quot;gluer&quot;, &quot;glues&quot;, &quot;gluey&quot;, &quot;glugs&quot;, &quot;glume&quot;, &quot;glums&quot;, &quot;gluon&quot;, &quot;glute&quot;, &quot;gluts&quot;, &quot;gnarl&quot;, &quot;gnarr&quot;, &quot;gnars&quot;, &quot;gnats&quot;, &quot;gnawn&quot;, &quot;gnaws&quot;, &quot;gnows&quot;, &quot;goads&quot;, &quot;goafs&quot;, &quot;goals&quot;, &quot;goary&quot;, &quot;goats&quot;, &quot;goaty&quot;, &quot;goban&quot;, &quot;gobar&quot;, &quot;gobbi&quot;, &quot;gobbo&quot;, &quot;gobby&quot;, &quot;gobis&quot;, &quot;gobos&quot;, &quot;godet&quot;, &quot;godso&quot;, &quot;goels&quot;, &quot;goers&quot;, &quot;goest&quot;, &quot;goeth&quot;, &quot;goety&quot;, &quot;gofer&quot;, &quot;goffs&quot;, &quot;gogga&quot;, &quot;gogos&quot;, &quot;goier&quot;, &quot;gojis&quot;, &quot;golds&quot;, &quot;goldy&quot;, &quot;goles&quot;, &quot;golfs&quot;, &quot;golpe&quot;, &quot;golps&quot;, &quot;gombo&quot;, &quot;gomer&quot;, &quot;gompa&quot;, &quot;gonch&quot;, &quot;gonef&quot;, &quot;gongs&quot;, &quot;gonia&quot;, &quot;gonif&quot;, &quot;gonks&quot;, &quot;gonna&quot;, &quot;gonof&quot;, &quot;gonys&quot;, &quot;gonzo&quot;, &quot;gooby&quot;, &quot;goods&quot;, &quot;goofs&quot;, &quot;googs&quot;, &quot;gooky&quot;, &quot;goold&quot;, &quot;gools&quot;, &quot;gooly&quot;, &quot;goons&quot;, &quot;goony&quot;, &quot;goops&quot;, &quot;goopy&quot;, &quot;goors&quot;, &quot;goory&quot;, &quot;goosy&quot;, &quot;gopak&quot;, &quot;gopik&quot;, &quot;goral&quot;, &quot;goras&quot;, &quot;gored&quot;, &quot;gores&quot;, &quot;goris&quot;, &quot;gorms&quot;, &quot;gormy&quot;, &quot;gorps&quot;, &quot;gorse&quot;, &quot;gorsy&quot;, &quot;gosht&quot;, &quot;gosse&quot;, &quot;gotch&quot;, &quot;goths&quot;, &quot;gothy&quot;, &quot;gotta&quot;, &quot;gouch&quot;, &quot;gouks&quot;, &quot;goura&quot;, &quot;gouts&quot;, &quot;gouty&quot;, &quot;gowan&quot;, &quot;gowds&quot;, &quot;gowfs&quot;, &quot;gowks&quot;, &quot;gowls&quot;, &quot;gowns&quot;, &quot;goxes&quot;, &quot;goyim&quot;, &quot;goyle&quot;, &quot;graal&quot;, &quot;grabs&quot;, &quot;grads&quot;, &quot;graff&quot;, &quot;graip&quot;, &quot;grama&quot;, &quot;grame&quot;, &quot;gramp&quot;, &quot;grams&quot;, &quot;grana&quot;, &quot;grans&quot;, &quot;grapy&quot;, &quot;gravs&quot;, &quot;grays&quot;, &quot;grebe&quot;, &quot;grebo&quot;, &quot;grece&quot;, &quot;greek&quot;, &quot;grees&quot;, &quot;grege&quot;, &quot;grego&quot;, &quot;grein&quot;, &quot;grens&quot;, &quot;grese&quot;, &quot;greve&quot;, &quot;grews&quot;, &quot;greys&quot;, &quot;grice&quot;, &quot;gride&quot;, &quot;grids&quot;, &quot;griff&quot;, &quot;grift&quot;, &quot;grigs&quot;, &quot;grike&quot;, &quot;grins&quot;, &quot;griot&quot;, &quot;grips&quot;, &quot;gript&quot;, &quot;gripy&quot;, &quot;grise&quot;, &quot;grist&quot;, &quot;grisy&quot;, &quot;grith&quot;, &quot;grits&quot;, &quot;grize&quot;, &quot;groat&quot;, &quot;grody&quot;, &quot;grogs&quot;, &quot;groks&quot;, &quot;groma&quot;, &quot;grone&quot;, &quot;groof&quot;, &quot;grosz&quot;, &quot;grots&quot;, &quot;grouf&quot;, &quot;grovy&quot;, &quot;grows&quot;, &quot;grrls&quot;, &quot;grrrl&quot;, &quot;grubs&quot;, &quot;grued&quot;, &quot;grues&quot;, &quot;grufe&quot;, &quot;grume&quot;, &quot;grump&quot;, &quot;grund&quot;, &quot;gryce&quot;, &quot;gryde&quot;, &quot;gryke&quot;, &quot;grype&quot;, &quot;grypt&quot;, &quot;guaco&quot;, &quot;guana&quot;, &quot;guano&quot;, &quot;guans&quot;, &quot;guars&quot;, &quot;gucks&quot;, &quot;gucky&quot;, &quot;gudes&quot;, &quot;guffs&quot;, &quot;gugas&quot;, &quot;guids&quot;, &quot;guimp&quot;, &quot;guiro&quot;, &quot;gulag&quot;, &quot;gular&quot;, &quot;gulas&quot;, &quot;gules&quot;, &quot;gulet&quot;, &quot;gulfs&quot;, &quot;gulfy&quot;, &quot;gulls&quot;, &quot;gulph&quot;, &quot;gulps&quot;, &quot;gulpy&quot;, &quot;gumma&quot;, &quot;gummi&quot;, &quot;gumps&quot;, &quot;gundy&quot;, &quot;gunge&quot;, &quot;gungy&quot;, &quot;gunks&quot;, &quot;gunky&quot;, &quot;gunny&quot;, &quot;guqin&quot;, &quot;gurdy&quot;, &quot;gurge&quot;, &quot;gurls&quot;, &quot;gurly&quot;, &quot;gurns&quot;, &quot;gurry&quot;, &quot;gursh&quot;, &quot;gurus&quot;, &quot;gushy&quot;, &quot;gusla&quot;, &quot;gusle&quot;, &quot;gusli&quot;, &quot;gussy&quot;, &quot;gusts&quot;, &quot;gutsy&quot;, &quot;gutta&quot;, &quot;gutty&quot;, &quot;guyed&quot;, &quot;guyle&quot;, &quot;guyot&quot;, &quot;guyse&quot;, &quot;gwine&quot;, &quot;gyals&quot;, &quot;gyans&quot;, &quot;gybed&quot;, &quot;gybes&quot;, &quot;gyeld&quot;, &quot;gymps&quot;, &quot;gynae&quot;, &quot;gynie&quot;, &quot;gynny&quot;, &quot;gynos&quot;, &quot;gyoza&quot;, &quot;gypos&quot;, &quot;gyppo&quot;, &quot;gyppy&quot;, &quot;gyral&quot;, &quot;gyred&quot;, &quot;gyres&quot;, &quot;gyron&quot;, &quot;gyros&quot;, &quot;gyrus&quot;, &quot;gytes&quot;, &quot;gyved&quot;, &quot;gyves&quot;, &quot;haafs&quot;, &quot;haars&quot;, &quot;hable&quot;, &quot;habus&quot;, &quot;hacek&quot;, &quot;hacks&quot;, &quot;hadal&quot;, &quot;haded&quot;, &quot;hades&quot;, &quot;hadji&quot;, &quot;hadst&quot;, &quot;haems&quot;, &quot;haets&quot;, &quot;haffs&quot;, &quot;hafiz&quot;, &quot;hafts&quot;, &quot;haggs&quot;, &quot;hahas&quot;, &quot;haick&quot;, &quot;haika&quot;, &quot;haiks&quot;, &quot;haiku&quot;, &quot;hails&quot;, &quot;haily&quot;, &quot;hains&quot;, &quot;haint&quot;, &quot;hairs&quot;, &quot;haith&quot;, &quot;hajes&quot;, &quot;hajis&quot;, &quot;hajji&quot;, &quot;hakam&quot;, &quot;hakas&quot;, &quot;hakea&quot;, &quot;hakes&quot;, &quot;hakim&quot;, &quot;hakus&quot;, &quot;halal&quot;, &quot;haled&quot;, &quot;haler&quot;, &quot;hales&quot;, &quot;halfa&quot;, &quot;halfs&quot;, &quot;halid&quot;, &quot;hallo&quot;, &quot;halls&quot;, &quot;halma&quot;, &quot;halms&quot;, &quot;halon&quot;, &quot;halos&quot;, &quot;halse&quot;, &quot;halts&quot;, &quot;halva&quot;, &quot;halwa&quot;, &quot;hamal&quot;, &quot;hamba&quot;, &quot;hamed&quot;, &quot;hames&quot;, &quot;hammy&quot;, &quot;hamza&quot;, &quot;hanap&quot;, &quot;hance&quot;, &quot;hanch&quot;, &quot;hands&quot;, &quot;hangi&quot;, &quot;hangs&quot;, &quot;hanks&quot;, &quot;hanky&quot;, &quot;hansa&quot;, &quot;hanse&quot;, &quot;hants&quot;, &quot;haole&quot;, &quot;haoma&quot;, &quot;hapax&quot;, &quot;haply&quot;, &quot;happi&quot;, &quot;hapus&quot;, &quot;haram&quot;, &quot;hards&quot;, &quot;hared&quot;, &quot;hares&quot;, &quot;harim&quot;, &quot;harks&quot;, &quot;harls&quot;, &quot;harms&quot;, &quot;harns&quot;, &quot;haros&quot;, &quot;harps&quot;, &quot;harts&quot;, &quot;hashy&quot;, &quot;hasks&quot;, &quot;hasps&quot;, &quot;hasta&quot;, &quot;hated&quot;, &quot;hates&quot;, &quot;hatha&quot;, &quot;hauds&quot;, &quot;haufs&quot;, &quot;haugh&quot;, &quot;hauld&quot;, &quot;haulm&quot;, &quot;hauls&quot;, &quot;hault&quot;, &quot;hauns&quot;, &quot;hause&quot;, &quot;haver&quot;, &quot;haves&quot;, &quot;hawed&quot;, &quot;hawks&quot;, &quot;hawms&quot;, &quot;hawse&quot;, &quot;hayed&quot;, &quot;hayer&quot;, &quot;hayey&quot;, &quot;hayle&quot;, &quot;hazan&quot;, &quot;hazed&quot;, &quot;hazer&quot;, &quot;hazes&quot;, &quot;heads&quot;, &quot;heald&quot;, &quot;heals&quot;, &quot;heame&quot;, &quot;heaps&quot;, &quot;heapy&quot;, &quot;heare&quot;, &quot;hears&quot;, &quot;heast&quot;, &quot;heats&quot;, &quot;heben&quot;, &quot;hebes&quot;, &quot;hecht&quot;, &quot;hecks&quot;, &quot;heder&quot;, &quot;hedgy&quot;, &quot;heeds&quot;, &quot;heedy&quot;, &quot;heels&quot;, &quot;heeze&quot;, &quot;hefte&quot;, &quot;hefts&quot;, &quot;heids&quot;, &quot;heigh&quot;, &quot;heils&quot;, &quot;heirs&quot;, &quot;hejab&quot;, &quot;hejra&quot;, &quot;heled&quot;, &quot;heles&quot;, &quot;helio&quot;, &quot;hells&quot;, &quot;helms&quot;, &quot;helos&quot;, &quot;helot&quot;, &quot;helps&quot;, &quot;helve&quot;, &quot;hemal&quot;, &quot;hemes&quot;, &quot;hemic&quot;, &quot;hemin&quot;, &quot;hemps&quot;, &quot;hempy&quot;, &quot;hench&quot;, &quot;hends&quot;, &quot;henge&quot;, &quot;henna&quot;, &quot;henny&quot;, &quot;henry&quot;, &quot;hents&quot;, &quot;hepar&quot;, &quot;herbs&quot;, &quot;herby&quot;, &quot;herds&quot;, &quot;heres&quot;, &quot;herls&quot;, &quot;herma&quot;, &quot;herms&quot;, &quot;herns&quot;, &quot;heros&quot;, &quot;herry&quot;, &quot;herse&quot;, &quot;hertz&quot;, &quot;herye&quot;, &quot;hesps&quot;, &quot;hests&quot;, &quot;hetes&quot;, &quot;heths&quot;, &quot;heuch&quot;, &quot;heugh&quot;, &quot;hevea&quot;, &quot;hewed&quot;, &quot;hewer&quot;, &quot;hewgh&quot;, &quot;hexad&quot;, &quot;hexed&quot;, &quot;hexer&quot;, &quot;hexes&quot;, &quot;hexyl&quot;, &quot;heyed&quot;, &quot;hiant&quot;, &quot;hicks&quot;, &quot;hided&quot;, &quot;hider&quot;, &quot;hides&quot;, &quot;hiems&quot;, &quot;highs&quot;, &quot;hight&quot;, &quot;hijab&quot;, &quot;hijra&quot;, &quot;hiked&quot;, &quot;hiker&quot;, &quot;hikes&quot;, &quot;hikoi&quot;, &quot;hilar&quot;, &quot;hilch&quot;, &quot;hillo&quot;, &quot;hills&quot;, &quot;hilts&quot;, &quot;hilum&quot;, &quot;hilus&quot;, &quot;himbo&quot;, &quot;hinau&quot;, &quot;hinds&quot;, &quot;hings&quot;, &quot;hinky&quot;, &quot;hinny&quot;, &quot;hints&quot;, &quot;hiois&quot;, &quot;hiply&quot;, &quot;hired&quot;, &quot;hiree&quot;, &quot;hirer&quot;, &quot;hires&quot;, &quot;hissy&quot;, &quot;hists&quot;, &quot;hithe&quot;, &quot;hived&quot;, &quot;hiver&quot;, &quot;hives&quot;, &quot;hizen&quot;, &quot;hoaed&quot;, &quot;hoagy&quot;, &quot;hoars&quot;, &quot;hoary&quot;, &quot;hoast&quot;, &quot;hobos&quot;, &quot;hocks&quot;, &quot;hocus&quot;, &quot;hodad&quot;, &quot;hodja&quot;, &quot;hoers&quot;, &quot;hogan&quot;, &quot;hogen&quot;, &quot;hoggs&quot;, &quot;hoghs&quot;, &quot;hohed&quot;, &quot;hoick&quot;, &quot;hoied&quot;, &quot;hoiks&quot;, &quot;hoing&quot;, &quot;hoise&quot;, &quot;hokas&quot;, &quot;hoked&quot;, &quot;hokes&quot;, &quot;hokey&quot;, &quot;hokis&quot;, &quot;hokku&quot;, &quot;hokum&quot;, &quot;holds&quot;, &quot;holed&quot;, &quot;holes&quot;, &quot;holey&quot;, &quot;holks&quot;, &quot;holla&quot;, &quot;hollo&quot;, &quot;holme&quot;, &quot;holms&quot;, &quot;holon&quot;, &quot;holos&quot;, &quot;holts&quot;, &quot;homas&quot;, &quot;homed&quot;, &quot;homes&quot;, &quot;homey&quot;, &quot;homie&quot;, &quot;homme&quot;, &quot;honan&quot;, &quot;honda&quot;, &quot;honds&quot;, &quot;honed&quot;, &quot;honer&quot;, &quot;hones&quot;, &quot;hongi&quot;, &quot;hongs&quot;, &quot;honks&quot;, &quot;honky&quot;, &quot;hooch&quot;, &quot;hoods&quot;, &quot;hoody&quot;, &quot;hooey&quot;, &quot;hoofs&quot;, &quot;hooka&quot;, &quot;hooks&quot;, &quot;hooky&quot;, &quot;hooly&quot;, &quot;hoons&quot;, &quot;hoops&quot;, &quot;hoord&quot;, &quot;hoors&quot;, &quot;hoosh&quot;, &quot;hoots&quot;, &quot;hooty&quot;, &quot;hoove&quot;, &quot;hopak&quot;, &quot;hoped&quot;, &quot;hoper&quot;, &quot;hopes&quot;, &quot;hoppy&quot;, &quot;horah&quot;, &quot;horal&quot;, &quot;horas&quot;, &quot;horis&quot;, &quot;horks&quot;, &quot;horme&quot;, &quot;horns&quot;, &quot;horst&quot;, &quot;horsy&quot;, &quot;hosed&quot;, &quot;hosel&quot;, &quot;hosen&quot;, &quot;hoser&quot;, &quot;hoses&quot;, &quot;hosey&quot;, &quot;hosta&quot;, &quot;hosts&quot;, &quot;hotch&quot;, &quot;hoten&quot;, &quot;hotty&quot;, &quot;houff&quot;, &quot;houfs&quot;, &quot;hough&quot;, &quot;houri&quot;, &quot;hours&quot;, &quot;houts&quot;, &quot;hovea&quot;, &quot;hoved&quot;, &quot;hoven&quot;, &quot;hoves&quot;, &quot;howbe&quot;, &quot;howes&quot;, &quot;howff&quot;, &quot;howfs&quot;, &quot;howks&quot;, &quot;howls&quot;, &quot;howre&quot;, &quot;howso&quot;, &quot;hoxed&quot;, &quot;hoxes&quot;, &quot;hoyas&quot;, &quot;hoyed&quot;, &quot;hoyle&quot;, &quot;hubby&quot;, &quot;hucks&quot;, &quot;hudna&quot;, &quot;hudud&quot;, &quot;huers&quot;, &quot;huffs&quot;, &quot;huffy&quot;, &quot;huger&quot;, &quot;huggy&quot;, &quot;huhus&quot;, &quot;huias&quot;, &quot;hulas&quot;, &quot;hules&quot;, &quot;hulks&quot;, &quot;hulky&quot;, &quot;hullo&quot;, &quot;hulls&quot;, &quot;hully&quot;, &quot;humas&quot;, &quot;humfs&quot;, &quot;humic&quot;, &quot;humps&quot;, &quot;humpy&quot;, &quot;hunks&quot;, &quot;hunts&quot;, &quot;hurds&quot;, &quot;hurls&quot;, &quot;hurly&quot;, &quot;hurra&quot;, &quot;hurst&quot;, &quot;hurts&quot;, &quot;hushy&quot;, &quot;husks&quot;, &quot;husos&quot;, &quot;hutia&quot;, &quot;huzza&quot;, &quot;huzzy&quot;, &quot;hwyls&quot;, &quot;hydra&quot;, &quot;hyens&quot;, &quot;hygge&quot;, &quot;hying&quot;, &quot;hykes&quot;, &quot;hylas&quot;, &quot;hyleg&quot;, &quot;hyles&quot;, &quot;hylic&quot;, &quot;hymns&quot;, &quot;hynde&quot;, &quot;hyoid&quot;, &quot;hyped&quot;, &quot;hypes&quot;, &quot;hypha&quot;, &quot;hyphy&quot;, &quot;hypos&quot;, &quot;hyrax&quot;, &quot;hyson&quot;, &quot;hythe&quot;, &quot;iambi&quot;, &quot;iambs&quot;, &quot;ibrik&quot;, &quot;icers&quot;, &quot;iched&quot;, &quot;iches&quot;, &quot;ichor&quot;, &quot;icier&quot;, &quot;icker&quot;, &quot;ickle&quot;, &quot;icons&quot;, &quot;ictal&quot;, &quot;ictic&quot;, &quot;ictus&quot;, &quot;idant&quot;, &quot;ideas&quot;, &quot;idees&quot;, &quot;ident&quot;, &quot;idled&quot;, &quot;idles&quot;, &quot;idola&quot;, &quot;idols&quot;, &quot;idyls&quot;, &quot;iftar&quot;, &quot;igapo&quot;, &quot;igged&quot;, &quot;iglus&quot;, &quot;ihram&quot;, &quot;ikans&quot;, &quot;ikats&quot;, &quot;ikons&quot;, &quot;ileac&quot;, &quot;ileal&quot;, &quot;ileum&quot;, &quot;ileus&quot;, &quot;iliad&quot;, &quot;ilial&quot;, &quot;ilium&quot;, &quot;iller&quot;, &quot;illth&quot;, &quot;imago&quot;, &quot;imams&quot;, &quot;imari&quot;, &quot;imaum&quot;, &quot;imbar&quot;, &quot;imbed&quot;, &quot;imide&quot;, &quot;imido&quot;, &quot;imids&quot;, &quot;imine&quot;, &quot;imino&quot;, &quot;immew&quot;, &quot;immit&quot;, &quot;immix&quot;, &quot;imped&quot;, &quot;impis&quot;, &quot;impot&quot;, &quot;impro&quot;, &quot;imshi&quot;, &quot;imshy&quot;, &quot;inapt&quot;, &quot;inarm&quot;, &quot;inbye&quot;, &quot;incel&quot;, &quot;incle&quot;, &quot;incog&quot;, &quot;incus&quot;, &quot;incut&quot;, &quot;indew&quot;, &quot;india&quot;, &quot;indie&quot;, &quot;indol&quot;, &quot;indow&quot;, &quot;indri&quot;, &quot;indue&quot;, &quot;inerm&quot;, &quot;infix&quot;, &quot;infos&quot;, &quot;infra&quot;, &quot;ingan&quot;, &quot;ingle&quot;, &quot;inion&quot;, &quot;inked&quot;, &quot;inker&quot;, &quot;inkle&quot;, &quot;inned&quot;, &quot;innit&quot;, &quot;inorb&quot;, &quot;inrun&quot;, &quot;inset&quot;, &quot;inspo&quot;, &quot;intel&quot;, &quot;intil&quot;, &quot;intis&quot;, &quot;intra&quot;, &quot;inula&quot;, &quot;inure&quot;, &quot;inurn&quot;, &quot;inust&quot;, &quot;invar&quot;, &quot;inwit&quot;, &quot;iodic&quot;, &quot;iodid&quot;, &quot;iodin&quot;, &quot;iotas&quot;, &quot;ippon&quot;, &quot;irade&quot;, &quot;irids&quot;, &quot;iring&quot;, &quot;irked&quot;, &quot;iroko&quot;, &quot;irone&quot;, &quot;irons&quot;, &quot;isbas&quot;, &quot;ishes&quot;, &quot;isled&quot;, &quot;isles&quot;, &quot;isnae&quot;, &quot;issei&quot;, &quot;istle&quot;, &quot;items&quot;, &quot;ither&quot;, &quot;ivied&quot;, &quot;ivies&quot;, &quot;ixias&quot;, &quot;ixnay&quot;, &quot;ixora&quot;, &quot;ixtle&quot;, &quot;izard&quot;, &quot;izars&quot;, &quot;izzat&quot;, &quot;jaaps&quot;, &quot;jabot&quot;, &quot;jacal&quot;, &quot;jacks&quot;, &quot;jacky&quot;, &quot;jaded&quot;, &quot;jades&quot;, &quot;jafas&quot;, &quot;jaffa&quot;, &quot;jagas&quot;, &quot;jager&quot;, &quot;jaggs&quot;, &quot;jaggy&quot;, &quot;jagir&quot;, &quot;jagra&quot;, &quot;jails&quot;, &quot;jaker&quot;, &quot;jakes&quot;, &quot;jakey&quot;, &quot;jalap&quot;, &quot;jalop&quot;, &quot;jambe&quot;, &quot;jambo&quot;, &quot;jambs&quot;, &quot;jambu&quot;, &quot;james&quot;, &quot;jammy&quot;, &quot;jamon&quot;, &quot;janes&quot;, &quot;janns&quot;, &quot;janny&quot;, &quot;janty&quot;, &quot;japan&quot;, &quot;japed&quot;, &quot;japer&quot;, &quot;japes&quot;, &quot;jarks&quot;, &quot;jarls&quot;, &quot;jarps&quot;, &quot;jarta&quot;, &quot;jarul&quot;, &quot;jasey&quot;, &quot;jaspe&quot;, &quot;jasps&quot;, &quot;jatos&quot;, &quot;jauks&quot;, &quot;jaups&quot;, &quot;javas&quot;, &quot;javel&quot;, &quot;jawan&quot;, &quot;jawed&quot;, &quot;jaxie&quot;, &quot;jeans&quot;, &quot;jeats&quot;, &quot;jebel&quot;, &quot;jedis&quot;, &quot;jeels&quot;, &quot;jeely&quot;, &quot;jeeps&quot;, &quot;jeers&quot;, &quot;jeeze&quot;, &quot;jefes&quot;, &quot;jeffs&quot;, &quot;jehad&quot;, &quot;jehus&quot;, &quot;jelab&quot;, &quot;jello&quot;, &quot;jells&quot;, &quot;jembe&quot;, &quot;jemmy&quot;, &quot;jenny&quot;, &quot;jeons&quot;, &quot;jerid&quot;, &quot;jerks&quot;, &quot;jerry&quot;, &quot;jesse&quot;, &quot;jests&quot;, &quot;jesus&quot;, &quot;jetes&quot;, &quot;jeton&quot;, &quot;jeune&quot;, &quot;jewed&quot;, &quot;jewie&quot;, &quot;jhala&quot;, &quot;jiaos&quot;, &quot;jibba&quot;, &quot;jibbs&quot;, &quot;jibed&quot;, &quot;jiber&quot;, &quot;jibes&quot;, &quot;jiffs&quot;, &quot;jiggy&quot;, &quot;jigot&quot;, &quot;jihad&quot;, &quot;jills&quot;, &quot;jilts&quot;, &quot;jimmy&quot;, &quot;jimpy&quot;, &quot;jingo&quot;, &quot;jinks&quot;, &quot;jinne&quot;, &quot;jinni&quot;, &quot;jinns&quot;, &quot;jirds&quot;, &quot;jirga&quot;, &quot;jirre&quot;, &quot;jisms&quot;, &quot;jived&quot;, &quot;jiver&quot;, &quot;jives&quot;, &quot;jivey&quot;, &quot;jnana&quot;, &quot;jobed&quot;, &quot;jobes&quot;, &quot;jocko&quot;, &quot;jocks&quot;, &quot;jocky&quot;, &quot;jocos&quot;, &quot;jodel&quot;, &quot;joeys&quot;, &quot;johns&quot;, &quot;joins&quot;, &quot;joked&quot;, &quot;jokes&quot;, &quot;jokey&quot;, &quot;jokol&quot;, &quot;joled&quot;, &quot;joles&quot;, &quot;jolls&quot;, &quot;jolts&quot;, &quot;jolty&quot;, &quot;jomon&quot;, &quot;jomos&quot;, &quot;jones&quot;, &quot;jongs&quot;, &quot;jonty&quot;, &quot;jooks&quot;, &quot;joram&quot;, &quot;jorum&quot;, &quot;jotas&quot;, &quot;jotty&quot;, &quot;jotun&quot;, &quot;joual&quot;, &quot;jougs&quot;, &quot;jouks&quot;, &quot;joule&quot;, &quot;jours&quot;, &quot;jowar&quot;, &quot;jowed&quot;, &quot;jowls&quot;, &quot;jowly&quot;, &quot;joyed&quot;, &quot;jubas&quot;, &quot;jubes&quot;, &quot;jucos&quot;, &quot;judas&quot;, &quot;judgy&quot;, &quot;judos&quot;, &quot;jugal&quot;, &quot;jugum&quot;, &quot;jujus&quot;, &quot;juked&quot;, &quot;jukes&quot;, &quot;jukus&quot;, &quot;julep&quot;, &quot;jumar&quot;, &quot;jumby&quot;, &quot;jumps&quot;, &quot;junco&quot;, &quot;junks&quot;, &quot;junky&quot;, &quot;jupes&quot;, &quot;jupon&quot;, &quot;jural&quot;, &quot;jurat&quot;, &quot;jurel&quot;, &quot;jures&quot;, &quot;justs&quot;, &quot;jutes&quot;, &quot;jutty&quot;, &quot;juves&quot;, &quot;juvie&quot;, &quot;kaama&quot;, &quot;kabab&quot;, &quot;kabar&quot;, &quot;kabob&quot;, &quot;kacha&quot;, &quot;kacks&quot;, &quot;kadai&quot;, &quot;kades&quot;, &quot;kadis&quot;, &quot;kafir&quot;, &quot;kagos&quot;, &quot;kagus&quot;, &quot;kahal&quot;, &quot;kaiak&quot;, &quot;kaids&quot;, &quot;kaies&quot;, &quot;kaifs&quot;, &quot;kaika&quot;, &quot;kaiks&quot;, &quot;kails&quot;, &quot;kaims&quot;, &quot;kaing&quot;, &quot;kains&quot;, &quot;kakas&quot;, &quot;kakis&quot;, &quot;kalam&quot;, &quot;kales&quot;, &quot;kalif&quot;, &quot;kalis&quot;, &quot;kalpa&quot;, &quot;kamas&quot;, &quot;kames&quot;, &quot;kamik&quot;, &quot;kamis&quot;, &quot;kamme&quot;, &quot;kanae&quot;, &quot;kanas&quot;, &quot;kandy&quot;, &quot;kaneh&quot;, &quot;kanes&quot;, &quot;kanga&quot;, &quot;kangs&quot;, &quot;kanji&quot;, &quot;kants&quot;, &quot;kanzu&quot;, &quot;kaons&quot;, &quot;kapas&quot;, &quot;kaphs&quot;, &quot;kapok&quot;, &quot;kapow&quot;, &quot;kapus&quot;, &quot;kaput&quot;, &quot;karas&quot;, &quot;karat&quot;, &quot;karks&quot;, &quot;karns&quot;, &quot;karoo&quot;, &quot;karos&quot;, &quot;karri&quot;, &quot;karst&quot;, &quot;karsy&quot;, &quot;karts&quot;, &quot;karzy&quot;, &quot;kasha&quot;, &quot;kasme&quot;, &quot;katal&quot;, &quot;katas&quot;, &quot;katis&quot;, &quot;katti&quot;, &quot;kaugh&quot;, &quot;kauri&quot;, &quot;kauru&quot;, &quot;kaury&quot;, &quot;kaval&quot;, &quot;kavas&quot;, &quot;kawas&quot;, &quot;kawau&quot;, &quot;kawed&quot;, &quot;kayle&quot;, &quot;kayos&quot;, &quot;kazis&quot;, &quot;kazoo&quot;, &quot;kbars&quot;, &quot;kebar&quot;, &quot;kebob&quot;, &quot;kecks&quot;, &quot;kedge&quot;, &quot;kedgy&quot;, &quot;keech&quot;, &quot;keefs&quot;, &quot;keeks&quot;, &quot;keels&quot;, &quot;keema&quot;, &quot;keeno&quot;, &quot;keens&quot;, &quot;keeps&quot;, &quot;keets&quot;, &quot;keeve&quot;, &quot;kefir&quot;, &quot;kehua&quot;, &quot;keirs&quot;, &quot;kelep&quot;, &quot;kelim&quot;, &quot;kells&quot;, &quot;kelly&quot;, &quot;kelps&quot;, &quot;kelpy&quot;, &quot;kelts&quot;, &quot;kelty&quot;, &quot;kembo&quot;, &quot;kembs&quot;, &quot;kemps&quot;, &quot;kempt&quot;, &quot;kempy&quot;, &quot;kenaf&quot;, &quot;kench&quot;, &quot;kendo&quot;, &quot;kenos&quot;, &quot;kente&quot;, &quot;kents&quot;, &quot;kepis&quot;, &quot;kerbs&quot;, &quot;kerel&quot;, &quot;kerfs&quot;, &quot;kerky&quot;, &quot;kerma&quot;, &quot;kerne&quot;, &quot;kerns&quot;, &quot;keros&quot;, &quot;kerry&quot;, &quot;kerve&quot;, &quot;kesar&quot;, &quot;kests&quot;, &quot;ketas&quot;, &quot;ketch&quot;, &quot;ketes&quot;, &quot;ketol&quot;, &quot;kevel&quot;, &quot;kevil&quot;, &quot;kexes&quot;, &quot;keyed&quot;, &quot;keyer&quot;, &quot;khadi&quot;, &quot;khafs&quot;, &quot;khans&quot;, &quot;khaph&quot;, &quot;khats&quot;, &quot;khaya&quot;, &quot;khazi&quot;, &quot;kheda&quot;, &quot;kheth&quot;, &quot;khets&quot;, &quot;khoja&quot;, &quot;khors&quot;, &quot;khoum&quot;, &quot;khuds&quot;, &quot;kiaat&quot;, &quot;kiack&quot;, &quot;kiang&quot;, &quot;kibbe&quot;, &quot;kibbi&quot;, &quot;kibei&quot;, &quot;kibes&quot;, &quot;kibla&quot;, &quot;kicks&quot;, &quot;kicky&quot;, &quot;kiddo&quot;, &quot;kiddy&quot;, &quot;kidel&quot;, &quot;kidge&quot;, &quot;kiefs&quot;, &quot;kiers&quot;, &quot;kieve&quot;, &quot;kievs&quot;, &quot;kight&quot;, &quot;kikoi&quot;, &quot;kiley&quot;, &quot;kilim&quot;, &quot;kills&quot;, &quot;kilns&quot;, &quot;kilos&quot;, &quot;kilps&quot;, &quot;kilts&quot;, &quot;kilty&quot;, &quot;kimbo&quot;, &quot;kinas&quot;, &quot;kinda&quot;, &quot;kinds&quot;, &quot;kindy&quot;, &quot;kines&quot;, &quot;kings&quot;, &quot;kinin&quot;, &quot;kinks&quot;, &quot;kinos&quot;, &quot;kiore&quot;, &quot;kipes&quot;, &quot;kippa&quot;, &quot;kipps&quot;, &quot;kirby&quot;, &quot;kirks&quot;, &quot;kirns&quot;, &quot;kirri&quot;, &quot;kisan&quot;, &quot;kissy&quot;, &quot;kists&quot;, &quot;kited&quot;, &quot;kiter&quot;, &quot;kites&quot;, &quot;kithe&quot;, &quot;kiths&quot;, &quot;kitul&quot;, &quot;kivas&quot;, &quot;kiwis&quot;, &quot;klang&quot;, &quot;klaps&quot;, &quot;klett&quot;, &quot;klick&quot;, &quot;klieg&quot;, &quot;kliks&quot;, &quot;klong&quot;, &quot;kloof&quot;, &quot;kluge&quot;, &quot;klutz&quot;, &quot;knags&quot;, &quot;knaps&quot;, &quot;knarl&quot;, &quot;knars&quot;, &quot;knaur&quot;, &quot;knawe&quot;, &quot;knees&quot;, &quot;knell&quot;, &quot;knish&quot;, &quot;knits&quot;, &quot;knive&quot;, &quot;knobs&quot;, &quot;knops&quot;, &quot;knosp&quot;, &quot;knots&quot;, &quot;knout&quot;, &quot;knowe&quot;, &quot;knows&quot;, &quot;knubs&quot;, &quot;knurl&quot;, &quot;knurr&quot;, &quot;knurs&quot;, &quot;knuts&quot;, &quot;koans&quot;, &quot;koaps&quot;, &quot;koban&quot;, &quot;kobos&quot;, &quot;koels&quot;, &quot;koffs&quot;, &quot;kofta&quot;, &quot;kogal&quot;, &quot;kohas&quot;, &quot;kohen&quot;, &quot;kohls&quot;, &quot;koine&quot;, &quot;kojis&quot;, &quot;kokam&quot;, &quot;kokas&quot;, &quot;koker&quot;, &quot;kokra&quot;, &quot;kokum&quot;, &quot;kolas&quot;, &quot;kolos&quot;, &quot;kombu&quot;, &quot;konbu&quot;, &quot;kondo&quot;, &quot;konks&quot;, &quot;kooks&quot;, &quot;kooky&quot;, &quot;koori&quot;, &quot;kopek&quot;, &quot;kophs&quot;, &quot;kopje&quot;, &quot;koppa&quot;, &quot;korai&quot;, &quot;koras&quot;, &quot;korat&quot;, &quot;kores&quot;, &quot;korma&quot;, &quot;koros&quot;, &quot;korun&quot;, &quot;korus&quot;, &quot;koses&quot;, &quot;kotch&quot;, &quot;kotos&quot;, &quot;kotow&quot;, &quot;koura&quot;, &quot;kraal&quot;, &quot;krabs&quot;, &quot;kraft&quot;, &quot;krais&quot;, &quot;krait&quot;, &quot;krang&quot;, &quot;krans&quot;, &quot;kranz&quot;, &quot;kraut&quot;, &quot;krays&quot;, &quot;kreep&quot;, &quot;kreng&quot;, &quot;krewe&quot;, &quot;krona&quot;, &quot;krone&quot;, &quot;kroon&quot;, &quot;krubi&quot;, &quot;krunk&quot;, &quot;ksars&quot;, &quot;kubie&quot;, &quot;kudos&quot;, &quot;kudus&quot;, &quot;kudzu&quot;, &quot;kufis&quot;, &quot;kugel&quot;, &quot;kuias&quot;, &quot;kukri&quot;, &quot;kukus&quot;, &quot;kulak&quot;, &quot;kulan&quot;, &quot;kulas&quot;, &quot;kulfi&quot;, &quot;kumis&quot;, &quot;kumys&quot;, &quot;kuris&quot;, &quot;kurre&quot;, &quot;kurta&quot;, &quot;kurus&quot;, &quot;kusso&quot;, &quot;kutas&quot;, &quot;kutch&quot;, &quot;kutis&quot;, &quot;kutus&quot;, &quot;kuzus&quot;, &quot;kvass&quot;, &quot;kvell&quot;, &quot;kwela&quot;, &quot;kyack&quot;, &quot;kyaks&quot;, &quot;kyang&quot;, &quot;kyars&quot;, &quot;kyats&quot;, &quot;kybos&quot;, &quot;kydst&quot;, &quot;kyles&quot;, &quot;kylie&quot;, &quot;kylin&quot;, &quot;kylix&quot;, &quot;kyloe&quot;, &quot;kynde&quot;, &quot;kynds&quot;, &quot;kypes&quot;, &quot;kyrie&quot;, &quot;kytes&quot;, &quot;kythe&quot;, &quot;laari&quot;, &quot;labda&quot;, &quot;labia&quot;, &quot;labis&quot;, &quot;labra&quot;, &quot;laced&quot;, &quot;lacer&quot;, &quot;laces&quot;, &quot;lacet&quot;, &quot;lacey&quot;, &quot;lacks&quot;, &quot;laddy&quot;, &quot;laded&quot;, &quot;lader&quot;, &quot;lades&quot;, &quot;laers&quot;, &quot;laevo&quot;, &quot;lagan&quot;, &quot;lahal&quot;, &quot;lahar&quot;, &quot;laich&quot;, &quot;laics&quot;, &quot;laids&quot;, &quot;laigh&quot;, &quot;laika&quot;, &quot;laiks&quot;, &quot;laird&quot;, &quot;lairs&quot;, &quot;lairy&quot;, &quot;laith&quot;, &quot;laity&quot;, &quot;laked&quot;, &quot;laker&quot;, &quot;lakes&quot;, &quot;lakhs&quot;, &quot;lakin&quot;, &quot;laksa&quot;, &quot;laldy&quot;, &quot;lalls&quot;, &quot;lamas&quot;, &quot;lambs&quot;, &quot;lamby&quot;, &quot;lamed&quot;, &quot;lamer&quot;, &quot;lames&quot;, &quot;lamia&quot;, &quot;lammy&quot;, &quot;lamps&quot;, &quot;lanai&quot;, &quot;lanas&quot;, &quot;lanch&quot;, &quot;lande&quot;, &quot;lands&quot;, &quot;lanes&quot;, &quot;lanks&quot;, &quot;lants&quot;, &quot;lapin&quot;, &quot;lapis&quot;, &quot;lapje&quot;, &quot;larch&quot;, &quot;lards&quot;, &quot;lardy&quot;, &quot;laree&quot;, &quot;lares&quot;, &quot;largo&quot;, &quot;laris&quot;, &quot;larks&quot;, &quot;larky&quot;, &quot;larns&quot;, &quot;larnt&quot;, &quot;larum&quot;, &quot;lased&quot;, &quot;laser&quot;, &quot;lases&quot;, &quot;lassi&quot;, &quot;lassu&quot;, &quot;lassy&quot;, &quot;lasts&quot;, &quot;latah&quot;, &quot;lated&quot;, &quot;laten&quot;, &quot;latex&quot;, &quot;lathi&quot;, &quot;laths&quot;, &quot;lathy&quot;, &quot;latke&quot;, &quot;latus&quot;, &quot;lauan&quot;, &quot;lauch&quot;, &quot;lauds&quot;, &quot;laufs&quot;, &quot;laund&quot;, &quot;laura&quot;, &quot;laval&quot;, &quot;lavas&quot;, &quot;laved&quot;, &quot;laver&quot;, &quot;laves&quot;, &quot;lavra&quot;, &quot;lavvy&quot;, &quot;lawed&quot;, &quot;lawer&quot;, &quot;lawin&quot;, &quot;lawks&quot;, &quot;lawns&quot;, &quot;lawny&quot;, &quot;laxed&quot;, &quot;laxer&quot;, &quot;laxes&quot;, &quot;laxly&quot;, &quot;layed&quot;, &quot;layin&quot;, &quot;layup&quot;, &quot;lazar&quot;, &quot;lazed&quot;, &quot;lazes&quot;, &quot;lazos&quot;, &quot;lazzi&quot;, &quot;lazzo&quot;, &quot;leads&quot;, &quot;leady&quot;, &quot;leafs&quot;, &quot;leaks&quot;, &quot;leams&quot;, &quot;leans&quot;, &quot;leany&quot;, &quot;leaps&quot;, &quot;leare&quot;, &quot;lears&quot;, &quot;leary&quot;, &quot;leats&quot;, &quot;leavy&quot;, &quot;leaze&quot;, &quot;leben&quot;, &quot;leccy&quot;, &quot;ledes&quot;, &quot;ledgy&quot;, &quot;ledum&quot;, &quot;leear&quot;, &quot;leeks&quot;, &quot;leeps&quot;, &quot;leers&quot;, &quot;leese&quot;, &quot;leets&quot;, &quot;leeze&quot;, &quot;lefte&quot;, &quot;lefts&quot;, &quot;leger&quot;, &quot;leges&quot;, &quot;legge&quot;, &quot;leggo&quot;, &quot;legit&quot;, &quot;lehrs&quot;, &quot;lehua&quot;, &quot;leirs&quot;, &quot;leish&quot;, &quot;leman&quot;, &quot;lemed&quot;, &quot;lemel&quot;, &quot;lemes&quot;, &quot;lemma&quot;, &quot;lemme&quot;, &quot;lends&quot;, &quot;lenes&quot;, &quot;lengs&quot;, &quot;lenis&quot;, &quot;lenos&quot;, &quot;lense&quot;, &quot;lenti&quot;, &quot;lento&quot;, &quot;leone&quot;, &quot;lepid&quot;, &quot;lepra&quot;, &quot;lepta&quot;, &quot;lered&quot;, &quot;leres&quot;, &quot;lerps&quot;, &quot;leses&quot;, &quot;lests&quot;, &quot;letch&quot;, &quot;lethe&quot;, &quot;letup&quot;, &quot;leuch&quot;, &quot;leuco&quot;, &quot;leuds&quot;, &quot;leugh&quot;, &quot;levas&quot;, &quot;levee&quot;, &quot;leves&quot;, &quot;levin&quot;, &quot;levis&quot;, &quot;lewis&quot;, &quot;lexes&quot;, &quot;lexis&quot;, &quot;lezes&quot;, &quot;lezza&quot;, &quot;lezzy&quot;, &quot;liana&quot;, &quot;liane&quot;, &quot;liang&quot;, &quot;liard&quot;, &quot;liars&quot;, &quot;liart&quot;, &quot;liber&quot;, &quot;libra&quot;, &quot;libri&quot;, &quot;lichi&quot;, &quot;licht&quot;, &quot;licit&quot;, &quot;licks&quot;, &quot;lidar&quot;, &quot;lidos&quot;, &quot;liefs&quot;, &quot;liens&quot;, &quot;liers&quot;, &quot;lieus&quot;, &quot;lieve&quot;, &quot;lifer&quot;, &quot;lifes&quot;, &quot;lifts&quot;, &quot;ligan&quot;, &quot;liger&quot;, &quot;ligge&quot;, &quot;ligne&quot;, &quot;liked&quot;, &quot;liker&quot;, &quot;likes&quot;, &quot;likin&quot;, &quot;lills&quot;, &quot;lilos&quot;, &quot;lilts&quot;, &quot;liman&quot;, &quot;limas&quot;, &quot;limax&quot;, &quot;limba&quot;, &quot;limbi&quot;, &quot;limbs&quot;, &quot;limby&quot;, &quot;limed&quot;, &quot;limen&quot;, &quot;limes&quot;, &quot;limey&quot;, &quot;limma&quot;, &quot;limns&quot;, &quot;limos&quot;, &quot;limpa&quot;, &quot;limps&quot;, &quot;linac&quot;, &quot;linch&quot;, &quot;linds&quot;, &quot;lindy&quot;, &quot;lined&quot;, &quot;lines&quot;, &quot;liney&quot;, &quot;linga&quot;, &quot;lings&quot;, &quot;lingy&quot;, &quot;linin&quot;, &quot;links&quot;, &quot;linky&quot;, &quot;linns&quot;, &quot;linny&quot;, &quot;linos&quot;, &quot;lints&quot;, &quot;linty&quot;, &quot;linum&quot;, &quot;linux&quot;, &quot;lions&quot;, &quot;lipas&quot;, &quot;lipes&quot;, &quot;lipin&quot;, &quot;lipos&quot;, &quot;lippy&quot;, &quot;liras&quot;, &quot;lirks&quot;, &quot;lirot&quot;, &quot;lisks&quot;, &quot;lisle&quot;, &quot;lisps&quot;, &quot;lists&quot;, &quot;litai&quot;, &quot;litas&quot;, &quot;lited&quot;, &quot;liter&quot;, &quot;lites&quot;, &quot;litho&quot;, &quot;liths&quot;, &quot;litre&quot;, &quot;lived&quot;, &quot;liven&quot;, &quot;lives&quot;, &quot;livor&quot;, &quot;livre&quot;, &quot;llano&quot;, &quot;loach&quot;, &quot;loads&quot;, &quot;loafs&quot;, &quot;loams&quot;, &quot;loans&quot;, &quot;loast&quot;, &quot;loave&quot;, &quot;lobar&quot;, &quot;lobed&quot;, &quot;lobes&quot;, &quot;lobos&quot;, &quot;lobus&quot;, &quot;loche&quot;, &quot;lochs&quot;, &quot;locie&quot;, &quot;locis&quot;, &quot;locks&quot;, &quot;locos&quot;, &quot;locum&quot;, &quot;loden&quot;, &quot;lodes&quot;, &quot;loess&quot;, &quot;lofts&quot;, &quot;logan&quot;, &quot;loges&quot;, &quot;loggy&quot;, &quot;logia&quot;, &quot;logie&quot;, &quot;logoi&quot;, &quot;logon&quot;, &quot;logos&quot;, &quot;lohan&quot;, &quot;loids&quot;, &quot;loins&quot;, &quot;loipe&quot;, &quot;loirs&quot;, &quot;lokes&quot;, &quot;lolls&quot;, &quot;lolly&quot;, &quot;lolog&quot;, &quot;lomas&quot;, &quot;lomed&quot;, &quot;lomes&quot;, &quot;loner&quot;, &quot;longa&quot;, &quot;longe&quot;, &quot;longs&quot;, &quot;looby&quot;, &quot;looed&quot;, &quot;looey&quot;, &quot;loofa&quot;, &quot;loofs&quot;, &quot;looie&quot;, &quot;looks&quot;, &quot;looky&quot;, &quot;looms&quot;, &quot;loons&quot;, &quot;loony&quot;, &quot;loops&quot;, &quot;loord&quot;, &quot;loots&quot;, &quot;loped&quot;, &quot;loper&quot;, &quot;lopes&quot;, &quot;loppy&quot;, &quot;loral&quot;, &quot;loran&quot;, &quot;lords&quot;, &quot;lordy&quot;, &quot;lorel&quot;, &quot;lores&quot;, &quot;loric&quot;, &quot;loris&quot;, &quot;losed&quot;, &quot;losel&quot;, &quot;losen&quot;, &quot;loses&quot;, &quot;lossy&quot;, &quot;lotah&quot;, &quot;lotas&quot;, &quot;lotes&quot;, &quot;lotic&quot;, &quot;lotos&quot;, &quot;lotsa&quot;, &quot;lotta&quot;, &quot;lotte&quot;, &quot;lotto&quot;, &quot;lotus&quot;, &quot;loued&quot;, &quot;lough&quot;, &quot;louie&quot;, &quot;louis&quot;, &quot;louma&quot;, &quot;lound&quot;, &quot;louns&quot;, &quot;loupe&quot;, &quot;loups&quot;, &quot;loure&quot;, &quot;lours&quot;, &quot;loury&quot;, &quot;louts&quot;, &quot;lovat&quot;, &quot;loved&quot;, &quot;loves&quot;, &quot;lovey&quot;, &quot;lovie&quot;, &quot;lowan&quot;, &quot;lowed&quot;, &quot;lowes&quot;, &quot;lownd&quot;, &quot;lowne&quot;, &quot;lowns&quot;, &quot;lowps&quot;, &quot;lowry&quot;, &quot;lowse&quot;, &quot;lowts&quot;, &quot;loxed&quot;, &quot;loxes&quot;, &quot;lozen&quot;, &quot;luach&quot;, &quot;luaus&quot;, &quot;lubed&quot;, &quot;lubes&quot;, &quot;lubra&quot;, &quot;luces&quot;, &quot;lucks&quot;, &quot;lucre&quot;, &quot;ludes&quot;, &quot;ludic&quot;, &quot;ludos&quot;, &quot;luffa&quot;, &quot;luffs&quot;, &quot;luged&quot;, &quot;luger&quot;, &quot;luges&quot;, &quot;lulls&quot;, &quot;lulus&quot;, &quot;lumas&quot;, &quot;lumbi&quot;, &quot;lumme&quot;, &quot;lummy&quot;, &quot;lumps&quot;, &quot;lunas&quot;, &quot;lunes&quot;, &quot;lunet&quot;, &quot;lungi&quot;, &quot;lungs&quot;, &quot;lunks&quot;, &quot;lunts&quot;, &quot;lupin&quot;, &quot;lured&quot;, &quot;lurer&quot;, &quot;lures&quot;, &quot;lurex&quot;, &quot;lurgi&quot;, &quot;lurgy&quot;, &quot;lurks&quot;, &quot;lurry&quot;, &quot;lurve&quot;, &quot;luser&quot;, &quot;lushy&quot;, &quot;lusks&quot;, &quot;lusts&quot;, &quot;lusus&quot;, &quot;lutea&quot;, &quot;luted&quot;, &quot;luter&quot;, &quot;lutes&quot;, &quot;luvvy&quot;, &quot;luxed&quot;, &quot;luxer&quot;, &quot;luxes&quot;, &quot;lweis&quot;, &quot;lyams&quot;, &quot;lyard&quot;, &quot;lyart&quot;, &quot;lyase&quot;, &quot;lycea&quot;, &quot;lycee&quot;, &quot;lycra&quot;, &quot;lymes&quot;, &quot;lynes&quot;, &quot;lyres&quot;, &quot;lysed&quot;, &quot;lyses&quot;, &quot;lysin&quot;, &quot;lysis&quot;, &quot;lysol&quot;, &quot;lyssa&quot;, &quot;lyted&quot;, &quot;lytes&quot;, &quot;lythe&quot;, &quot;lytic&quot;, &quot;lytta&quot;, &quot;maaed&quot;, &quot;maare&quot;, &quot;maars&quot;, &quot;mabes&quot;, &quot;macas&quot;, &quot;maced&quot;, &quot;macer&quot;, &quot;maces&quot;, &quot;mache&quot;, &quot;machi&quot;, &quot;machs&quot;, &quot;macks&quot;, &quot;macle&quot;, &quot;macon&quot;, &quot;madge&quot;, &quot;madid&quot;, &quot;madre&quot;, &quot;maerl&quot;, &quot;mafic&quot;, &quot;mages&quot;, &quot;maggs&quot;, &quot;magot&quot;, &quot;magus&quot;, &quot;mahoe&quot;, &quot;mahua&quot;, &quot;mahwa&quot;, &quot;maids&quot;, &quot;maiko&quot;, &quot;maiks&quot;, &quot;maile&quot;, &quot;maill&quot;, &quot;mails&quot;, &quot;maims&quot;, &quot;mains&quot;, &quot;maire&quot;, &quot;mairs&quot;, &quot;maise&quot;, &quot;maist&quot;, &quot;makar&quot;, &quot;makes&quot;, &quot;makis&quot;, &quot;makos&quot;, &quot;malam&quot;, &quot;malar&quot;, &quot;malas&quot;, &quot;malax&quot;, &quot;males&quot;, &quot;malic&quot;, &quot;malik&quot;, &quot;malis&quot;, &quot;malls&quot;, &quot;malms&quot;, &quot;malmy&quot;, &quot;malts&quot;, &quot;malty&quot;, &quot;malus&quot;, &quot;malva&quot;, &quot;malwa&quot;, &quot;mamas&quot;, &quot;mamba&quot;, &quot;mamee&quot;, &quot;mamey&quot;, &quot;mamie&quot;, &quot;manas&quot;, &quot;manat&quot;, &quot;mandi&quot;, &quot;maneb&quot;, &quot;maned&quot;, &quot;maneh&quot;, &quot;manes&quot;, &quot;manet&quot;, &quot;mangs&quot;, &quot;manis&quot;, &quot;manky&quot;, &quot;manna&quot;, &quot;manos&quot;, &quot;manse&quot;, &quot;manta&quot;, &quot;manto&quot;, &quot;manty&quot;, &quot;manul&quot;, &quot;manus&quot;, &quot;mapau&quot;, &quot;maqui&quot;, &quot;marae&quot;, &quot;marah&quot;, &quot;maras&quot;, &quot;marcs&quot;, &quot;mardy&quot;, &quot;mares&quot;, &quot;marge&quot;, &quot;margs&quot;, &quot;maria&quot;, &quot;marid&quot;, &quot;marka&quot;, &quot;marks&quot;, &quot;marle&quot;, &quot;marls&quot;, &quot;marly&quot;, &quot;marms&quot;, &quot;maron&quot;, &quot;maror&quot;, &quot;marra&quot;, &quot;marri&quot;, &quot;marse&quot;, &quot;marts&quot;, &quot;marvy&quot;, &quot;masas&quot;, &quot;mased&quot;, &quot;maser&quot;, &quot;mases&quot;, &quot;mashy&quot;, &quot;masks&quot;, &quot;massa&quot;, &quot;massy&quot;, &quot;masts&quot;, &quot;masty&quot;, &quot;masus&quot;, &quot;matai&quot;, &quot;mated&quot;, &quot;mater&quot;, &quot;mates&quot;, &quot;maths&quot;, &quot;matin&quot;, &quot;matlo&quot;, &quot;matte&quot;, &quot;matts&quot;, &quot;matza&quot;, &quot;matzo&quot;, &quot;mauby&quot;, &quot;mauds&quot;, &quot;mauls&quot;, &quot;maund&quot;, &quot;mauri&quot;, &quot;mausy&quot;, &quot;mauts&quot;, &quot;mauzy&quot;, &quot;maven&quot;, &quot;mavie&quot;, &quot;mavin&quot;, &quot;mavis&quot;, &quot;mawed&quot;, &quot;mawks&quot;, &quot;mawky&quot;, &quot;mawns&quot;, &quot;mawrs&quot;, &quot;maxed&quot;, &quot;maxes&quot;, &quot;maxis&quot;, &quot;mayan&quot;, &quot;mayas&quot;, &quot;mayed&quot;, &quot;mayos&quot;, &quot;mayst&quot;, &quot;mazed&quot;, &quot;mazer&quot;, &quot;mazes&quot;, &quot;mazey&quot;, &quot;mazut&quot;, &quot;mbira&quot;, &quot;meads&quot;, &quot;meals&quot;, &quot;meane&quot;, &quot;means&quot;, &quot;meany&quot;, &quot;meare&quot;, &quot;mease&quot;, &quot;meath&quot;, &quot;meats&quot;, &quot;mebos&quot;, &quot;mechs&quot;, &quot;mecks&quot;, &quot;medii&quot;, &quot;medle&quot;, &quot;meeds&quot;, &quot;meers&quot;, &quot;meets&quot;, &quot;meffs&quot;, &quot;meins&quot;, &quot;meint&quot;, &quot;meiny&quot;, &quot;meith&quot;, &quot;mekka&quot;, &quot;melas&quot;, &quot;melba&quot;, &quot;melds&quot;, &quot;melic&quot;, &quot;melik&quot;, &quot;mells&quot;, &quot;melts&quot;, &quot;melty&quot;, &quot;memes&quot;, &quot;memos&quot;, &quot;menad&quot;, &quot;mends&quot;, &quot;mened&quot;, &quot;menes&quot;, &quot;menge&quot;, &quot;mengs&quot;, &quot;mensa&quot;, &quot;mense&quot;, &quot;mensh&quot;, &quot;menta&quot;, &quot;mento&quot;, &quot;menus&quot;, &quot;meous&quot;, &quot;meows&quot;, &quot;merch&quot;, &quot;mercs&quot;, &quot;merde&quot;, &quot;mered&quot;, &quot;merel&quot;, &quot;merer&quot;, &quot;meres&quot;, &quot;meril&quot;, &quot;meris&quot;, &quot;merks&quot;, &quot;merle&quot;, &quot;merls&quot;, &quot;merse&quot;, &quot;mesal&quot;, &quot;mesas&quot;, &quot;mesel&quot;, &quot;meses&quot;, &quot;meshy&quot;, &quot;mesic&quot;, &quot;mesne&quot;, &quot;meson&quot;, &quot;messy&quot;, &quot;mesto&quot;, &quot;meted&quot;, &quot;metes&quot;, &quot;metho&quot;, &quot;meths&quot;, &quot;metic&quot;, &quot;metif&quot;, &quot;metis&quot;, &quot;metol&quot;, &quot;metre&quot;, &quot;meuse&quot;, &quot;meved&quot;, &quot;meves&quot;, &quot;mewed&quot;, &quot;mewls&quot;, &quot;meynt&quot;, &quot;mezes&quot;, &quot;mezze&quot;, &quot;mezzo&quot;, &quot;mhorr&quot;, &quot;miaou&quot;, &quot;miaow&quot;, &quot;miasm&quot;, &quot;miaul&quot;, &quot;micas&quot;, &quot;miche&quot;, &quot;micht&quot;, &quot;micks&quot;, &quot;micky&quot;, &quot;micos&quot;, &quot;micra&quot;, &quot;middy&quot;, &quot;midgy&quot;, &quot;midis&quot;, &quot;miens&quot;, &quot;mieve&quot;, &quot;miffs&quot;, &quot;miffy&quot;, &quot;mifty&quot;, &quot;miggs&quot;, &quot;mihas&quot;, &quot;mihis&quot;, &quot;miked&quot;, &quot;mikes&quot;, &quot;mikra&quot;, &quot;mikva&quot;, &quot;milch&quot;, &quot;milds&quot;, &quot;miler&quot;, &quot;miles&quot;, &quot;milfs&quot;, &quot;milia&quot;, &quot;milko&quot;, &quot;milks&quot;, &quot;mille&quot;, &quot;mills&quot;, &quot;milor&quot;, &quot;milos&quot;, &quot;milpa&quot;, &quot;milts&quot;, &quot;milty&quot;, &quot;miltz&quot;, &quot;mimed&quot;, &quot;mimeo&quot;, &quot;mimer&quot;, &quot;mimes&quot;, &quot;mimsy&quot;, &quot;minae&quot;, &quot;minar&quot;, &quot;minas&quot;, &quot;mincy&quot;, &quot;minds&quot;, &quot;mined&quot;, &quot;mines&quot;, &quot;minge&quot;, &quot;mings&quot;, &quot;mingy&quot;, &quot;minis&quot;, &quot;minke&quot;, &quot;minks&quot;, &quot;minny&quot;, &quot;minos&quot;, &quot;mints&quot;, &quot;mired&quot;, &quot;mires&quot;, &quot;mirex&quot;, &quot;mirid&quot;, &quot;mirin&quot;, &quot;mirks&quot;, &quot;mirky&quot;, &quot;mirly&quot;, &quot;miros&quot;, &quot;mirvs&quot;, &quot;mirza&quot;, &quot;misch&quot;, &quot;misdo&quot;, &quot;mises&quot;, &quot;misgo&quot;, &quot;misos&quot;, &quot;missa&quot;, &quot;mists&quot;, &quot;misty&quot;, &quot;mitch&quot;, &quot;miter&quot;, &quot;mites&quot;, &quot;mitis&quot;, &quot;mitre&quot;, &quot;mitts&quot;, &quot;mixed&quot;, &quot;mixen&quot;, &quot;mixer&quot;, &quot;mixes&quot;, &quot;mixte&quot;, &quot;mixup&quot;, &quot;mizen&quot;, &quot;mizzy&quot;, &quot;mneme&quot;, &quot;moans&quot;, &quot;moats&quot;, &quot;mobby&quot;, &quot;mobes&quot;, &quot;mobey&quot;, &quot;mobie&quot;, &quot;moble&quot;, &quot;mochi&quot;, &quot;mochs&quot;, &quot;mochy&quot;, &quot;mocks&quot;, &quot;moder&quot;, &quot;modes&quot;, &quot;modge&quot;, &quot;modii&quot;, &quot;modus&quot;, &quot;moers&quot;, &quot;mofos&quot;, &quot;moggy&quot;, &quot;mohel&quot;, &quot;mohos&quot;, &quot;mohrs&quot;, &quot;mohua&quot;, &quot;mohur&quot;, &quot;moile&quot;, &quot;moils&quot;, &quot;moira&quot;, &quot;moire&quot;, &quot;moits&quot;, &quot;mojos&quot;, &quot;mokes&quot;, &quot;mokis&quot;, &quot;mokos&quot;, &quot;molal&quot;, &quot;molas&quot;, &quot;molds&quot;, &quot;moled&quot;, &quot;moles&quot;, &quot;molla&quot;, &quot;molls&quot;, &quot;molly&quot;, &quot;molto&quot;, &quot;molts&quot;, &quot;molys&quot;, &quot;momes&quot;, &quot;momma&quot;, &quot;mommy&quot;, &quot;momus&quot;, &quot;monad&quot;, &quot;monal&quot;, &quot;monas&quot;, &quot;monde&quot;, &quot;mondo&quot;, &quot;moner&quot;, &quot;mongo&quot;, &quot;mongs&quot;, &quot;monic&quot;, &quot;monie&quot;, &quot;monks&quot;, &quot;monos&quot;, &quot;monte&quot;, &quot;monty&quot;, &quot;moobs&quot;, &quot;mooch&quot;, &quot;moods&quot;, &quot;mooed&quot;, &quot;mooks&quot;, &quot;moola&quot;, &quot;mooli&quot;, &quot;mools&quot;, &quot;mooly&quot;, &quot;moong&quot;, &quot;moons&quot;, &quot;moony&quot;, &quot;moops&quot;, &quot;moors&quot;, &quot;moory&quot;, &quot;moots&quot;, &quot;moove&quot;, &quot;moped&quot;, &quot;moper&quot;, &quot;mopes&quot;, &quot;mopey&quot;, &quot;moppy&quot;, &quot;mopsy&quot;, &quot;mopus&quot;, &quot;morae&quot;, &quot;moras&quot;, &quot;morat&quot;, &quot;moray&quot;, &quot;morel&quot;, &quot;mores&quot;, &quot;moria&quot;, &quot;morne&quot;, &quot;morns&quot;, &quot;morra&quot;, &quot;morro&quot;, &quot;morse&quot;, &quot;morts&quot;, &quot;mosed&quot;, &quot;moses&quot;, &quot;mosey&quot;, &quot;mosks&quot;, &quot;mosso&quot;, &quot;moste&quot;, &quot;mosts&quot;, &quot;moted&quot;, &quot;moten&quot;, &quot;motes&quot;, &quot;motet&quot;, &quot;motey&quot;, &quot;moths&quot;, &quot;mothy&quot;, &quot;motis&quot;, &quot;motte&quot;, &quot;motts&quot;, &quot;motty&quot;, &quot;motus&quot;, &quot;motza&quot;, &quot;mouch&quot;, &quot;moues&quot;, &quot;mould&quot;, &quot;mouls&quot;, &quot;moups&quot;, &quot;moust&quot;, &quot;mousy&quot;, &quot;moved&quot;, &quot;moves&quot;, &quot;mowas&quot;, &quot;mowed&quot;, &quot;mowra&quot;, &quot;moxas&quot;, &quot;moxie&quot;, &quot;moyas&quot;, &quot;moyle&quot;, &quot;moyls&quot;, &quot;mozed&quot;, &quot;mozes&quot;, &quot;mozos&quot;, &quot;mpret&quot;, &quot;mucho&quot;, &quot;mucic&quot;, &quot;mucid&quot;, &quot;mucin&quot;, &quot;mucks&quot;, &quot;mucor&quot;, &quot;mucro&quot;, &quot;mudge&quot;, &quot;mudir&quot;, &quot;mudra&quot;, &quot;muffs&quot;, &quot;mufti&quot;, &quot;mugga&quot;, &quot;muggs&quot;, &quot;muggy&quot;, &quot;muhly&quot;, &quot;muids&quot;, &quot;muils&quot;, &quot;muirs&quot;, &quot;muist&quot;, &quot;mujik&quot;, &quot;mulct&quot;, &quot;muled&quot;, &quot;mules&quot;, &quot;muley&quot;, &quot;mulga&quot;, &quot;mulie&quot;, &quot;mulla&quot;, &quot;mulls&quot;, &quot;mulse&quot;, &quot;mulsh&quot;, &quot;mumms&quot;, &quot;mumps&quot;, &quot;mumsy&quot;, &quot;mumus&quot;, &quot;munga&quot;, &quot;munge&quot;, &quot;mungo&quot;, &quot;mungs&quot;, &quot;munis&quot;, &quot;munts&quot;, &quot;muntu&quot;, &quot;muons&quot;, &quot;muras&quot;, &quot;mured&quot;, &quot;mures&quot;, &quot;murex&quot;, &quot;murid&quot;, &quot;murks&quot;, &quot;murls&quot;, &quot;murly&quot;, &quot;murra&quot;, &quot;murre&quot;, &quot;murri&quot;, &quot;murrs&quot;, &quot;murry&quot;, &quot;murti&quot;, &quot;murva&quot;, &quot;musar&quot;, &quot;musca&quot;, &quot;mused&quot;, &quot;muser&quot;, &quot;muses&quot;, &quot;muset&quot;, &quot;musha&quot;, &quot;musit&quot;, &quot;musks&quot;, &quot;musos&quot;, &quot;musse&quot;, &quot;mussy&quot;, &quot;musth&quot;, &quot;musts&quot;, &quot;mutch&quot;, &quot;muted&quot;, &quot;muter&quot;, &quot;mutes&quot;, &quot;mutha&quot;, &quot;mutis&quot;, &quot;muton&quot;, &quot;mutts&quot;, &quot;muxed&quot;, &quot;muxes&quot;, &quot;muzak&quot;, &quot;muzzy&quot;, &quot;mvule&quot;, &quot;myall&quot;, &quot;mylar&quot;, &quot;mynah&quot;, &quot;mynas&quot;, &quot;myoid&quot;, &quot;myoma&quot;, &quot;myope&quot;, &quot;myops&quot;, &quot;myopy&quot;, &quot;mysid&quot;, &quot;mythi&quot;, &quot;myths&quot;, &quot;mythy&quot;, &quot;myxos&quot;, &quot;mzees&quot;, &quot;naams&quot;, &quot;naans&quot;, &quot;nabes&quot;, &quot;nabis&quot;, &quot;nabks&quot;, &quot;nabla&quot;, &quot;nabob&quot;, &quot;nache&quot;, &quot;nacho&quot;, &quot;nacre&quot;, &quot;nadas&quot;, &quot;naeve&quot;, &quot;naevi&quot;, &quot;naffs&quot;, &quot;nagas&quot;, &quot;naggy&quot;, &quot;nagor&quot;, &quot;nahal&quot;, &quot;naiad&quot;, &quot;naifs&quot;, &quot;naiks&quot;, &quot;nails&quot;, &quot;naira&quot;, &quot;nairu&quot;, &quot;naked&quot;, &quot;naker&quot;, &quot;nakfa&quot;, &quot;nalas&quot;, &quot;naled&quot;, &quot;nalla&quot;, &quot;named&quot;, &quot;namer&quot;, &quot;names&quot;, &quot;namma&quot;, &quot;namus&quot;, &quot;nanas&quot;, &quot;nance&quot;, &quot;nancy&quot;, &quot;nandu&quot;, &quot;nanna&quot;, &quot;nanos&quot;, &quot;nanua&quot;, &quot;napas&quot;, &quot;naped&quot;, &quot;napes&quot;, &quot;napoo&quot;, &quot;nappa&quot;, &quot;nappe&quot;, &quot;nappy&quot;, &quot;naras&quot;, &quot;narco&quot;, &quot;narcs&quot;, &quot;nards&quot;, &quot;nares&quot;, &quot;naric&quot;, &quot;naris&quot;, &quot;narks&quot;, &quot;narky&quot;, &quot;narre&quot;, &quot;nashi&quot;, &quot;natch&quot;, &quot;nates&quot;, &quot;natis&quot;, &quot;natty&quot;, &quot;nauch&quot;, &quot;naunt&quot;, &quot;navar&quot;, &quot;naves&quot;, &quot;navew&quot;, &quot;navvy&quot;, &quot;nawab&quot;, &quot;nazes&quot;, &quot;nazir&quot;, &quot;nazis&quot;, &quot;nduja&quot;, &quot;neafe&quot;, &quot;neals&quot;, &quot;neaps&quot;, &quot;nears&quot;, &quot;neath&quot;, &quot;neats&quot;, &quot;nebek&quot;, &quot;nebel&quot;, &quot;necks&quot;, &quot;neddy&quot;, &quot;needs&quot;, &quot;neeld&quot;, &quot;neele&quot;, &quot;neemb&quot;, &quot;neems&quot;, &quot;neeps&quot;, &quot;neese&quot;, &quot;neeze&quot;, &quot;negro&quot;, &quot;negus&quot;, &quot;neifs&quot;, &quot;neist&quot;, &quot;neive&quot;, &quot;nelis&quot;, &quot;nelly&quot;, &quot;nemas&quot;, &quot;nemns&quot;, &quot;nempt&quot;, &quot;nenes&quot;, &quot;neons&quot;, &quot;neper&quot;, &quot;nepit&quot;, &quot;neral&quot;, &quot;nerds&quot;, &quot;nerka&quot;, &quot;nerks&quot;, &quot;nerol&quot;, &quot;nerts&quot;, &quot;nertz&quot;, &quot;nervy&quot;, &quot;nests&quot;, &quot;netes&quot;, &quot;netop&quot;, &quot;netts&quot;, &quot;netty&quot;, &quot;neuks&quot;, &quot;neume&quot;, &quot;neums&quot;, &quot;nevel&quot;, &quot;neves&quot;, &quot;nevus&quot;, &quot;newbs&quot;, &quot;newed&quot;, &quot;newel&quot;, &quot;newie&quot;, &quot;newsy&quot;, &quot;newts&quot;, &quot;nexts&quot;, &quot;nexus&quot;, &quot;ngaio&quot;, &quot;ngana&quot;, &quot;ngati&quot;, &quot;ngoma&quot;, &quot;ngwee&quot;, &quot;nicad&quot;, &quot;nicht&quot;, &quot;nicks&quot;, &quot;nicol&quot;, &quot;nidal&quot;, &quot;nided&quot;, &quot;nides&quot;, &quot;nidor&quot;, &quot;nidus&quot;, &quot;niefs&quot;, &quot;nieve&quot;, &quot;nifes&quot;, &quot;niffs&quot;, &quot;niffy&quot;, &quot;nifty&quot;, &quot;niger&quot;, &quot;nighs&quot;, &quot;nihil&quot;, &quot;nikab&quot;, &quot;nikah&quot;, &quot;nikau&quot;, &quot;nills&quot;, &quot;nimbi&quot;, &quot;nimbs&quot;, &quot;nimps&quot;, &quot;niner&quot;, &quot;nines&quot;, &quot;ninon&quot;, &quot;nipas&quot;, &quot;nippy&quot;, &quot;niqab&quot;, &quot;nirls&quot;, &quot;nirly&quot;, &quot;nisei&quot;, &quot;nisse&quot;, &quot;nisus&quot;, &quot;niter&quot;, &quot;nites&quot;, &quot;nitid&quot;, &quot;niton&quot;, &quot;nitre&quot;, &quot;nitro&quot;, &quot;nitry&quot;, &quot;nitty&quot;, &quot;nival&quot;, &quot;nixed&quot;, &quot;nixer&quot;, &quot;nixes&quot;, &quot;nixie&quot;, &quot;nizam&quot;, &quot;nkosi&quot;, &quot;noahs&quot;, &quot;nobby&quot;, &quot;nocks&quot;, &quot;nodal&quot;, &quot;noddy&quot;, &quot;nodes&quot;, &quot;nodus&quot;, &quot;noels&quot;, &quot;noggs&quot;, &quot;nohow&quot;, &quot;noils&quot;, &quot;noily&quot;, &quot;noint&quot;, &quot;noirs&quot;, &quot;noles&quot;, &quot;nolls&quot;, &quot;nolos&quot;, &quot;nomas&quot;, &quot;nomen&quot;, &quot;nomes&quot;, &quot;nomic&quot;, &quot;nomoi&quot;, &quot;nomos&quot;, &quot;nonas&quot;, &quot;nonce&quot;, &quot;nones&quot;, &quot;nonet&quot;, &quot;nongs&quot;, &quot;nonis&quot;, &quot;nonny&quot;, &quot;nonyl&quot;, &quot;noobs&quot;, &quot;nooit&quot;, &quot;nooks&quot;, &quot;nooky&quot;, &quot;noons&quot;, &quot;noops&quot;, &quot;nopal&quot;, &quot;noria&quot;, &quot;noris&quot;, &quot;norks&quot;, &quot;norma&quot;, &quot;norms&quot;, &quot;nosed&quot;, &quot;noser&quot;, &quot;noses&quot;, &quot;notal&quot;, &quot;noted&quot;, &quot;noter&quot;, &quot;notes&quot;, &quot;notum&quot;, &quot;nould&quot;, &quot;noule&quot;, &quot;nouls&quot;, &quot;nouns&quot;, &quot;nouny&quot;, &quot;noups&quot;, &quot;novae&quot;, &quot;novas&quot;, &quot;novum&quot;, &quot;noway&quot;, &quot;nowed&quot;, &quot;nowls&quot;, &quot;nowts&quot;, &quot;nowty&quot;, &quot;noxal&quot;, &quot;noxes&quot;, &quot;noyau&quot;, &quot;noyed&quot;, &quot;noyes&quot;, &quot;nubby&quot;, &quot;nubia&quot;, &quot;nucha&quot;, &quot;nuddy&quot;, &quot;nuder&quot;, &quot;nudes&quot;, &quot;nudie&quot;, &quot;nudzh&quot;, &quot;nuffs&quot;, &quot;nugae&quot;, &quot;nuked&quot;, &quot;nukes&quot;, &quot;nulla&quot;, &quot;nulls&quot;, &quot;numbs&quot;, &quot;numen&quot;, &quot;nummy&quot;, &quot;nunny&quot;, &quot;nurds&quot;, &quot;nurdy&quot;, &quot;nurls&quot;, &quot;nurrs&quot;, &quot;nutso&quot;, &quot;nutsy&quot;, &quot;nyaff&quot;, &quot;nyala&quot;, &quot;nying&quot;, &quot;nyssa&quot;, &quot;oaked&quot;, &quot;oaker&quot;, &quot;oakum&quot;, &quot;oared&quot;, &quot;oases&quot;, &quot;oasis&quot;, &quot;oasts&quot;, &quot;oaten&quot;, &quot;oater&quot;, &quot;oaths&quot;, &quot;oaves&quot;, &quot;obang&quot;, &quot;obeah&quot;, &quot;obeli&quot;, &quot;obeys&quot;, &quot;obias&quot;, &quot;obied&quot;, &quot;obiit&quot;, &quot;obits&quot;, &quot;objet&quot;, &quot;oboes&quot;, &quot;obole&quot;, &quot;oboli&quot;, &quot;obols&quot;, &quot;occam&quot;, &quot;ocher&quot;, &quot;oches&quot;, &quot;ochre&quot;, &quot;ochry&quot;, &quot;ocker&quot;, &quot;ocrea&quot;, &quot;octad&quot;, &quot;octan&quot;, &quot;octas&quot;, &quot;octyl&quot;, &quot;oculi&quot;, &quot;odahs&quot;, &quot;odals&quot;, &quot;odeon&quot;, &quot;odeum&quot;, &quot;odism&quot;, &quot;odist&quot;, &quot;odium&quot;, &quot;odors&quot;, &quot;odour&quot;, &quot;odyle&quot;, &quot;odyls&quot;, &quot;ofays&quot;, &quot;offed&quot;, &quot;offie&quot;, &quot;oflag&quot;, &quot;ofter&quot;, &quot;ogams&quot;, &quot;ogeed&quot;, &quot;ogees&quot;, &quot;oggin&quot;, &quot;ogham&quot;, &quot;ogive&quot;, &quot;ogled&quot;, &quot;ogler&quot;, &quot;ogles&quot;, &quot;ogmic&quot;, &quot;ogres&quot;, &quot;ohias&quot;, &quot;ohing&quot;, &quot;ohmic&quot;, &quot;ohone&quot;, &quot;oidia&quot;, &quot;oiled&quot;, &quot;oiler&quot;, &quot;oinks&quot;, &quot;oints&quot;, &quot;ojime&quot;, &quot;okapi&quot;, &quot;okays&quot;, &quot;okehs&quot;, &quot;okras&quot;, &quot;oktas&quot;, &quot;oldie&quot;, &quot;oleic&quot;, &quot;olein&quot;, &quot;olent&quot;, &quot;oleos&quot;, &quot;oleum&quot;, &quot;olios&quot;, &quot;ollas&quot;, &quot;ollav&quot;, &quot;oller&quot;, &quot;ollie&quot;, &quot;ology&quot;, &quot;olpae&quot;, &quot;olpes&quot;, &quot;omasa&quot;, &quot;omber&quot;, &quot;ombus&quot;, &quot;omens&quot;, &quot;omers&quot;, &quot;omits&quot;, &quot;omlah&quot;, &quot;omovs&quot;, &quot;omrah&quot;, &quot;oncer&quot;, &quot;onces&quot;, &quot;oncet&quot;, &quot;oncus&quot;, &quot;onely&quot;, &quot;oners&quot;, &quot;onery&quot;, &quot;onium&quot;, &quot;onkus&quot;, &quot;onlay&quot;, &quot;onned&quot;, &quot;ontic&quot;, &quot;oobit&quot;, &quot;oohed&quot;, &quot;oomph&quot;, &quot;oonts&quot;, &quot;ooped&quot;, &quot;oorie&quot;, &quot;ooses&quot;, &quot;ootid&quot;, &quot;oozed&quot;, &quot;oozes&quot;, &quot;opahs&quot;, &quot;opals&quot;, &quot;opens&quot;, &quot;opepe&quot;, &quot;oping&quot;, &quot;oppos&quot;, &quot;opsin&quot;, &quot;opted&quot;, &quot;opter&quot;, &quot;orach&quot;, &quot;oracy&quot;, &quot;orals&quot;, &quot;orang&quot;, &quot;orant&quot;, &quot;orate&quot;, &quot;orbed&quot;, &quot;orcas&quot;, &quot;orcin&quot;, &quot;ordos&quot;, &quot;oread&quot;, &quot;orfes&quot;, &quot;orgia&quot;, &quot;orgic&quot;, &quot;orgue&quot;, &quot;oribi&quot;, &quot;oriel&quot;, &quot;orixa&quot;, &quot;orles&quot;, &quot;orlon&quot;, &quot;orlop&quot;, &quot;ormer&quot;, &quot;ornis&quot;, &quot;orpin&quot;, &quot;orris&quot;, &quot;ortho&quot;, &quot;orval&quot;, &quot;orzos&quot;, &quot;oscar&quot;, &quot;oshac&quot;, &quot;osier&quot;, &quot;osmic&quot;, &quot;osmol&quot;, &quot;ossia&quot;, &quot;ostia&quot;, &quot;otaku&quot;, &quot;otary&quot;, &quot;ottar&quot;, &quot;ottos&quot;, &quot;oubit&quot;, &quot;oucht&quot;, &quot;ouens&quot;, &quot;ouija&quot;, &quot;oulks&quot;, &quot;oumas&quot;, &quot;oundy&quot;, &quot;oupas&quot;, &quot;ouped&quot;, &quot;ouphe&quot;, &quot;ouphs&quot;, &quot;ourie&quot;, &quot;ousel&quot;, &quot;ousts&quot;, &quot;outby&quot;, &quot;outed&quot;, &quot;outre&quot;, &quot;outro&quot;, &quot;outta&quot;, &quot;ouzel&quot;, &quot;ouzos&quot;, &quot;ovals&quot;, &quot;ovels&quot;, &quot;ovens&quot;, &quot;overs&quot;, &quot;ovist&quot;, &quot;ovoli&quot;, &quot;ovolo&quot;, &quot;ovule&quot;, &quot;owche&quot;, &quot;owies&quot;, &quot;owled&quot;, &quot;owler&quot;, &quot;owlet&quot;, &quot;owned&quot;, &quot;owres&quot;, &quot;owrie&quot;, &quot;owsen&quot;, &quot;oxbow&quot;, &quot;oxers&quot;, &quot;oxeye&quot;, &quot;oxids&quot;, &quot;oxies&quot;, &quot;oxime&quot;, &quot;oxims&quot;, &quot;oxlip&quot;, &quot;oxter&quot;, &quot;oyers&quot;, &quot;ozeki&quot;, &quot;ozzie&quot;, &quot;paals&quot;, &quot;paans&quot;, &quot;pacas&quot;, &quot;paced&quot;, &quot;pacer&quot;, &quot;paces&quot;, &quot;pacey&quot;, &quot;pacha&quot;, &quot;packs&quot;, &quot;pacos&quot;, &quot;pacta&quot;, &quot;pacts&quot;, &quot;padis&quot;, &quot;padle&quot;, &quot;padma&quot;, &quot;padre&quot;, &quot;padri&quot;, &quot;paean&quot;, &quot;paedo&quot;, &quot;paeon&quot;, &quot;paged&quot;, &quot;pager&quot;, &quot;pages&quot;, &quot;pagle&quot;, &quot;pagod&quot;, &quot;pagri&quot;, &quot;paiks&quot;, &quot;pails&quot;, &quot;pains&quot;, &quot;paire&quot;, &quot;pairs&quot;, &quot;paisa&quot;, &quot;paise&quot;, &quot;pakka&quot;, &quot;palas&quot;, &quot;palay&quot;, &quot;palea&quot;, &quot;paled&quot;, &quot;pales&quot;, &quot;palet&quot;, &quot;palis&quot;, &quot;palki&quot;, &quot;palla&quot;, &quot;palls&quot;, &quot;pally&quot;, &quot;palms&quot;, &quot;palmy&quot;, &quot;palpi&quot;, &quot;palps&quot;, &quot;palsa&quot;, &quot;pampa&quot;, &quot;panax&quot;, &quot;pance&quot;, &quot;panda&quot;, &quot;pands&quot;, &quot;pandy&quot;, &quot;paned&quot;, &quot;panes&quot;, &quot;panga&quot;, &quot;pangs&quot;, &quot;panim&quot;, &quot;panko&quot;, &quot;panne&quot;, &quot;panni&quot;, &quot;panto&quot;, &quot;pants&quot;, &quot;panty&quot;, &quot;paoli&quot;, &quot;paolo&quot;, &quot;papas&quot;, &quot;papaw&quot;, &quot;papes&quot;, &quot;pappi&quot;, &quot;pappy&quot;, &quot;parae&quot;, &quot;paras&quot;, &quot;parch&quot;, &quot;pardi&quot;, &quot;pards&quot;, &quot;pardy&quot;, &quot;pared&quot;, &quot;paren&quot;, &quot;pareo&quot;, &quot;pares&quot;, &quot;pareu&quot;, &quot;parev&quot;, &quot;parge&quot;, &quot;pargo&quot;, &quot;paris&quot;, &quot;parki&quot;, &quot;parks&quot;, &quot;parky&quot;, &quot;parle&quot;, &quot;parly&quot;, &quot;parma&quot;, &quot;parol&quot;, &quot;parps&quot;, &quot;parra&quot;, &quot;parrs&quot;, &quot;parti&quot;, &quot;parts&quot;, &quot;parve&quot;, &quot;parvo&quot;, &quot;paseo&quot;, &quot;pases&quot;, &quot;pasha&quot;, &quot;pashm&quot;, &quot;paska&quot;, &quot;paspy&quot;, &quot;passe&quot;, &quot;pasts&quot;, &quot;pated&quot;, &quot;paten&quot;, &quot;pater&quot;, &quot;pates&quot;, &quot;paths&quot;, &quot;patin&quot;, &quot;patka&quot;, &quot;patly&quot;, &quot;patte&quot;, &quot;patus&quot;, &quot;pauas&quot;, &quot;pauls&quot;, &quot;pavan&quot;, &quot;paved&quot;, &quot;paven&quot;, &quot;paver&quot;, &quot;paves&quot;, &quot;pavid&quot;, &quot;pavin&quot;, &quot;pavis&quot;, &quot;pawas&quot;, &quot;pawaw&quot;, &quot;pawed&quot;, &quot;pawer&quot;, &quot;pawks&quot;, &quot;pawky&quot;, &quot;pawls&quot;, &quot;pawns&quot;, &quot;paxes&quot;, &quot;payed&quot;, &quot;payor&quot;, &quot;paysd&quot;, &quot;peage&quot;, &quot;peags&quot;, &quot;peaks&quot;, &quot;peaky&quot;, &quot;peals&quot;, &quot;peans&quot;, &quot;peare&quot;, &quot;pears&quot;, &quot;peart&quot;, &quot;pease&quot;, &quot;peats&quot;, &quot;peaty&quot;, &quot;peavy&quot;, &quot;peaze&quot;, &quot;pebas&quot;, &quot;pechs&quot;, &quot;pecke&quot;, &quot;pecks&quot;, &quot;pecky&quot;, &quot;pedes&quot;, &quot;pedis&quot;, &quot;pedro&quot;, &quot;peece&quot;, &quot;peeks&quot;, &quot;peels&quot;, &quot;peens&quot;, &quot;peeoy&quot;, &quot;peepe&quot;, &quot;peeps&quot;, &quot;peers&quot;, &quot;peery&quot;, &quot;peeve&quot;, &quot;peggy&quot;, &quot;peghs&quot;, &quot;peins&quot;, &quot;peise&quot;, &quot;peize&quot;, &quot;pekan&quot;, &quot;pekes&quot;, &quot;pekin&quot;, &quot;pekoe&quot;, &quot;pelas&quot;, &quot;pelau&quot;, &quot;peles&quot;, &quot;pelfs&quot;, &quot;pells&quot;, &quot;pelma&quot;, &quot;pelon&quot;, &quot;pelta&quot;, &quot;pelts&quot;, &quot;pends&quot;, &quot;pendu&quot;, &quot;pened&quot;, &quot;penes&quot;, &quot;pengo&quot;, &quot;penie&quot;, &quot;penis&quot;, &quot;penks&quot;, &quot;penna&quot;, &quot;penni&quot;, &quot;pents&quot;, &quot;peons&quot;, &quot;peony&quot;, &quot;pepla&quot;, &quot;pepos&quot;, &quot;peppy&quot;, &quot;pepsi&quot;, &quot;perai&quot;, &quot;perce&quot;, &quot;percs&quot;, &quot;perdu&quot;, &quot;perdy&quot;, &quot;perea&quot;, &quot;peres&quot;, &quot;peris&quot;, &quot;perks&quot;, &quot;perms&quot;, &quot;perns&quot;, &quot;perog&quot;, &quot;perps&quot;, &quot;perry&quot;, &quot;perse&quot;, &quot;perst&quot;, &quot;perts&quot;, &quot;perve&quot;, &quot;pervo&quot;, &quot;pervs&quot;, &quot;pervy&quot;, &quot;pesos&quot;, &quot;pests&quot;, &quot;pesty&quot;, &quot;petar&quot;, &quot;peter&quot;, &quot;petit&quot;, &quot;petre&quot;, &quot;petri&quot;, &quot;petti&quot;, &quot;petto&quot;, &quot;pewee&quot;, &quot;pewit&quot;, &quot;peyse&quot;, &quot;phage&quot;, &quot;phang&quot;, &quot;phare&quot;, &quot;pharm&quot;, &quot;pheer&quot;, &quot;phene&quot;, &quot;pheon&quot;, &quot;phese&quot;, &quot;phial&quot;, &quot;phish&quot;, &quot;phizz&quot;, &quot;phlox&quot;, &quot;phoca&quot;, &quot;phono&quot;, &quot;phons&quot;, &quot;phots&quot;, &quot;phpht&quot;, &quot;phuts&quot;, &quot;phyla&quot;, &quot;phyle&quot;, &quot;piani&quot;, &quot;pians&quot;, &quot;pibal&quot;, &quot;pical&quot;, &quot;picas&quot;, &quot;piccy&quot;, &quot;picks&quot;, &quot;picot&quot;, &quot;picra&quot;, &quot;picul&quot;, &quot;piend&quot;, &quot;piers&quot;, &quot;piert&quot;, &quot;pieta&quot;, &quot;piets&quot;, &quot;piezo&quot;, &quot;pight&quot;, &quot;pigmy&quot;, &quot;piing&quot;, &quot;pikas&quot;, &quot;pikau&quot;, &quot;piked&quot;, &quot;piker&quot;, &quot;pikes&quot;, &quot;pikey&quot;, &quot;pikis&quot;, &quot;pikul&quot;, &quot;pilae&quot;, &quot;pilaf&quot;, &quot;pilao&quot;, &quot;pilar&quot;, &quot;pilau&quot;, &quot;pilaw&quot;, &quot;pilch&quot;, &quot;pilea&quot;, &quot;piled&quot;, &quot;pilei&quot;, &quot;piler&quot;, &quot;piles&quot;, &quot;pilis&quot;, &quot;pills&quot;, &quot;pilow&quot;, &quot;pilum&quot;, &quot;pilus&quot;, &quot;pimas&quot;, &quot;pimps&quot;, &quot;pinas&quot;, &quot;pined&quot;, &quot;pines&quot;, &quot;pingo&quot;, &quot;pings&quot;, &quot;pinko&quot;, &quot;pinks&quot;, &quot;pinna&quot;, &quot;pinny&quot;, &quot;pinon&quot;, &quot;pinot&quot;, &quot;pinta&quot;, &quot;pints&quot;, &quot;pinup&quot;, &quot;pions&quot;, &quot;piony&quot;, &quot;pious&quot;, &quot;pioye&quot;, &quot;pioys&quot;, &quot;pipal&quot;, &quot;pipas&quot;, &quot;piped&quot;, &quot;pipes&quot;, &quot;pipet&quot;, &quot;pipis&quot;, &quot;pipit&quot;, &quot;pippy&quot;, &quot;pipul&quot;, &quot;pirai&quot;, &quot;pirls&quot;, &quot;pirns&quot;, &quot;pirog&quot;, &quot;pisco&quot;, &quot;pises&quot;, &quot;pisky&quot;, &quot;pisos&quot;, &quot;pissy&quot;, &quot;piste&quot;, &quot;pitas&quot;, &quot;piths&quot;, &quot;piton&quot;, &quot;pitot&quot;, &quot;pitta&quot;, &quot;piums&quot;, &quot;pixes&quot;, &quot;pized&quot;, &quot;pizes&quot;, &quot;plaas&quot;, &quot;plack&quot;, &quot;plage&quot;, &quot;plans&quot;, &quot;plaps&quot;, &quot;plash&quot;, &quot;plasm&quot;, &quot;plast&quot;, &quot;plats&quot;, &quot;platt&quot;, &quot;platy&quot;, &quot;playa&quot;, &quot;plays&quot;, &quot;pleas&quot;, &quot;plebe&quot;, &quot;plebs&quot;, &quot;plena&quot;, &quot;pleon&quot;, &quot;plesh&quot;, &quot;plews&quot;, &quot;plica&quot;, &quot;plies&quot;, &quot;plims&quot;, &quot;pling&quot;, &quot;plink&quot;, &quot;ploat&quot;, &quot;plods&quot;, &quot;plong&quot;, &quot;plonk&quot;, &quot;plook&quot;, &quot;plops&quot;, &quot;plots&quot;, &quot;plotz&quot;, &quot;plouk&quot;, &quot;plows&quot;, &quot;ploye&quot;, &quot;ploys&quot;, &quot;plues&quot;, &quot;pluff&quot;, &quot;plugs&quot;, &quot;plums&quot;, &quot;plumy&quot;, &quot;pluot&quot;, &quot;pluto&quot;, &quot;plyer&quot;, &quot;poach&quot;, &quot;poaka&quot;, &quot;poake&quot;, &quot;poboy&quot;, &quot;pocks&quot;, &quot;pocky&quot;, &quot;podal&quot;, &quot;poddy&quot;, &quot;podex&quot;, &quot;podge&quot;, &quot;podgy&quot;, &quot;podia&quot;, &quot;poems&quot;, &quot;poeps&quot;, &quot;poets&quot;, &quot;pogey&quot;, &quot;pogge&quot;, &quot;pogos&quot;, &quot;pohed&quot;, &quot;poilu&quot;, &quot;poind&quot;, &quot;pokal&quot;, &quot;poked&quot;, &quot;pokes&quot;, &quot;pokey&quot;, &quot;pokie&quot;, &quot;poled&quot;, &quot;poler&quot;, &quot;poles&quot;, &quot;poley&quot;, &quot;polio&quot;, &quot;polis&quot;, &quot;polje&quot;, &quot;polks&quot;, &quot;polls&quot;, &quot;polly&quot;, &quot;polos&quot;, &quot;polts&quot;, &quot;polys&quot;, &quot;pombe&quot;, &quot;pomes&quot;, &quot;pommy&quot;, &quot;pomos&quot;, &quot;pomps&quot;, &quot;ponce&quot;, &quot;poncy&quot;, &quot;ponds&quot;, &quot;pones&quot;, &quot;poney&quot;, &quot;ponga&quot;, &quot;pongo&quot;, &quot;pongs&quot;, &quot;pongy&quot;, &quot;ponks&quot;, &quot;ponts&quot;, &quot;ponty&quot;, &quot;ponzu&quot;, &quot;poods&quot;, &quot;pooed&quot;, &quot;poofs&quot;, &quot;poofy&quot;, &quot;poohs&quot;, &quot;pooja&quot;, &quot;pooka&quot;, &quot;pooks&quot;, &quot;pools&quot;, &quot;poons&quot;, &quot;poops&quot;, &quot;poopy&quot;, &quot;poori&quot;, &quot;poort&quot;, &quot;poots&quot;, &quot;poove&quot;, &quot;poovy&quot;, &quot;popes&quot;, &quot;poppa&quot;, &quot;popsy&quot;, &quot;porae&quot;, &quot;poral&quot;, &quot;pored&quot;, &quot;porer&quot;, &quot;pores&quot;, &quot;porge&quot;, &quot;porgy&quot;, &quot;porin&quot;, &quot;porks&quot;, &quot;porky&quot;, &quot;porno&quot;, &quot;porns&quot;, &quot;porny&quot;, &quot;porta&quot;, &quot;ports&quot;, &quot;porty&quot;, &quot;posed&quot;, &quot;poses&quot;, &quot;posey&quot;, &quot;posho&quot;, &quot;posts&quot;, &quot;potae&quot;, &quot;potch&quot;, &quot;poted&quot;, &quot;potes&quot;, &quot;potin&quot;, &quot;potoo&quot;, &quot;potsy&quot;, &quot;potto&quot;, &quot;potts&quot;, &quot;potty&quot;, &quot;pouff&quot;, &quot;poufs&quot;, &quot;pouke&quot;, &quot;pouks&quot;, &quot;poule&quot;, &quot;poulp&quot;, &quot;poult&quot;, &quot;poupe&quot;, &quot;poupt&quot;, &quot;pours&quot;, &quot;pouts&quot;, &quot;powan&quot;, &quot;powin&quot;, &quot;pownd&quot;, &quot;powns&quot;, &quot;powny&quot;, &quot;powre&quot;, &quot;poxed&quot;, &quot;poxes&quot;, &quot;poynt&quot;, &quot;poyou&quot;, &quot;poyse&quot;, &quot;pozzy&quot;, &quot;praam&quot;, &quot;prads&quot;, &quot;prahu&quot;, &quot;prams&quot;, &quot;prana&quot;, &quot;prang&quot;, &quot;praos&quot;, &quot;prase&quot;, &quot;prate&quot;, &quot;prats&quot;, &quot;pratt&quot;, &quot;praty&quot;, &quot;praus&quot;, &quot;prays&quot;, &quot;predy&quot;, &quot;preed&quot;, &quot;prees&quot;, &quot;preif&quot;, &quot;prems&quot;, &quot;premy&quot;, &quot;prent&quot;, &quot;preon&quot;, &quot;preop&quot;, &quot;preps&quot;, &quot;presa&quot;, &quot;prese&quot;, &quot;prest&quot;, &quot;preve&quot;, &quot;prexy&quot;, &quot;preys&quot;, &quot;prial&quot;, &quot;pricy&quot;, &quot;prief&quot;, &quot;prier&quot;, &quot;pries&quot;, &quot;prigs&quot;, &quot;prill&quot;, &quot;prima&quot;, &quot;primi&quot;, &quot;primp&quot;, &quot;prims&quot;, &quot;primy&quot;, &quot;prink&quot;, &quot;prion&quot;, &quot;prise&quot;, &quot;priss&quot;, &quot;proas&quot;, &quot;probs&quot;, &quot;prods&quot;, &quot;proem&quot;, &quot;profs&quot;, &quot;progs&quot;, &quot;proin&quot;, &quot;proke&quot;, &quot;prole&quot;, &quot;proll&quot;, &quot;promo&quot;, &quot;proms&quot;, &quot;pronk&quot;, &quot;props&quot;, &quot;prore&quot;, &quot;proso&quot;, &quot;pross&quot;, &quot;prost&quot;, &quot;prosy&quot;, &quot;proto&quot;, &quot;proul&quot;, &quot;prows&quot;, &quot;proyn&quot;, &quot;prunt&quot;, &quot;pruta&quot;, &quot;pryer&quot;, &quot;pryse&quot;, &quot;pseud&quot;, &quot;pshaw&quot;, &quot;psion&quot;, &quot;psoae&quot;, &quot;psoai&quot;, &quot;psoas&quot;, &quot;psora&quot;, &quot;psych&quot;, &quot;psyop&quot;, &quot;pubco&quot;, &quot;pubes&quot;, &quot;pubis&quot;, &quot;pucan&quot;, &quot;pucer&quot;, &quot;puces&quot;, &quot;pucka&quot;, &quot;pucks&quot;, &quot;puddy&quot;, &quot;pudge&quot;, &quot;pudic&quot;, &quot;pudor&quot;, &quot;pudsy&quot;, &quot;pudus&quot;, &quot;puers&quot;, &quot;puffa&quot;, &quot;puffs&quot;, &quot;puggy&quot;, &quot;pugil&quot;, &quot;puhas&quot;, &quot;pujah&quot;, &quot;pujas&quot;, &quot;pukas&quot;, &quot;puked&quot;, &quot;puker&quot;, &quot;pukes&quot;, &quot;pukey&quot;, &quot;pukka&quot;, &quot;pukus&quot;, &quot;pulao&quot;, &quot;pulas&quot;, &quot;puled&quot;, &quot;puler&quot;, &quot;pules&quot;, &quot;pulik&quot;, &quot;pulis&quot;, &quot;pulka&quot;, &quot;pulks&quot;, &quot;pulli&quot;, &quot;pulls&quot;, &quot;pully&quot;, &quot;pulmo&quot;, &quot;pulps&quot;, &quot;pulus&quot;, &quot;pumas&quot;, &quot;pumie&quot;, &quot;pumps&quot;, &quot;punas&quot;, &quot;punce&quot;, &quot;punga&quot;, &quot;pungs&quot;, &quot;punji&quot;, &quot;punka&quot;, &quot;punks&quot;, &quot;punky&quot;, &quot;punny&quot;, &quot;punto&quot;, &quot;punts&quot;, &quot;punty&quot;, &quot;pupae&quot;, &quot;pupas&quot;, &quot;pupus&quot;, &quot;purda&quot;, &quot;pured&quot;, &quot;pures&quot;, &quot;purin&quot;, &quot;puris&quot;, &quot;purls&quot;, &quot;purpy&quot;, &quot;purrs&quot;, &quot;pursy&quot;, &quot;purty&quot;, &quot;puses&quot;, &quot;pusle&quot;, &quot;putid&quot;, &quot;puton&quot;, &quot;putti&quot;, &quot;putto&quot;, &quot;putts&quot;, &quot;puzel&quot;, &quot;pwned&quot;, &quot;pyats&quot;, &quot;pyets&quot;, &quot;pygal&quot;, &quot;pyins&quot;, &quot;pylon&quot;, &quot;pyned&quot;, &quot;pynes&quot;, &quot;pyoid&quot;, &quot;pyots&quot;, &quot;pyral&quot;, &quot;pyran&quot;, &quot;pyres&quot;, &quot;pyrex&quot;, &quot;pyric&quot;, &quot;pyros&quot;, &quot;pyxed&quot;, &quot;pyxes&quot;, &quot;pyxie&quot;, &quot;pyxis&quot;, &quot;pzazz&quot;, &quot;qadis&quot;, &quot;qaids&quot;, &quot;qajaq&quot;, &quot;qanat&quot;, &quot;qapik&quot;, &quot;qibla&quot;, &quot;qophs&quot;, &quot;qorma&quot;, &quot;quads&quot;, &quot;quaff&quot;, &quot;quags&quot;, &quot;quair&quot;, &quot;quais&quot;, &quot;quaky&quot;, &quot;quale&quot;, &quot;quant&quot;, &quot;quare&quot;, &quot;quass&quot;, &quot;quate&quot;, &quot;quats&quot;, &quot;quayd&quot;, &quot;quays&quot;, &quot;qubit&quot;, &quot;quean&quot;, &quot;queme&quot;, &quot;quena&quot;, &quot;quern&quot;, &quot;queyn&quot;, &quot;queys&quot;, &quot;quich&quot;, &quot;quids&quot;, &quot;quiff&quot;, &quot;quims&quot;, &quot;quina&quot;, &quot;quine&quot;, &quot;quino&quot;, &quot;quins&quot;, &quot;quint&quot;, &quot;quipo&quot;, &quot;quips&quot;, &quot;quipu&quot;, &quot;quire&quot;, &quot;quirt&quot;, &quot;quist&quot;, &quot;quits&quot;, &quot;quoad&quot;, &quot;quods&quot;, &quot;quoif&quot;, &quot;quoin&quot;, &quot;quoit&quot;, &quot;quoll&quot;, &quot;quonk&quot;, &quot;quops&quot;, &quot;qursh&quot;, &quot;quyte&quot;, &quot;rabat&quot;, &quot;rabic&quot;, &quot;rabis&quot;, &quot;raced&quot;, &quot;races&quot;, &quot;rache&quot;, &quot;racks&quot;, &quot;racon&quot;, &quot;radge&quot;, &quot;radix&quot;, &quot;radon&quot;, &quot;raffs&quot;, &quot;rafts&quot;, &quot;ragas&quot;, &quot;ragde&quot;, &quot;raged&quot;, &quot;ragee&quot;, &quot;rager&quot;, &quot;rages&quot;, &quot;ragga&quot;, &quot;raggs&quot;, &quot;raggy&quot;, &quot;ragis&quot;, &quot;ragus&quot;, &quot;rahed&quot;, &quot;rahui&quot;, &quot;raias&quot;, &quot;raids&quot;, &quot;raiks&quot;, &quot;raile&quot;, &quot;rails&quot;, &quot;raine&quot;, &quot;rains&quot;, &quot;raird&quot;, &quot;raita&quot;, &quot;raits&quot;, &quot;rajas&quot;, &quot;rajes&quot;, &quot;raked&quot;, &quot;rakee&quot;, &quot;raker&quot;, &quot;rakes&quot;, &quot;rakia&quot;, &quot;rakis&quot;, &quot;rakus&quot;, &quot;rales&quot;, &quot;ramal&quot;, &quot;ramee&quot;, &quot;ramet&quot;, &quot;ramie&quot;, &quot;ramin&quot;, &quot;ramis&quot;, &quot;rammy&quot;, &quot;ramps&quot;, &quot;ramus&quot;, &quot;ranas&quot;, &quot;rance&quot;, &quot;rands&quot;, &quot;ranee&quot;, &quot;ranga&quot;, &quot;rangi&quot;, &quot;rangs&quot;, &quot;rangy&quot;, &quot;ranid&quot;, &quot;ranis&quot;, &quot;ranke&quot;, &quot;ranks&quot;, &quot;rants&quot;, &quot;raped&quot;, &quot;raper&quot;, &quot;rapes&quot;, &quot;raphe&quot;, &quot;rappe&quot;, &quot;rared&quot;, &quot;raree&quot;, &quot;rares&quot;, &quot;rarks&quot;, &quot;rased&quot;, &quot;raser&quot;, &quot;rases&quot;, &quot;rasps&quot;, &quot;rasse&quot;, &quot;rasta&quot;, &quot;ratal&quot;, &quot;ratan&quot;, &quot;ratas&quot;, &quot;ratch&quot;, &quot;rated&quot;, &quot;ratel&quot;, &quot;rater&quot;, &quot;rates&quot;, &quot;ratha&quot;, &quot;rathe&quot;, &quot;raths&quot;, &quot;ratoo&quot;, &quot;ratos&quot;, &quot;ratus&quot;, &quot;rauns&quot;, &quot;raupo&quot;, &quot;raved&quot;, &quot;ravel&quot;, &quot;raver&quot;, &quot;raves&quot;, &quot;ravey&quot;, &quot;ravin&quot;, &quot;rawer&quot;, &quot;rawin&quot;, &quot;rawly&quot;, &quot;rawns&quot;, &quot;raxed&quot;, &quot;raxes&quot;, &quot;rayah&quot;, &quot;rayas&quot;, &quot;rayed&quot;, &quot;rayle&quot;, &quot;rayne&quot;, &quot;razed&quot;, &quot;razee&quot;, &quot;razer&quot;, &quot;razes&quot;, &quot;razoo&quot;, &quot;readd&quot;, &quot;reads&quot;, &quot;reais&quot;, &quot;reaks&quot;, &quot;realo&quot;, &quot;reals&quot;, &quot;reame&quot;, &quot;reams&quot;, &quot;reamy&quot;, &quot;reans&quot;, &quot;reaps&quot;, &quot;rears&quot;, &quot;reast&quot;, &quot;reata&quot;, &quot;reate&quot;, &quot;reave&quot;, &quot;rebbe&quot;, &quot;rebec&quot;, &quot;rebid&quot;, &quot;rebit&quot;, &quot;rebop&quot;, &quot;rebuy&quot;, &quot;recal&quot;, &quot;recce&quot;, &quot;recco&quot;, &quot;reccy&quot;, &quot;recit&quot;, &quot;recks&quot;, &quot;recon&quot;, &quot;recta&quot;, &quot;recti&quot;, &quot;recto&quot;, &quot;redan&quot;, &quot;redds&quot;, &quot;reddy&quot;, &quot;reded&quot;, &quot;redes&quot;, &quot;redia&quot;, &quot;redid&quot;, &quot;redip&quot;, &quot;redly&quot;, &quot;redon&quot;, &quot;redos&quot;, &quot;redox&quot;, &quot;redry&quot;, &quot;redub&quot;, &quot;redux&quot;, &quot;redye&quot;, &quot;reech&quot;, &quot;reede&quot;, &quot;reeds&quot;, &quot;reefs&quot;, &quot;reefy&quot;, &quot;reeks&quot;, &quot;reeky&quot;, &quot;reels&quot;, &quot;reens&quot;, &quot;reest&quot;, &quot;reeve&quot;, &quot;refed&quot;, &quot;refel&quot;, &quot;reffo&quot;, &quot;refis&quot;, &quot;refix&quot;, &quot;refly&quot;, &quot;refry&quot;, &quot;regar&quot;, &quot;reges&quot;, &quot;reggo&quot;, &quot;regie&quot;, &quot;regma&quot;, &quot;regna&quot;, &quot;regos&quot;, &quot;regur&quot;, &quot;rehem&quot;, &quot;reifs&quot;, &quot;reify&quot;, &quot;reiki&quot;, &quot;reiks&quot;, &quot;reink&quot;, &quot;reins&quot;, &quot;reird&quot;, &quot;reist&quot;, &quot;reive&quot;, &quot;rejig&quot;, &quot;rejon&quot;, &quot;reked&quot;, &quot;rekes&quot;, &quot;rekey&quot;, &quot;relet&quot;, &quot;relie&quot;, &quot;relit&quot;, &quot;rello&quot;, &quot;reman&quot;, &quot;remap&quot;, &quot;remen&quot;, &quot;remet&quot;, &quot;remex&quot;, &quot;remix&quot;, &quot;renay&quot;, &quot;rends&quot;, &quot;reney&quot;, &quot;renga&quot;, &quot;renig&quot;, &quot;renin&quot;, &quot;renne&quot;, &quot;renos&quot;, &quot;rente&quot;, &quot;rents&quot;, &quot;reoil&quot;, &quot;reorg&quot;, &quot;repeg&quot;, &quot;repin&quot;, &quot;repla&quot;, &quot;repos&quot;, &quot;repot&quot;, &quot;repps&quot;, &quot;repro&quot;, &quot;reran&quot;, &quot;rerig&quot;, &quot;resat&quot;, &quot;resaw&quot;, &quot;resay&quot;, &quot;resee&quot;, &quot;reses&quot;, &quot;resew&quot;, &quot;resid&quot;, &quot;resit&quot;, &quot;resod&quot;, &quot;resow&quot;, &quot;resto&quot;, &quot;rests&quot;, &quot;resty&quot;, &quot;resus&quot;, &quot;retag&quot;, &quot;retax&quot;, &quot;retem&quot;, &quot;retia&quot;, &quot;retie&quot;, &quot;retox&quot;, &quot;revet&quot;, &quot;revie&quot;, &quot;rewan&quot;, &quot;rewax&quot;, &quot;rewed&quot;, &quot;rewet&quot;, &quot;rewin&quot;, &quot;rewon&quot;, &quot;rewth&quot;, &quot;rexes&quot;, &quot;rezes&quot;, &quot;rheas&quot;, &quot;rheme&quot;, &quot;rheum&quot;, &quot;rhies&quot;, &quot;rhime&quot;, &quot;rhine&quot;, &quot;rhody&quot;, &quot;rhomb&quot;, &quot;rhone&quot;, &quot;rhumb&quot;, &quot;rhyne&quot;, &quot;rhyta&quot;, &quot;riads&quot;, &quot;rials&quot;, &quot;riant&quot;, &quot;riata&quot;, &quot;ribas&quot;, &quot;ribby&quot;, &quot;ribes&quot;, &quot;riced&quot;, &quot;ricer&quot;, &quot;rices&quot;, &quot;ricey&quot;, &quot;richt&quot;, &quot;ricin&quot;, &quot;ricks&quot;, &quot;rides&quot;, &quot;ridgy&quot;, &quot;ridic&quot;, &quot;riels&quot;, &quot;riems&quot;, &quot;rieve&quot;, &quot;rifer&quot;, &quot;riffs&quot;, &quot;rifte&quot;, &quot;rifts&quot;, &quot;rifty&quot;, &quot;riggs&quot;, &quot;rigol&quot;, &quot;riled&quot;, &quot;riles&quot;, &quot;riley&quot;, &quot;rille&quot;, &quot;rills&quot;, &quot;rimae&quot;, &quot;rimed&quot;, &quot;rimer&quot;, &quot;rimes&quot;, &quot;rimus&quot;, &quot;rinds&quot;, &quot;rindy&quot;, &quot;rines&quot;, &quot;rings&quot;, &quot;rinks&quot;, &quot;rioja&quot;, &quot;riots&quot;, &quot;riped&quot;, &quot;ripes&quot;, &quot;ripps&quot;, &quot;rises&quot;, &quot;rishi&quot;, &quot;risks&quot;, &quot;risps&quot;, &quot;risus&quot;, &quot;rites&quot;, &quot;ritts&quot;, &quot;ritzy&quot;, &quot;rivas&quot;, &quot;rived&quot;, &quot;rivel&quot;, &quot;riven&quot;, &quot;rives&quot;, &quot;riyal&quot;, &quot;rizas&quot;, &quot;roads&quot;, &quot;roams&quot;, &quot;roans&quot;, &quot;roars&quot;, &quot;roary&quot;, &quot;roate&quot;, &quot;robed&quot;, &quot;robes&quot;, &quot;roble&quot;, &quot;rocks&quot;, &quot;roded&quot;, &quot;rodes&quot;, &quot;roguy&quot;, &quot;rohes&quot;, &quot;roids&quot;, &quot;roils&quot;, &quot;roily&quot;, &quot;roins&quot;, &quot;roist&quot;, &quot;rojak&quot;, &quot;rojis&quot;, &quot;roked&quot;, &quot;roker&quot;, &quot;rokes&quot;, &quot;rolag&quot;, &quot;roles&quot;, &quot;rolfs&quot;, &quot;rolls&quot;, &quot;romal&quot;, &quot;roman&quot;, &quot;romeo&quot;, &quot;romps&quot;, &quot;ronde&quot;, &quot;rondo&quot;, &quot;roneo&quot;, &quot;rones&quot;, &quot;ronin&quot;, &quot;ronne&quot;, &quot;ronte&quot;, &quot;ronts&quot;, &quot;roods&quot;, &quot;roofs&quot;, &quot;roofy&quot;, &quot;rooks&quot;, &quot;rooky&quot;, &quot;rooms&quot;, &quot;roons&quot;, &quot;roops&quot;, &quot;roopy&quot;, &quot;roosa&quot;, &quot;roose&quot;, &quot;roots&quot;, &quot;rooty&quot;, &quot;roped&quot;, &quot;roper&quot;, &quot;ropes&quot;, &quot;ropey&quot;, &quot;roque&quot;, &quot;roral&quot;, &quot;rores&quot;, &quot;roric&quot;, &quot;rorid&quot;, &quot;rorie&quot;, &quot;rorts&quot;, &quot;rorty&quot;, &quot;rosed&quot;, &quot;roses&quot;, &quot;roset&quot;, &quot;roshi&quot;, &quot;rosin&quot;, &quot;rosit&quot;, &quot;rosti&quot;, &quot;rosts&quot;, &quot;rotal&quot;, &quot;rotan&quot;, &quot;rotas&quot;, &quot;rotch&quot;, &quot;roted&quot;, &quot;rotes&quot;, &quot;rotis&quot;, &quot;rotls&quot;, &quot;roton&quot;, &quot;rotos&quot;, &quot;rotte&quot;, &quot;rouen&quot;, &quot;roues&quot;, &quot;roule&quot;, &quot;rouls&quot;, &quot;roums&quot;, &quot;roups&quot;, &quot;roupy&quot;, &quot;roust&quot;, &quot;routh&quot;, &quot;routs&quot;, &quot;roved&quot;, &quot;roven&quot;, &quot;roves&quot;, &quot;rowan&quot;, &quot;rowed&quot;, &quot;rowel&quot;, &quot;rowen&quot;, &quot;rowie&quot;, &quot;rowme&quot;, &quot;rownd&quot;, &quot;rowth&quot;, &quot;rowts&quot;, &quot;royne&quot;, &quot;royst&quot;, &quot;rozet&quot;, &quot;rozit&quot;, &quot;ruana&quot;, &quot;rubai&quot;, &quot;rubby&quot;, &quot;rubel&quot;, &quot;rubes&quot;, &quot;rubin&quot;, &quot;ruble&quot;, &quot;rubli&quot;, &quot;rubus&quot;, &quot;ruche&quot;, &quot;rucks&quot;, &quot;rudas&quot;, &quot;rudds&quot;, &quot;rudes&quot;, &quot;rudie&quot;, &quot;rudis&quot;, &quot;rueda&quot;, &quot;ruers&quot;, &quot;ruffe&quot;, &quot;ruffs&quot;, &quot;rugae&quot;, &quot;rugal&quot;, &quot;ruggy&quot;, &quot;ruing&quot;, &quot;ruins&quot;, &quot;rukhs&quot;, &quot;ruled&quot;, &quot;rules&quot;, &quot;rumal&quot;, &quot;rumbo&quot;, &quot;rumen&quot;, &quot;rumes&quot;, &quot;rumly&quot;, &quot;rummy&quot;, &quot;rumpo&quot;, &quot;rumps&quot;, &quot;rumpy&quot;, &quot;runch&quot;, &quot;runds&quot;, &quot;runed&quot;, &quot;runes&quot;, &quot;rungs&quot;, &quot;runic&quot;, &quot;runny&quot;, &quot;runts&quot;, &quot;runty&quot;, &quot;rupia&quot;, &quot;rurps&quot;, &quot;rurus&quot;, &quot;rusas&quot;, &quot;ruses&quot;, &quot;rushy&quot;, &quot;rusks&quot;, &quot;rusma&quot;, &quot;russe&quot;, &quot;rusts&quot;, &quot;ruths&quot;, &quot;rutin&quot;, &quot;rutty&quot;, &quot;ryals&quot;, &quot;rybat&quot;, &quot;ryked&quot;, &quot;rykes&quot;, &quot;rymme&quot;, &quot;rynds&quot;, &quot;ryots&quot;, &quot;ryper&quot;, &quot;saags&quot;, &quot;sabal&quot;, &quot;sabed&quot;, &quot;saber&quot;, &quot;sabes&quot;, &quot;sabha&quot;, &quot;sabin&quot;, &quot;sabir&quot;, &quot;sable&quot;, &quot;sabot&quot;, &quot;sabra&quot;, &quot;sabre&quot;, &quot;sacks&quot;, &quot;sacra&quot;, &quot;saddo&quot;, &quot;sades&quot;, &quot;sadhe&quot;, &quot;sadhu&quot;, &quot;sadis&quot;, &quot;sados&quot;, &quot;sadza&quot;, &quot;safed&quot;, &quot;safes&quot;, &quot;sagas&quot;, &quot;sager&quot;, &quot;sages&quot;, &quot;saggy&quot;, &quot;sagos&quot;, &quot;sagum&quot;, &quot;saheb&quot;, &quot;sahib&quot;, &quot;saice&quot;, &quot;saick&quot;, &quot;saics&quot;, &quot;saids&quot;, &quot;saiga&quot;, &quot;sails&quot;, &quot;saims&quot;, &quot;saine&quot;, &quot;sains&quot;, &quot;sairs&quot;, &quot;saist&quot;, &quot;saith&quot;, &quot;sajou&quot;, &quot;sakai&quot;, &quot;saker&quot;, &quot;sakes&quot;, &quot;sakia&quot;, &quot;sakis&quot;, &quot;sakti&quot;, &quot;salal&quot;, &quot;salat&quot;, &quot;salep&quot;, &quot;sales&quot;, &quot;salet&quot;, &quot;salic&quot;, &quot;salix&quot;, &quot;salle&quot;, &quot;salmi&quot;, &quot;salol&quot;, &quot;salop&quot;, &quot;salpa&quot;, &quot;salps&quot;, &quot;salse&quot;, &quot;salto&quot;, &quot;salts&quot;, &quot;salue&quot;, &quot;salut&quot;, &quot;saman&quot;, &quot;samas&quot;, &quot;samba&quot;, &quot;sambo&quot;, &quot;samek&quot;, &quot;samel&quot;, &quot;samen&quot;, &quot;sames&quot;, &quot;samey&quot;, &quot;samfu&quot;, &quot;sammy&quot;, &quot;sampi&quot;, &quot;samps&quot;, &quot;sands&quot;, &quot;saned&quot;, &quot;sanes&quot;, &quot;sanga&quot;, &quot;sangh&quot;, &quot;sango&quot;, &quot;sangs&quot;, &quot;sanko&quot;, &quot;sansa&quot;, &quot;santo&quot;, &quot;sants&quot;, &quot;saola&quot;, &quot;sapan&quot;, &quot;sapid&quot;, &quot;sapor&quot;, &quot;saran&quot;, &quot;sards&quot;, &quot;sared&quot;, &quot;saree&quot;, &quot;sarge&quot;, &quot;sargo&quot;, &quot;sarin&quot;, &quot;saris&quot;, &quot;sarks&quot;, &quot;sarky&quot;, &quot;sarod&quot;, &quot;saros&quot;, &quot;sarus&quot;, &quot;saser&quot;, &quot;sasin&quot;, &quot;sasse&quot;, &quot;satai&quot;, &quot;satay&quot;, &quot;sated&quot;, &quot;satem&quot;, &quot;sates&quot;, &quot;satis&quot;, &quot;sauba&quot;, &quot;sauch&quot;, &quot;saugh&quot;, &quot;sauls&quot;, &quot;sault&quot;, &quot;saunt&quot;, &quot;saury&quot;, &quot;sauts&quot;, &quot;saved&quot;, &quot;saver&quot;, &quot;saves&quot;, &quot;savey&quot;, &quot;savin&quot;, &quot;sawah&quot;, &quot;sawed&quot;, &quot;sawer&quot;, &quot;saxes&quot;, &quot;sayed&quot;, &quot;sayer&quot;, &quot;sayid&quot;, &quot;sayne&quot;, &quot;sayon&quot;, &quot;sayst&quot;, &quot;sazes&quot;, &quot;scabs&quot;, &quot;scads&quot;, &quot;scaff&quot;, &quot;scags&quot;, &quot;scail&quot;, &quot;scala&quot;, &quot;scall&quot;, &quot;scams&quot;, &quot;scand&quot;, &quot;scans&quot;, &quot;scapa&quot;, &quot;scape&quot;, &quot;scapi&quot;, &quot;scarp&quot;, &quot;scars&quot;, &quot;scart&quot;, &quot;scath&quot;, &quot;scats&quot;, &quot;scatt&quot;, &quot;scaud&quot;, &quot;scaup&quot;, &quot;scaur&quot;, &quot;scaws&quot;, &quot;sceat&quot;, &quot;scena&quot;, &quot;scend&quot;, &quot;schav&quot;, &quot;schmo&quot;, &quot;schul&quot;, &quot;schwa&quot;, &quot;sclim&quot;, &quot;scody&quot;, &quot;scogs&quot;, &quot;scoog&quot;, &quot;scoot&quot;, &quot;scopa&quot;, &quot;scops&quot;, &quot;scots&quot;, &quot;scoug&quot;, &quot;scoup&quot;, &quot;scowp&quot;, &quot;scows&quot;, &quot;scrab&quot;, &quot;scrae&quot;, &quot;scrag&quot;, &quot;scran&quot;, &quot;scrat&quot;, &quot;scraw&quot;, &quot;scray&quot;, &quot;scrim&quot;, &quot;scrip&quot;, &quot;scrob&quot;, &quot;scrod&quot;, &quot;scrog&quot;, &quot;scrow&quot;, &quot;scudi&quot;, &quot;scudo&quot;, &quot;scuds&quot;, &quot;scuff&quot;, &quot;scuft&quot;, &quot;scugs&quot;, &quot;sculk&quot;, &quot;scull&quot;, &quot;sculp&quot;, &quot;sculs&quot;, &quot;scums&quot;, &quot;scups&quot;, &quot;scurf&quot;, &quot;scurs&quot;, &quot;scuse&quot;, &quot;scuta&quot;, &quot;scute&quot;, &quot;scuts&quot;, &quot;scuzz&quot;, &quot;scyes&quot;, &quot;sdayn&quot;, &quot;sdein&quot;, &quot;seals&quot;, &quot;seame&quot;, &quot;seams&quot;, &quot;seamy&quot;, &quot;seans&quot;, &quot;seare&quot;, &quot;sears&quot;, &quot;sease&quot;, &quot;seats&quot;, &quot;seaze&quot;, &quot;sebum&quot;, &quot;secco&quot;, &quot;sechs&quot;, &quot;sects&quot;, &quot;seder&quot;, &quot;sedes&quot;, &quot;sedge&quot;, &quot;sedgy&quot;, &quot;sedum&quot;, &quot;seeds&quot;, &quot;seeks&quot;, &quot;seeld&quot;, &quot;seels&quot;, &quot;seely&quot;, &quot;seems&quot;, &quot;seeps&quot;, &quot;seepy&quot;, &quot;seers&quot;, &quot;sefer&quot;, &quot;segar&quot;, &quot;segni&quot;, &quot;segno&quot;, &quot;segol&quot;, &quot;segos&quot;, &quot;sehri&quot;, &quot;seifs&quot;, &quot;seils&quot;, &quot;seine&quot;, &quot;seirs&quot;, &quot;seise&quot;, &quot;seism&quot;, &quot;seity&quot;, &quot;seiza&quot;, &quot;sekos&quot;, &quot;sekts&quot;, &quot;selah&quot;, &quot;seles&quot;, &quot;selfs&quot;, &quot;sella&quot;, &quot;selle&quot;, &quot;sells&quot;, &quot;selva&quot;, &quot;semee&quot;, &quot;semes&quot;, &quot;semie&quot;, &quot;semis&quot;, &quot;senas&quot;, &quot;sends&quot;, &quot;senes&quot;, &quot;sengi&quot;, &quot;senna&quot;, &quot;senor&quot;, &quot;sensa&quot;, &quot;sensi&quot;, &quot;sente&quot;, &quot;senti&quot;, &quot;sents&quot;, &quot;senvy&quot;, &quot;senza&quot;, &quot;sepad&quot;, &quot;sepal&quot;, &quot;sepic&quot;, &quot;sepoy&quot;, &quot;septa&quot;, &quot;septs&quot;, &quot;serac&quot;, &quot;serai&quot;, &quot;seral&quot;, &quot;sered&quot;, &quot;serer&quot;, &quot;seres&quot;, &quot;serfs&quot;, &quot;serge&quot;, &quot;seric&quot;, &quot;serin&quot;, &quot;serks&quot;, &quot;seron&quot;, &quot;serow&quot;, &quot;serra&quot;, &quot;serre&quot;, &quot;serrs&quot;, &quot;serry&quot;, &quot;servo&quot;, &quot;sesey&quot;, &quot;sessa&quot;, &quot;setae&quot;, &quot;setal&quot;, &quot;seton&quot;, &quot;setts&quot;, &quot;sewan&quot;, &quot;sewar&quot;, &quot;sewed&quot;, &quot;sewel&quot;, &quot;sewen&quot;, &quot;sewin&quot;, &quot;sexed&quot;, &quot;sexer&quot;, &quot;sexes&quot;, &quot;sexto&quot;, &quot;sexts&quot;, &quot;seyen&quot;, &quot;shads&quot;, &quot;shags&quot;, &quot;shahs&quot;, &quot;shako&quot;, &quot;shakt&quot;, &quot;shalm&quot;, &quot;shaly&quot;, &quot;shama&quot;, &quot;shams&quot;, &quot;shand&quot;, &quot;shans&quot;, &quot;shaps&quot;, &quot;sharn&quot;, &quot;shash&quot;, &quot;shaul&quot;, &quot;shawm&quot;, &quot;shawn&quot;, &quot;shaws&quot;, &quot;shaya&quot;, &quot;shays&quot;, &quot;shchi&quot;, &quot;sheaf&quot;, &quot;sheal&quot;, &quot;sheas&quot;, &quot;sheds&quot;, &quot;sheel&quot;, &quot;shend&quot;, &quot;shent&quot;, &quot;sheol&quot;, &quot;sherd&quot;, &quot;shere&quot;, &quot;shero&quot;, &quot;shets&quot;, &quot;sheva&quot;, &quot;shewn&quot;, &quot;shews&quot;, &quot;shiai&quot;, &quot;shiel&quot;, &quot;shier&quot;, &quot;shies&quot;, &quot;shill&quot;, &quot;shily&quot;, &quot;shims&quot;, &quot;shins&quot;, &quot;ships&quot;, &quot;shirr&quot;, &quot;shirs&quot;, &quot;shish&quot;, &quot;shiso&quot;, &quot;shist&quot;, &quot;shite&quot;, &quot;shits&quot;, &quot;shiur&quot;, &quot;shiva&quot;, &quot;shive&quot;, &quot;shivs&quot;, &quot;shlep&quot;, &quot;shlub&quot;, &quot;shmek&quot;, &quot;shmoe&quot;, &quot;shoat&quot;, &quot;shoed&quot;, &quot;shoer&quot;, &quot;shoes&quot;, &quot;shogi&quot;, &quot;shogs&quot;, &quot;shoji&quot;, &quot;shojo&quot;, &quot;shola&quot;, &quot;shool&quot;, &quot;shoon&quot;, &quot;shoos&quot;, &quot;shope&quot;, &quot;shops&quot;, &quot;shorl&quot;, &quot;shote&quot;, &quot;shots&quot;, &quot;shott&quot;, &quot;showd&quot;, &quot;shows&quot;, &quot;shoyu&quot;, &quot;shred&quot;, &quot;shris&quot;, &quot;shrow&quot;, &quot;shtik&quot;, &quot;shtum&quot;, &quot;shtup&quot;, &quot;shule&quot;, &quot;shuln&quot;, &quot;shuls&quot;, &quot;shuns&quot;, &quot;shura&quot;, &quot;shute&quot;, &quot;shuts&quot;, &quot;shwas&quot;, &quot;shyer&quot;, &quot;sials&quot;, &quot;sibbs&quot;, &quot;sibyl&quot;, &quot;sices&quot;, &quot;sicht&quot;, &quot;sicko&quot;, &quot;sicks&quot;, &quot;sicky&quot;, &quot;sidas&quot;, &quot;sided&quot;, &quot;sider&quot;, &quot;sides&quot;, &quot;sidha&quot;, &quot;sidhe&quot;, &quot;sidle&quot;, &quot;sield&quot;, &quot;siens&quot;, &quot;sient&quot;, &quot;sieth&quot;, &quot;sieur&quot;, &quot;sifts&quot;, &quot;sighs&quot;, &quot;sigil&quot;, &quot;sigla&quot;, &quot;signa&quot;, &quot;signs&quot;, &quot;sijos&quot;, &quot;sikas&quot;, &quot;siker&quot;, &quot;sikes&quot;, &quot;silds&quot;, &quot;siled&quot;, &quot;silen&quot;, &quot;siler&quot;, &quot;siles&quot;, &quot;silex&quot;, &quot;silks&quot;, &quot;sills&quot;, &quot;silos&quot;, &quot;silts&quot;, &quot;silty&quot;, &quot;silva&quot;, &quot;simar&quot;, &quot;simas&quot;, &quot;simba&quot;, &quot;simis&quot;, &quot;simps&quot;, &quot;simul&quot;, &quot;sinds&quot;, &quot;sined&quot;, &quot;sines&quot;, &quot;sings&quot;, &quot;sinhs&quot;, &quot;sinks&quot;, &quot;sinky&quot;, &quot;sinus&quot;, &quot;siped&quot;, &quot;sipes&quot;, &quot;sippy&quot;, &quot;sired&quot;, &quot;siree&quot;, &quot;sires&quot;, &quot;sirih&quot;, &quot;siris&quot;, &quot;siroc&quot;, &quot;sirra&quot;, &quot;sirup&quot;, &quot;sisal&quot;, &quot;sises&quot;, &quot;sista&quot;, &quot;sists&quot;, &quot;sitar&quot;, &quot;sited&quot;, &quot;sites&quot;, &quot;sithe&quot;, &quot;sitka&quot;, &quot;situp&quot;, &quot;situs&quot;, &quot;siver&quot;, &quot;sixer&quot;, &quot;sixes&quot;, &quot;sixmo&quot;, &quot;sixte&quot;, &quot;sizar&quot;, &quot;sized&quot;, &quot;sizel&quot;, &quot;sizer&quot;, &quot;sizes&quot;, &quot;skags&quot;, &quot;skail&quot;, &quot;skald&quot;, &quot;skank&quot;, &quot;skart&quot;, &quot;skats&quot;, &quot;skatt&quot;, &quot;skaws&quot;, &quot;skean&quot;, &quot;skear&quot;, &quot;skeds&quot;, &quot;skeed&quot;, &quot;skeef&quot;, &quot;skeen&quot;, &quot;skeer&quot;, &quot;skees&quot;, &quot;skeet&quot;, &quot;skegg&quot;, &quot;skegs&quot;, &quot;skein&quot;, &quot;skelf&quot;, &quot;skell&quot;, &quot;skelm&quot;, &quot;skelp&quot;, &quot;skene&quot;, &quot;skens&quot;, &quot;skeos&quot;, &quot;skeps&quot;, &quot;skers&quot;, &quot;skets&quot;, &quot;skews&quot;, &quot;skids&quot;, &quot;skied&quot;, &quot;skies&quot;, &quot;skiey&quot;, &quot;skimo&quot;, &quot;skims&quot;, &quot;skink&quot;, &quot;skins&quot;, &quot;skint&quot;, &quot;skios&quot;, &quot;skips&quot;, &quot;skirl&quot;, &quot;skirr&quot;, &quot;skite&quot;, &quot;skits&quot;, &quot;skive&quot;, &quot;skivy&quot;, &quot;sklim&quot;, &quot;skoal&quot;, &quot;skody&quot;, &quot;skoff&quot;, &quot;skogs&quot;, &quot;skols&quot;, &quot;skool&quot;, &quot;skort&quot;, &quot;skosh&quot;, &quot;skran&quot;, &quot;skrik&quot;, &quot;skuas&quot;, &quot;skugs&quot;, &quot;skyed&quot;, &quot;skyer&quot;, &quot;skyey&quot;, &quot;skyfs&quot;, &quot;skyre&quot;, &quot;skyrs&quot;, &quot;skyte&quot;, &quot;slabs&quot;, &quot;slade&quot;, &quot;slaes&quot;, &quot;slags&quot;, &quot;slaid&quot;, &quot;slake&quot;, &quot;slams&quot;, &quot;slane&quot;, &quot;slank&quot;, &quot;slaps&quot;, &quot;slart&quot;, &quot;slats&quot;, &quot;slaty&quot;, &quot;slaws&quot;, &quot;slays&quot;, &quot;slebs&quot;, &quot;sleds&quot;, &quot;sleer&quot;, &quot;slews&quot;, &quot;sleys&quot;, &quot;slier&quot;, &quot;slily&quot;, &quot;slims&quot;, &quot;slipe&quot;, &quot;slips&quot;, &quot;slipt&quot;, &quot;slish&quot;, &quot;slits&quot;, &quot;slive&quot;, &quot;sloan&quot;, &quot;slobs&quot;, &quot;sloes&quot;, &quot;slogs&quot;, &quot;sloid&quot;, &quot;slojd&quot;, &quot;slomo&quot;, &quot;sloom&quot;, &quot;sloot&quot;, &quot;slops&quot;, &quot;slopy&quot;, &quot;slorm&quot;, &quot;slots&quot;, &quot;slove&quot;, &quot;slows&quot;, &quot;sloyd&quot;, &quot;slubb&quot;, &quot;slubs&quot;, &quot;slued&quot;, &quot;slues&quot;, &quot;sluff&quot;, &quot;slugs&quot;, &quot;sluit&quot;, &quot;slums&quot;, &quot;slurb&quot;, &quot;slurs&quot;, &quot;sluse&quot;, &quot;slyer&quot;, &quot;slype&quot;, &quot;smaak&quot;, &quot;smaik&quot;, &quot;smalm&quot;, &quot;smalt&quot;, &quot;smarm&quot;, &quot;smaze&quot;, &quot;smeek&quot;, &quot;smees&quot;, &quot;smeik&quot;, &quot;smeke&quot;, &quot;smerk&quot;, &quot;smews&quot;, &quot;smirr&quot;, &quot;smirs&quot;, &quot;smits&quot;, &quot;smogs&quot;, &quot;smoko&quot;, &quot;smolt&quot;, &quot;smoor&quot;, &quot;smoot&quot;, &quot;smore&quot;, &quot;smorg&quot;, &quot;smout&quot;, &quot;smowt&quot;, &quot;smugs&quot;, &quot;smurs&quot;, &quot;smush&quot;, &quot;smuts&quot;, &quot;snabs&quot;, &quot;snafu&quot;, &quot;snags&quot;, &quot;snaps&quot;, &quot;snarf&quot;, &quot;snark&quot;, &quot;snars&quot;, &quot;snary&quot;, &quot;snash&quot;, &quot;snath&quot;, &quot;snaws&quot;, &quot;snead&quot;, &quot;sneap&quot;, &quot;snebs&quot;, &quot;sneck&quot;, &quot;sneds&quot;, &quot;sneed&quot;, &quot;snees&quot;, &quot;snell&quot;, &quot;snibs&quot;, &quot;snick&quot;, &quot;snies&quot;, &quot;snift&quot;, &quot;snigs&quot;, &quot;snips&quot;, &quot;snipy&quot;, &quot;snirt&quot;, &quot;snits&quot;, &quot;snobs&quot;, &quot;snods&quot;, &quot;snoek&quot;, &quot;snoep&quot;, &quot;snogs&quot;, &quot;snoke&quot;, &quot;snood&quot;, &quot;snook&quot;, &quot;snool&quot;, &quot;snoot&quot;, &quot;snots&quot;, &quot;snowk&quot;, &quot;snows&quot;, &quot;snubs&quot;, &quot;snugs&quot;, &quot;snush&quot;, &quot;snyes&quot;, &quot;soaks&quot;, &quot;soaps&quot;, &quot;soare&quot;, &quot;soars&quot;, &quot;soave&quot;, &quot;sobas&quot;, &quot;socas&quot;, &quot;soces&quot;, &quot;socko&quot;, &quot;socks&quot;, &quot;socle&quot;, &quot;sodas&quot;, &quot;soddy&quot;, &quot;sodic&quot;, &quot;sodom&quot;, &quot;sofar&quot;, &quot;sofas&quot;, &quot;softa&quot;, &quot;softs&quot;, &quot;softy&quot;, &quot;soger&quot;, &quot;sohur&quot;, &quot;soils&quot;, &quot;soily&quot;, &quot;sojas&quot;, &quot;sojus&quot;, &quot;sokah&quot;, &quot;soken&quot;, &quot;sokes&quot;, &quot;sokol&quot;, &quot;solah&quot;, &quot;solan&quot;, &quot;solas&quot;, &quot;solde&quot;, &quot;soldi&quot;, &quot;soldo&quot;, &quot;solds&quot;, &quot;soled&quot;, &quot;solei&quot;, &quot;soler&quot;, &quot;soles&quot;, &quot;solon&quot;, &quot;solos&quot;, &quot;solum&quot;, &quot;solus&quot;, &quot;soman&quot;, &quot;somas&quot;, &quot;sonce&quot;, &quot;sonde&quot;, &quot;sones&quot;, &quot;songs&quot;, &quot;sonly&quot;, &quot;sonne&quot;, &quot;sonny&quot;, &quot;sonse&quot;, &quot;sonsy&quot;, &quot;sooey&quot;, &quot;sooks&quot;, &quot;sooky&quot;, &quot;soole&quot;, &quot;sools&quot;, &quot;sooms&quot;, &quot;soops&quot;, &quot;soote&quot;, &quot;soots&quot;, &quot;sophs&quot;, &quot;sophy&quot;, &quot;sopor&quot;, &quot;soppy&quot;, &quot;sopra&quot;, &quot;soral&quot;, &quot;soras&quot;, &quot;sorbo&quot;, &quot;sorbs&quot;, &quot;sorda&quot;, &quot;sordo&quot;, &quot;sords&quot;, &quot;sored&quot;, &quot;soree&quot;, &quot;sorel&quot;, &quot;sorer&quot;, &quot;sores&quot;, &quot;sorex&quot;, &quot;sorgo&quot;, &quot;sorns&quot;, &quot;sorra&quot;, &quot;sorta&quot;, &quot;sorts&quot;, &quot;sorus&quot;, &quot;soths&quot;, &quot;sotol&quot;, &quot;souce&quot;, &quot;souct&quot;, &quot;sough&quot;, &quot;souks&quot;, &quot;souls&quot;, &quot;soums&quot;, &quot;soups&quot;, &quot;soupy&quot;, &quot;sours&quot;, &quot;souse&quot;, &quot;souts&quot;, &quot;sowar&quot;, &quot;sowce&quot;, &quot;sowed&quot;, &quot;sowff&quot;, &quot;sowfs&quot;, &quot;sowle&quot;, &quot;sowls&quot;, &quot;sowms&quot;, &quot;sownd&quot;, &quot;sowne&quot;, &quot;sowps&quot;, &quot;sowse&quot;, &quot;sowth&quot;, &quot;soyas&quot;, &quot;soyle&quot;, &quot;soyuz&quot;, &quot;sozin&quot;, &quot;spacy&quot;, &quot;spado&quot;, &quot;spaed&quot;, &quot;spaer&quot;, &quot;spaes&quot;, &quot;spags&quot;, &quot;spahi&quot;, &quot;spail&quot;, &quot;spain&quot;, &quot;spait&quot;, &quot;spake&quot;, &quot;spald&quot;, &quot;spale&quot;, &quot;spall&quot;, &quot;spalt&quot;, &quot;spams&quot;, &quot;spane&quot;, &quot;spang&quot;, &quot;spans&quot;, &quot;spard&quot;, &quot;spars&quot;, &quot;spart&quot;, &quot;spate&quot;, &quot;spats&quot;, &quot;spaul&quot;, &quot;spawl&quot;, &quot;spaws&quot;, &quot;spayd&quot;, &quot;spays&quot;, &quot;spaza&quot;, &quot;spazz&quot;, &quot;speal&quot;, &quot;spean&quot;, &quot;speat&quot;, &quot;specs&quot;, &quot;spect&quot;, &quot;speel&quot;, &quot;speer&quot;, &quot;speil&quot;, &quot;speir&quot;, &quot;speks&quot;, &quot;speld&quot;, &quot;spelk&quot;, &quot;speos&quot;, &quot;spets&quot;, &quot;speug&quot;, &quot;spews&quot;, &quot;spewy&quot;, &quot;spial&quot;, &quot;spica&quot;, &quot;spide&quot;, &quot;spier&quot;, &quot;spies&quot;, &quot;spiff&quot;, &quot;spifs&quot;, &quot;spile&quot;, &quot;spims&quot;, &quot;spina&quot;, &quot;spink&quot;, &quot;spins&quot;, &quot;spirt&quot;, &quot;spiry&quot;, &quot;spits&quot;, &quot;spitz&quot;, &quot;spivs&quot;, &quot;splay&quot;, &quot;splog&quot;, &quot;spode&quot;, &quot;spods&quot;, &quot;spoom&quot;, &quot;spoor&quot;, &quot;spoot&quot;, &quot;spork&quot;, &quot;sposh&quot;, &quot;spots&quot;, &quot;sprad&quot;, &quot;sprag&quot;, &quot;sprat&quot;, &quot;spred&quot;, &quot;sprew&quot;, &quot;sprit&quot;, &quot;sprod&quot;, &quot;sprog&quot;, &quot;sprue&quot;, &quot;sprug&quot;, &quot;spuds&quot;, &quot;spued&quot;, &quot;spuer&quot;, &quot;spues&quot;, &quot;spugs&quot;, &quot;spule&quot;, &quot;spume&quot;, &quot;spumy&quot;, &quot;spurs&quot;, &quot;sputa&quot;, &quot;spyal&quot;, &quot;spyre&quot;, &quot;squab&quot;, &quot;squaw&quot;, &quot;squeg&quot;, &quot;squid&quot;, &quot;squit&quot;, &quot;squiz&quot;, &quot;stabs&quot;, &quot;stade&quot;, &quot;stags&quot;, &quot;stagy&quot;, &quot;staig&quot;, &quot;stane&quot;, &quot;stang&quot;, &quot;staph&quot;, &quot;staps&quot;, &quot;starn&quot;, &quot;starr&quot;, &quot;stars&quot;, &quot;stats&quot;, &quot;staun&quot;, &quot;staws&quot;, &quot;stays&quot;, &quot;stean&quot;, &quot;stear&quot;, &quot;stedd&quot;, &quot;stede&quot;, &quot;steds&quot;, &quot;steek&quot;, &quot;steem&quot;, &quot;steen&quot;, &quot;steil&quot;, &quot;stela&quot;, &quot;stele&quot;, &quot;stell&quot;, &quot;steme&quot;, &quot;stems&quot;, &quot;stend&quot;, &quot;steno&quot;, &quot;stens&quot;, &quot;stent&quot;, &quot;steps&quot;, &quot;stept&quot;, &quot;stere&quot;, &quot;stets&quot;, &quot;stews&quot;, &quot;stewy&quot;, &quot;steys&quot;, &quot;stich&quot;, &quot;stied&quot;, &quot;sties&quot;, &quot;stilb&quot;, &quot;stile&quot;, &quot;stime&quot;, &quot;stims&quot;, &quot;stimy&quot;, &quot;stipa&quot;, &quot;stipe&quot;, &quot;stire&quot;, &quot;stirk&quot;, &quot;stirp&quot;, &quot;stirs&quot;, &quot;stive&quot;, &quot;stivy&quot;, &quot;stoae&quot;, &quot;stoai&quot;, &quot;stoas&quot;, &quot;stoat&quot;, &quot;stobs&quot;, &quot;stoep&quot;, &quot;stogy&quot;, &quot;stoit&quot;, &quot;stoln&quot;, &quot;stoma&quot;, &quot;stond&quot;, &quot;stong&quot;, &quot;stonk&quot;, &quot;stonn&quot;, &quot;stook&quot;, &quot;stoor&quot;, &quot;stope&quot;, &quot;stops&quot;, &quot;stopt&quot;, &quot;stoss&quot;, &quot;stots&quot;, &quot;stott&quot;, &quot;stoun&quot;, &quot;stoup&quot;, &quot;stour&quot;, &quot;stown&quot;, &quot;stowp&quot;, &quot;stows&quot;, &quot;strad&quot;, &quot;strae&quot;, &quot;strag&quot;, &quot;strak&quot;, &quot;strep&quot;, &quot;strew&quot;, &quot;stria&quot;, &quot;strig&quot;, &quot;strim&quot;, &quot;strop&quot;, &quot;strow&quot;, &quot;stroy&quot;, &quot;strum&quot;, &quot;stubs&quot;, &quot;stude&quot;, &quot;studs&quot;, &quot;stull&quot;, &quot;stulm&quot;, &quot;stumm&quot;, &quot;stums&quot;, &quot;stuns&quot;, &quot;stupa&quot;, &quot;stupe&quot;, &quot;sture&quot;, &quot;sturt&quot;, &quot;styed&quot;, &quot;styes&quot;, &quot;styli&quot;, &quot;stylo&quot;, &quot;styme&quot;, &quot;stymy&quot;, &quot;styre&quot;, &quot;styte&quot;, &quot;subah&quot;, &quot;subas&quot;, &quot;subby&quot;, &quot;suber&quot;, &quot;subha&quot;, &quot;succi&quot;, &quot;sucks&quot;, &quot;sucky&quot;, &quot;sucre&quot;, &quot;sudds&quot;, &quot;sudor&quot;, &quot;sudsy&quot;, &quot;suede&quot;, &quot;suent&quot;, &quot;suers&quot;, &quot;suete&quot;, &quot;suets&quot;, &quot;suety&quot;, &quot;sugan&quot;, &quot;sughs&quot;, &quot;sugos&quot;, &quot;suhur&quot;, &quot;suids&quot;, &quot;suint&quot;, &quot;suits&quot;, &quot;sujee&quot;, &quot;sukhs&quot;, &quot;sukuk&quot;, &quot;sulci&quot;, &quot;sulfa&quot;, &quot;sulfo&quot;, &quot;sulks&quot;, &quot;sulph&quot;, &quot;sulus&quot;, &quot;sumis&quot;, &quot;summa&quot;, &quot;sumos&quot;, &quot;sumph&quot;, &quot;sumps&quot;, &quot;sunis&quot;, &quot;sunks&quot;, &quot;sunna&quot;, &quot;sunns&quot;, &quot;sunup&quot;, &quot;supes&quot;, &quot;supra&quot;, &quot;surah&quot;, &quot;sural&quot;, &quot;suras&quot;, &quot;surat&quot;, &quot;surds&quot;, &quot;sured&quot;, &quot;sures&quot;, &quot;surfs&quot;, &quot;surfy&quot;, &quot;surgy&quot;, &quot;surra&quot;, &quot;sused&quot;, &quot;suses&quot;, &quot;susus&quot;, &quot;sutor&quot;, &quot;sutra&quot;, &quot;sutta&quot;, &quot;swabs&quot;, &quot;swack&quot;, &quot;swads&quot;, &quot;swage&quot;, &quot;swags&quot;, &quot;swail&quot;, &quot;swain&quot;, &quot;swale&quot;, &quot;swaly&quot;, &quot;swamy&quot;, &quot;swang&quot;, &quot;swank&quot;, &quot;swans&quot;, &quot;swaps&quot;, &quot;swapt&quot;, &quot;sward&quot;, &quot;sware&quot;, &quot;swarf&quot;, &quot;swart&quot;, &quot;swats&quot;, &quot;swayl&quot;, &quot;sways&quot;, &quot;sweal&quot;, &quot;swede&quot;, &quot;sweed&quot;, &quot;sweel&quot;, &quot;sweer&quot;, &quot;swees&quot;, &quot;sweir&quot;, &quot;swelt&quot;, &quot;swerf&quot;, &quot;sweys&quot;, &quot;swies&quot;, &quot;swigs&quot;, &quot;swile&quot;, &quot;swims&quot;, &quot;swink&quot;, &quot;swipe&quot;, &quot;swire&quot;, &quot;swiss&quot;, &quot;swith&quot;, &quot;swits&quot;, &quot;swive&quot;, &quot;swizz&quot;, &quot;swobs&quot;, &quot;swole&quot;, &quot;swoln&quot;, &quot;swops&quot;, &quot;swopt&quot;, &quot;swots&quot;, &quot;swoun&quot;, &quot;sybbe&quot;, &quot;sybil&quot;, &quot;syboe&quot;, &quot;sybow&quot;, &quot;sycee&quot;, &quot;syces&quot;, &quot;sycon&quot;, &quot;syens&quot;, &quot;syker&quot;, &quot;sykes&quot;, &quot;sylis&quot;, &quot;sylph&quot;, &quot;sylva&quot;, &quot;symar&quot;, &quot;synch&quot;, &quot;syncs&quot;, &quot;synds&quot;, &quot;syned&quot;, &quot;synes&quot;, &quot;synth&quot;, &quot;syped&quot;, &quot;sypes&quot;, &quot;syphs&quot;, &quot;syrah&quot;, &quot;syren&quot;, &quot;sysop&quot;, &quot;sythe&quot;, &quot;syver&quot;, &quot;taals&quot;, &quot;taata&quot;, &quot;taber&quot;, &quot;tabes&quot;, &quot;tabid&quot;, &quot;tabis&quot;, &quot;tabla&quot;, &quot;tabor&quot;, &quot;tabun&quot;, &quot;tabus&quot;, &quot;tacan&quot;, &quot;taces&quot;, &quot;tacet&quot;, &quot;tache&quot;, &quot;tacho&quot;, &quot;tachs&quot;, &quot;tacks&quot;, &quot;tacos&quot;, &quot;tacts&quot;, &quot;taels&quot;, &quot;tafia&quot;, &quot;taggy&quot;, &quot;tagma&quot;, &quot;tahas&quot;, &quot;tahrs&quot;, &quot;taiga&quot;, &quot;taigs&quot;, &quot;taiko&quot;, &quot;tails&quot;, &quot;tains&quot;, &quot;taira&quot;, &quot;taish&quot;, &quot;taits&quot;, &quot;tajes&quot;, &quot;takas&quot;, &quot;takes&quot;, &quot;takhi&quot;, &quot;takin&quot;, &quot;takis&quot;, &quot;takky&quot;, &quot;talak&quot;, &quot;talaq&quot;, &quot;talar&quot;, &quot;talas&quot;, &quot;talcs&quot;, &quot;talcy&quot;, &quot;talea&quot;, &quot;taler&quot;, &quot;tales&quot;, &quot;talks&quot;, &quot;talky&quot;, &quot;talls&quot;, &quot;talma&quot;, &quot;talpa&quot;, &quot;taluk&quot;, &quot;talus&quot;, &quot;tamal&quot;, &quot;tamed&quot;, &quot;tames&quot;, &quot;tamin&quot;, &quot;tamis&quot;, &quot;tammy&quot;, &quot;tamps&quot;, &quot;tanas&quot;, &quot;tanga&quot;, &quot;tangi&quot;, &quot;tangs&quot;, &quot;tanhs&quot;, &quot;tanka&quot;, &quot;tanks&quot;, &quot;tanky&quot;, &quot;tanna&quot;, &quot;tansy&quot;, &quot;tanti&quot;, &quot;tanto&quot;, &quot;tanty&quot;, &quot;tapas&quot;, &quot;taped&quot;, &quot;tapen&quot;, &quot;tapes&quot;, &quot;tapet&quot;, &quot;tapis&quot;, &quot;tappa&quot;, &quot;tapus&quot;, &quot;taras&quot;, &quot;tardo&quot;, &quot;tared&quot;, &quot;tares&quot;, &quot;targa&quot;, &quot;targe&quot;, &quot;tarns&quot;, &quot;taroc&quot;, &quot;tarok&quot;, &quot;taros&quot;, &quot;tarps&quot;, &quot;tarre&quot;, &quot;tarry&quot;, &quot;tarsi&quot;, &quot;tarts&quot;, &quot;tarty&quot;, &quot;tasar&quot;, &quot;tased&quot;, &quot;taser&quot;, &quot;tases&quot;, &quot;tasks&quot;, &quot;tassa&quot;, &quot;tasse&quot;, &quot;tasso&quot;, &quot;tatar&quot;, &quot;tater&quot;, &quot;tates&quot;, &quot;taths&quot;, &quot;tatie&quot;, &quot;tatou&quot;, &quot;tatts&quot;, &quot;tatus&quot;, &quot;taube&quot;, &quot;tauld&quot;, &quot;tauon&quot;, &quot;taupe&quot;, &quot;tauts&quot;, &quot;tavah&quot;, &quot;tavas&quot;, &quot;taver&quot;, &quot;tawai&quot;, &quot;tawas&quot;, &quot;tawed&quot;, &quot;tawer&quot;, &quot;tawie&quot;, &quot;tawse&quot;, &quot;tawts&quot;, &quot;taxed&quot;, &quot;taxer&quot;, &quot;taxes&quot;, &quot;taxis&quot;, &quot;taxol&quot;, &quot;taxon&quot;, &quot;taxor&quot;, &quot;taxus&quot;, &quot;tayra&quot;, &quot;tazza&quot;, &quot;tazze&quot;, &quot;teade&quot;, &quot;teads&quot;, &quot;teaed&quot;, &quot;teaks&quot;, &quot;teals&quot;, &quot;teams&quot;, &quot;tears&quot;, &quot;teats&quot;, &quot;teaze&quot;, &quot;techs&quot;, &quot;techy&quot;, &quot;tecta&quot;, &quot;teels&quot;, &quot;teems&quot;, &quot;teend&quot;, &quot;teene&quot;, &quot;teens&quot;, &quot;teeny&quot;, &quot;teers&quot;, &quot;teffs&quot;, &quot;teggs&quot;, &quot;tegua&quot;, &quot;tegus&quot;, &quot;tehrs&quot;, &quot;teiid&quot;, &quot;teils&quot;, &quot;teind&quot;, &quot;teins&quot;, &quot;telae&quot;, &quot;telco&quot;, &quot;teles&quot;, &quot;telex&quot;, &quot;telia&quot;, &quot;telic&quot;, &quot;tells&quot;, &quot;telly&quot;, &quot;teloi&quot;, &quot;telos&quot;, &quot;temed&quot;, &quot;temes&quot;, &quot;tempi&quot;, &quot;temps&quot;, &quot;tempt&quot;, &quot;temse&quot;, &quot;tench&quot;, &quot;tends&quot;, &quot;tendu&quot;, &quot;tenes&quot;, &quot;tenge&quot;, &quot;tenia&quot;, &quot;tenne&quot;, &quot;tenno&quot;, &quot;tenny&quot;, &quot;tenon&quot;, &quot;tents&quot;, &quot;tenty&quot;, &quot;tenue&quot;, &quot;tepal&quot;, &quot;tepas&quot;, &quot;tepoy&quot;, &quot;terai&quot;, &quot;teras&quot;, &quot;terce&quot;, &quot;terek&quot;, &quot;teres&quot;, &quot;terfe&quot;, &quot;terfs&quot;, &quot;terga&quot;, &quot;terms&quot;, &quot;terne&quot;, &quot;terns&quot;, &quot;terry&quot;, &quot;terts&quot;, &quot;tesla&quot;, &quot;testa&quot;, &quot;teste&quot;, &quot;tests&quot;, &quot;tetes&quot;, &quot;teths&quot;, &quot;tetra&quot;, &quot;tetri&quot;, &quot;teuch&quot;, &quot;teugh&quot;, &quot;tewed&quot;, &quot;tewel&quot;, &quot;tewit&quot;, &quot;texas&quot;, &quot;texes&quot;, &quot;texts&quot;, &quot;thack&quot;, &quot;thagi&quot;, &quot;thaim&quot;, &quot;thale&quot;, &quot;thali&quot;, &quot;thana&quot;, &quot;thane&quot;, &quot;thang&quot;, &quot;thans&quot;, &quot;thanx&quot;, &quot;tharm&quot;, &quot;thars&quot;, &quot;thaws&quot;, &quot;thawy&quot;, &quot;thebe&quot;, &quot;theca&quot;, &quot;theed&quot;, &quot;theek&quot;, &quot;thees&quot;, &quot;thegn&quot;, &quot;theic&quot;, &quot;thein&quot;, &quot;thelf&quot;, &quot;thema&quot;, &quot;thens&quot;, &quot;theow&quot;, &quot;therm&quot;, &quot;thesp&quot;, &quot;thete&quot;, &quot;thews&quot;, &quot;thewy&quot;, &quot;thigs&quot;, &quot;thilk&quot;, &quot;thill&quot;, &quot;thine&quot;, &quot;thins&quot;, &quot;thiol&quot;, &quot;thirl&quot;, &quot;thoft&quot;, &quot;thole&quot;, &quot;tholi&quot;, &quot;thoro&quot;, &quot;thorp&quot;, &quot;thous&quot;, &quot;thowl&quot;, &quot;thrae&quot;, &quot;thraw&quot;, &quot;thrid&quot;, &quot;thrip&quot;, &quot;throe&quot;, &quot;thuds&quot;, &quot;thugs&quot;, &quot;thuja&quot;, &quot;thunk&quot;, &quot;thurl&quot;, &quot;thuya&quot;, &quot;thymi&quot;, &quot;thymy&quot;, &quot;tians&quot;, &quot;tiars&quot;, &quot;tical&quot;, &quot;ticca&quot;, &quot;ticed&quot;, &quot;tices&quot;, &quot;tichy&quot;, &quot;ticks&quot;, &quot;ticky&quot;, &quot;tiddy&quot;, &quot;tided&quot;, &quot;tides&quot;, &quot;tiers&quot;, &quot;tiffs&quot;, &quot;tifos&quot;, &quot;tifts&quot;, &quot;tiges&quot;, &quot;tigon&quot;, &quot;tikas&quot;, &quot;tikes&quot;, &quot;tikis&quot;, &quot;tikka&quot;, &quot;tilak&quot;, &quot;tiled&quot;, &quot;tiler&quot;, &quot;tiles&quot;, &quot;tills&quot;, &quot;tilly&quot;, &quot;tilth&quot;, &quot;tilts&quot;, &quot;timbo&quot;, &quot;timed&quot;, &quot;times&quot;, &quot;timon&quot;, &quot;timps&quot;, &quot;tinas&quot;, &quot;tinct&quot;, &quot;tinds&quot;, &quot;tinea&quot;, &quot;tined&quot;, &quot;tines&quot;, &quot;tinge&quot;, &quot;tings&quot;, &quot;tinks&quot;, &quot;tinny&quot;, &quot;tints&quot;, &quot;tinty&quot;, &quot;tipis&quot;, &quot;tippy&quot;, &quot;tired&quot;, &quot;tires&quot;, &quot;tirls&quot;, &quot;tiros&quot;, &quot;tirrs&quot;, &quot;titch&quot;, &quot;titer&quot;, &quot;titis&quot;, &quot;titre&quot;, &quot;titty&quot;, &quot;titup&quot;, &quot;tiyin&quot;, &quot;tiyns&quot;, &quot;tizes&quot;, &quot;tizzy&quot;, &quot;toads&quot;, &quot;toady&quot;, &quot;toaze&quot;, &quot;tocks&quot;, &quot;tocky&quot;, &quot;tocos&quot;, &quot;todde&quot;, &quot;toeas&quot;, &quot;toffs&quot;, &quot;toffy&quot;, &quot;tofts&quot;, &quot;tofus&quot;, &quot;togae&quot;, &quot;togas&quot;, &quot;toged&quot;, &quot;toges&quot;, &quot;togue&quot;, &quot;tohos&quot;, &quot;toile&quot;, &quot;toils&quot;, &quot;toing&quot;, &quot;toise&quot;, &quot;toits&quot;, &quot;tokay&quot;, &quot;toked&quot;, &quot;toker&quot;, &quot;tokes&quot;, &quot;tokos&quot;, &quot;tolan&quot;, &quot;tolar&quot;, &quot;tolas&quot;, &quot;toled&quot;, &quot;toles&quot;, &quot;tolls&quot;, &quot;tolly&quot;, &quot;tolts&quot;, &quot;tolus&quot;, &quot;tolyl&quot;, &quot;toman&quot;, &quot;tombs&quot;, &quot;tomes&quot;, &quot;tomia&quot;, &quot;tommy&quot;, &quot;tomos&quot;, &quot;tondi&quot;, &quot;tondo&quot;, &quot;toned&quot;, &quot;toner&quot;, &quot;tones&quot;, &quot;toney&quot;, &quot;tongs&quot;, &quot;tonka&quot;, &quot;tonks&quot;, &quot;tonne&quot;, &quot;tonus&quot;, &quot;tools&quot;, &quot;tooms&quot;, &quot;toons&quot;, &quot;toots&quot;, &quot;toped&quot;, &quot;topee&quot;, &quot;topek&quot;, &quot;toper&quot;, &quot;topes&quot;, &quot;tophe&quot;, &quot;tophi&quot;, &quot;tophs&quot;, &quot;topis&quot;, &quot;topoi&quot;, &quot;topos&quot;, &quot;toppy&quot;, &quot;toque&quot;, &quot;torah&quot;, &quot;toran&quot;, &quot;toras&quot;, &quot;torcs&quot;, &quot;tores&quot;, &quot;toric&quot;, &quot;torii&quot;, &quot;toros&quot;, &quot;torot&quot;, &quot;torrs&quot;, &quot;torse&quot;, &quot;torsi&quot;, &quot;torsk&quot;, &quot;torta&quot;, &quot;torte&quot;, &quot;torts&quot;, &quot;tosas&quot;, &quot;tosed&quot;, &quot;toses&quot;, &quot;toshy&quot;, &quot;tossy&quot;, &quot;toted&quot;, &quot;toter&quot;, &quot;totes&quot;, &quot;totty&quot;, &quot;touks&quot;, &quot;touns&quot;, &quot;tours&quot;, &quot;touse&quot;, &quot;tousy&quot;, &quot;touts&quot;, &quot;touze&quot;, &quot;touzy&quot;, &quot;towed&quot;, &quot;towie&quot;, &quot;towns&quot;, &quot;towny&quot;, &quot;towse&quot;, &quot;towsy&quot;, &quot;towts&quot;, &quot;towze&quot;, &quot;towzy&quot;, &quot;toyed&quot;, &quot;toyer&quot;, &quot;toyon&quot;, &quot;toyos&quot;, &quot;tozed&quot;, &quot;tozes&quot;, &quot;tozie&quot;, &quot;trabs&quot;, &quot;trads&quot;, &quot;tragi&quot;, &quot;traik&quot;, &quot;trams&quot;, &quot;trank&quot;, &quot;tranq&quot;, &quot;trans&quot;, &quot;trant&quot;, &quot;trape&quot;, &quot;traps&quot;, &quot;trapt&quot;, &quot;trass&quot;, &quot;trats&quot;, &quot;tratt&quot;, &quot;trave&quot;, &quot;trayf&quot;, &quot;trays&quot;, &quot;treck&quot;, &quot;treed&quot;, &quot;treen&quot;, &quot;trees&quot;, &quot;trefa&quot;, &quot;treif&quot;, &quot;treks&quot;, &quot;trema&quot;, &quot;trems&quot;, &quot;tress&quot;, &quot;trest&quot;, &quot;trets&quot;, &quot;trews&quot;, &quot;treyf&quot;, &quot;treys&quot;, &quot;triac&quot;, &quot;tride&quot;, &quot;trier&quot;, &quot;tries&quot;, &quot;triff&quot;, &quot;trigo&quot;, &quot;trigs&quot;, &quot;trike&quot;, &quot;trild&quot;, &quot;trill&quot;, &quot;trims&quot;, &quot;trine&quot;, &quot;trins&quot;, &quot;triol&quot;, &quot;trior&quot;, &quot;trios&quot;, &quot;trips&quot;, &quot;tripy&quot;, &quot;trist&quot;, &quot;troad&quot;, &quot;troak&quot;, &quot;troat&quot;, &quot;trock&quot;, &quot;trode&quot;, &quot;trods&quot;, &quot;trogs&quot;, &quot;trois&quot;, &quot;troke&quot;, &quot;tromp&quot;, &quot;trona&quot;, &quot;tronc&quot;, &quot;trone&quot;, &quot;tronk&quot;, &quot;trons&quot;, &quot;trooz&quot;, &quot;troth&quot;, &quot;trots&quot;, &quot;trows&quot;, &quot;troys&quot;, &quot;trued&quot;, &quot;trues&quot;, &quot;trugo&quot;, &quot;trugs&quot;, &quot;trull&quot;, &quot;tryer&quot;, &quot;tryke&quot;, &quot;tryma&quot;, &quot;tryps&quot;, &quot;tsade&quot;, &quot;tsadi&quot;, &quot;tsars&quot;, &quot;tsked&quot;, &quot;tsuba&quot;, &quot;tsubo&quot;, &quot;tuans&quot;, &quot;tuart&quot;, &quot;tuath&quot;, &quot;tubae&quot;, &quot;tubar&quot;, &quot;tubas&quot;, &quot;tubby&quot;, &quot;tubed&quot;, &quot;tubes&quot;, &quot;tucks&quot;, &quot;tufas&quot;, &quot;tuffe&quot;, &quot;tuffs&quot;, &quot;tufts&quot;, &quot;tufty&quot;, &quot;tugra&quot;, &quot;tuile&quot;, &quot;tuina&quot;, &quot;tuism&quot;, &quot;tuktu&quot;, &quot;tules&quot;, &quot;tulpa&quot;, &quot;tulsi&quot;, &quot;tumid&quot;, &quot;tummy&quot;, &quot;tumps&quot;, &quot;tumpy&quot;, &quot;tunas&quot;, &quot;tunds&quot;, &quot;tuned&quot;, &quot;tuner&quot;, &quot;tunes&quot;, &quot;tungs&quot;, &quot;tunny&quot;, &quot;tupek&quot;, &quot;tupik&quot;, &quot;tuple&quot;, &quot;tuque&quot;, &quot;turds&quot;, &quot;turfs&quot;, &quot;turfy&quot;, &quot;turks&quot;, &quot;turme&quot;, &quot;turms&quot;, &quot;turns&quot;, &quot;turnt&quot;, &quot;turps&quot;, &quot;turrs&quot;, &quot;tushy&quot;, &quot;tusks&quot;, &quot;tusky&quot;, &quot;tutee&quot;, &quot;tutti&quot;, &quot;tutty&quot;, &quot;tutus&quot;, &quot;tuxes&quot;, &quot;tuyer&quot;, &quot;twaes&quot;, &quot;twain&quot;, &quot;twals&quot;, &quot;twank&quot;, &quot;twats&quot;, &quot;tways&quot;, &quot;tweel&quot;, &quot;tween&quot;, &quot;tweep&quot;, &quot;tweer&quot;, &quot;twerk&quot;, &quot;twerp&quot;, &quot;twier&quot;, &quot;twigs&quot;, &quot;twill&quot;, &quot;twilt&quot;, &quot;twink&quot;, &quot;twins&quot;, &quot;twiny&quot;, &quot;twire&quot;, &quot;twirp&quot;, &quot;twite&quot;, &quot;twits&quot;, &quot;twoer&quot;, &quot;twyer&quot;, &quot;tyees&quot;, &quot;tyers&quot;, &quot;tyiyn&quot;, &quot;tykes&quot;, &quot;tyler&quot;, &quot;tymps&quot;, &quot;tynde&quot;, &quot;tyned&quot;, &quot;tynes&quot;, &quot;typal&quot;, &quot;typed&quot;, &quot;types&quot;, &quot;typey&quot;, &quot;typic&quot;, &quot;typos&quot;, &quot;typps&quot;, &quot;typto&quot;, &quot;tyran&quot;, &quot;tyred&quot;, &quot;tyres&quot;, &quot;tyros&quot;, &quot;tythe&quot;, &quot;tzars&quot;, &quot;udals&quot;, &quot;udons&quot;, &quot;ugali&quot;, &quot;ugged&quot;, &quot;uhlan&quot;, &quot;uhuru&quot;, &quot;ukase&quot;, &quot;ulama&quot;, &quot;ulans&quot;, &quot;ulema&quot;, &quot;ulmin&quot;, &quot;ulnad&quot;, &quot;ulnae&quot;, &quot;ulnar&quot;, &quot;ulnas&quot;, &quot;ulpan&quot;, &quot;ulvas&quot;, &quot;ulyie&quot;, &quot;ulzie&quot;, &quot;umami&quot;, &quot;umbel&quot;, &quot;umber&quot;, &quot;umble&quot;, &quot;umbos&quot;, &quot;umbre&quot;, &quot;umiac&quot;, &quot;umiak&quot;, &quot;umiaq&quot;, &quot;ummah&quot;, &quot;ummas&quot;, &quot;ummed&quot;, &quot;umped&quot;, &quot;umphs&quot;, &quot;umpie&quot;, &quot;umpty&quot;, &quot;umrah&quot;, &quot;umras&quot;, &quot;unais&quot;, &quot;unapt&quot;, &quot;unarm&quot;, &quot;unary&quot;, &quot;unaus&quot;, &quot;unbag&quot;, &quot;unban&quot;, &quot;unbar&quot;, &quot;unbed&quot;, &quot;unbid&quot;, &quot;unbox&quot;, &quot;uncap&quot;, &quot;unces&quot;, &quot;uncia&quot;, &quot;uncos&quot;, &quot;uncoy&quot;, &quot;uncus&quot;, &quot;undam&quot;, &quot;undee&quot;, &quot;undos&quot;, &quot;undug&quot;, &quot;uneth&quot;, &quot;unfix&quot;, &quot;ungag&quot;, &quot;unget&quot;, &quot;ungod&quot;, &quot;ungot&quot;, &quot;ungum&quot;, &quot;unhat&quot;, &quot;unhip&quot;, &quot;unica&quot;, &quot;units&quot;, &quot;unjam&quot;, &quot;unked&quot;, &quot;unket&quot;, &quot;unkid&quot;, &quot;unlaw&quot;, &quot;unlay&quot;, &quot;unled&quot;, &quot;unlet&quot;, &quot;unlid&quot;, &quot;unman&quot;, &quot;unmew&quot;, &quot;unmix&quot;, &quot;unpay&quot;, &quot;unpeg&quot;, &quot;unpen&quot;, &quot;unpin&quot;, &quot;unred&quot;, &quot;unrid&quot;, &quot;unrig&quot;, &quot;unrip&quot;, &quot;unsaw&quot;, &quot;unsay&quot;, &quot;unsee&quot;, &quot;unsew&quot;, &quot;unsex&quot;, &quot;unsod&quot;, &quot;untax&quot;, &quot;untin&quot;, &quot;unwet&quot;, &quot;unwit&quot;, &quot;unwon&quot;, &quot;upbow&quot;, &quot;upbye&quot;, &quot;updos&quot;, &quot;updry&quot;, &quot;upend&quot;, &quot;upjet&quot;, &quot;uplay&quot;, &quot;upled&quot;, &quot;uplit&quot;, &quot;upped&quot;, &quot;upran&quot;, &quot;uprun&quot;, &quot;upsee&quot;, &quot;upsey&quot;, &quot;uptak&quot;, &quot;upter&quot;, &quot;uptie&quot;, &quot;uraei&quot;, &quot;urali&quot;, &quot;uraos&quot;, &quot;urare&quot;, &quot;urari&quot;, &quot;urase&quot;, &quot;urate&quot;, &quot;urbex&quot;, &quot;urbia&quot;, &quot;urdee&quot;, &quot;ureal&quot;, &quot;ureas&quot;, &quot;uredo&quot;, &quot;ureic&quot;, &quot;urena&quot;, &quot;urent&quot;, &quot;urged&quot;, &quot;urger&quot;, &quot;urges&quot;, &quot;urial&quot;, &quot;urite&quot;, &quot;urman&quot;, &quot;urnal&quot;, &quot;urned&quot;, &quot;urped&quot;, &quot;ursae&quot;, &quot;ursid&quot;, &quot;urson&quot;, &quot;urubu&quot;, &quot;urvas&quot;, &quot;users&quot;, &quot;usnea&quot;, &quot;usque&quot;, &quot;usure&quot;, &quot;usury&quot;, &quot;uteri&quot;, &quot;uveal&quot;, &quot;uveas&quot;, &quot;uvula&quot;, &quot;vacua&quot;, &quot;vaded&quot;, &quot;vades&quot;, &quot;vagal&quot;, &quot;vagus&quot;, &quot;vails&quot;, &quot;vaire&quot;, &quot;vairs&quot;, &quot;vairy&quot;, &quot;vakas&quot;, &quot;vakil&quot;, &quot;vales&quot;, &quot;valis&quot;, &quot;valse&quot;, &quot;vamps&quot;, &quot;vampy&quot;, &quot;vanda&quot;, &quot;vaned&quot;, &quot;vanes&quot;, &quot;vangs&quot;, &quot;vants&quot;, &quot;vaped&quot;, &quot;vaper&quot;, &quot;vapes&quot;, &quot;varan&quot;, &quot;varas&quot;, &quot;vardy&quot;, &quot;varec&quot;, &quot;vares&quot;, &quot;varia&quot;, &quot;varix&quot;, &quot;varna&quot;, &quot;varus&quot;, &quot;varve&quot;, &quot;vasal&quot;, &quot;vases&quot;, &quot;vasts&quot;, &quot;vasty&quot;, &quot;vatic&quot;, &quot;vatus&quot;, &quot;vauch&quot;, &quot;vaute&quot;, &quot;vauts&quot;, &quot;vawte&quot;, &quot;vaxes&quot;, &quot;veale&quot;, &quot;veals&quot;, &quot;vealy&quot;, &quot;veena&quot;, &quot;veeps&quot;, &quot;veers&quot;, &quot;veery&quot;, &quot;vegas&quot;, &quot;veges&quot;, &quot;vegie&quot;, &quot;vegos&quot;, &quot;vehme&quot;, &quot;veils&quot;, &quot;veily&quot;, &quot;veins&quot;, &quot;veiny&quot;, &quot;velar&quot;, &quot;velds&quot;, &quot;veldt&quot;, &quot;veles&quot;, &quot;vells&quot;, &quot;velum&quot;, &quot;venae&quot;, &quot;venal&quot;, &quot;vends&quot;, &quot;vendu&quot;, &quot;veney&quot;, &quot;venge&quot;, &quot;venin&quot;, &quot;vents&quot;, &quot;venus&quot;, &quot;verbs&quot;, &quot;verra&quot;, &quot;verry&quot;, &quot;verst&quot;, &quot;verts&quot;, &quot;vertu&quot;, &quot;vespa&quot;, &quot;vesta&quot;, &quot;vests&quot;, &quot;vetch&quot;, &quot;vexed&quot;, &quot;vexer&quot;, &quot;vexes&quot;, &quot;vexil&quot;, &quot;vezir&quot;, &quot;vials&quot;, &quot;viand&quot;, &quot;vibes&quot;, &quot;vibex&quot;, &quot;vibey&quot;, &quot;viced&quot;, &quot;vices&quot;, &quot;vichy&quot;, &quot;viers&quot;, &quot;views&quot;, &quot;viewy&quot;, &quot;vifda&quot;, &quot;viffs&quot;, &quot;vigas&quot;, &quot;vigia&quot;, &quot;vilde&quot;, &quot;viler&quot;, &quot;villi&quot;, &quot;vills&quot;, &quot;vimen&quot;, &quot;vinal&quot;, &quot;vinas&quot;, &quot;vinca&quot;, &quot;vined&quot;, &quot;viner&quot;, &quot;vines&quot;, &quot;vinew&quot;, &quot;vinic&quot;, &quot;vinos&quot;, &quot;vints&quot;, &quot;viold&quot;, &quot;viols&quot;, &quot;vired&quot;, &quot;vireo&quot;, &quot;vires&quot;, &quot;virga&quot;, &quot;virge&quot;, &quot;virid&quot;, &quot;virls&quot;, &quot;virtu&quot;, &quot;visas&quot;, &quot;vised&quot;, &quot;vises&quot;, &quot;visie&quot;, &quot;visne&quot;, &quot;vison&quot;, &quot;visto&quot;, &quot;vitae&quot;, &quot;vitas&quot;, &quot;vitex&quot;, &quot;vitro&quot;, &quot;vitta&quot;, &quot;vivas&quot;, &quot;vivat&quot;, &quot;vivda&quot;, &quot;viver&quot;, &quot;vives&quot;, &quot;vizir&quot;, &quot;vizor&quot;, &quot;vleis&quot;, &quot;vlies&quot;, &quot;vlogs&quot;, &quot;voars&quot;, &quot;vocab&quot;, &quot;voces&quot;, &quot;voddy&quot;, &quot;vodou&quot;, &quot;vodun&quot;, &quot;voema&quot;, &quot;vogie&quot;, &quot;voids&quot;, &quot;voile&quot;, &quot;voips&quot;, &quot;volae&quot;, &quot;volar&quot;, &quot;voled&quot;, &quot;voles&quot;, &quot;volet&quot;, &quot;volks&quot;, &quot;volta&quot;, &quot;volte&quot;, &quot;volti&quot;, &quot;volts&quot;, &quot;volva&quot;, &quot;volve&quot;, &quot;vomer&quot;, &quot;voted&quot;, &quot;votes&quot;, &quot;vouge&quot;, &quot;voulu&quot;, &quot;vowed&quot;, &quot;vower&quot;, &quot;voxel&quot;, &quot;vozhd&quot;, &quot;vraic&quot;, &quot;vrils&quot;, &quot;vroom&quot;, &quot;vrous&quot;, &quot;vrouw&quot;, &quot;vrows&quot;, &quot;vuggs&quot;, &quot;vuggy&quot;, &quot;vughs&quot;, &quot;vughy&quot;, &quot;vulgo&quot;, &quot;vulns&quot;, &quot;vulva&quot;, &quot;vutty&quot;, &quot;waacs&quot;, &quot;wacke&quot;, &quot;wacko&quot;, &quot;wacks&quot;, &quot;wadds&quot;, &quot;waddy&quot;, &quot;waded&quot;, &quot;wader&quot;, &quot;wades&quot;, &quot;wadge&quot;, &quot;wadis&quot;, &quot;wadts&quot;, &quot;waffs&quot;, &quot;wafts&quot;, &quot;waged&quot;, &quot;wages&quot;, &quot;wagga&quot;, &quot;wagyu&quot;, &quot;wahoo&quot;, &quot;waide&quot;, &quot;waifs&quot;, &quot;waift&quot;, &quot;wails&quot;, &quot;wains&quot;, &quot;wairs&quot;, &quot;waite&quot;, &quot;waits&quot;, &quot;wakas&quot;, &quot;waked&quot;, &quot;waken&quot;, &quot;waker&quot;, &quot;wakes&quot;, &quot;wakfs&quot;, &quot;waldo&quot;, &quot;walds&quot;, &quot;waled&quot;, &quot;waler&quot;, &quot;wales&quot;, &quot;walie&quot;, &quot;walis&quot;, &quot;walks&quot;, &quot;walla&quot;, &quot;walls&quot;, &quot;wally&quot;, &quot;walty&quot;, &quot;wamed&quot;, &quot;wames&quot;, &quot;wamus&quot;, &quot;wands&quot;, &quot;waned&quot;, &quot;wanes&quot;, &quot;waney&quot;, &quot;wangs&quot;, &quot;wanks&quot;, &quot;wanky&quot;, &quot;wanle&quot;, &quot;wanly&quot;, &quot;wanna&quot;, &quot;wants&quot;, &quot;wanty&quot;, &quot;wanze&quot;, &quot;waqfs&quot;, &quot;warbs&quot;, &quot;warby&quot;, &quot;wards&quot;, &quot;wared&quot;, &quot;wares&quot;, &quot;warez&quot;, &quot;warks&quot;, &quot;warms&quot;, &quot;warns&quot;, &quot;warps&quot;, &quot;warre&quot;, &quot;warst&quot;, &quot;warts&quot;, &quot;wases&quot;, &quot;washy&quot;, &quot;wasms&quot;, &quot;wasps&quot;, &quot;waspy&quot;, &quot;wasts&quot;, &quot;watap&quot;, &quot;watts&quot;, &quot;wauff&quot;, &quot;waugh&quot;, &quot;wauks&quot;, &quot;waulk&quot;, &quot;wauls&quot;, &quot;waurs&quot;, &quot;waved&quot;, &quot;waves&quot;, &quot;wavey&quot;, &quot;wawas&quot;, &quot;wawes&quot;, &quot;wawls&quot;, &quot;waxed&quot;, &quot;waxer&quot;, &quot;waxes&quot;, &quot;wayed&quot;, &quot;wazir&quot;, &quot;wazoo&quot;, &quot;weald&quot;, &quot;weals&quot;, &quot;weamb&quot;, &quot;weans&quot;, &quot;wears&quot;, &quot;webby&quot;, &quot;weber&quot;, &quot;wecht&quot;, &quot;wedel&quot;, &quot;wedgy&quot;, &quot;weeds&quot;, &quot;weeke&quot;, &quot;weeks&quot;, &quot;weels&quot;, &quot;weems&quot;, &quot;weens&quot;, &quot;weeny&quot;, &quot;weeps&quot;, &quot;weepy&quot;, &quot;weest&quot;, &quot;weete&quot;, &quot;weets&quot;, &quot;wefte&quot;, &quot;wefts&quot;, &quot;weids&quot;, &quot;weils&quot;, &quot;weirs&quot;, &quot;weise&quot;, &quot;weize&quot;, &quot;wekas&quot;, &quot;welds&quot;, &quot;welke&quot;, &quot;welks&quot;, &quot;welkt&quot;, &quot;wells&quot;, &quot;welly&quot;, &quot;welts&quot;, &quot;wembs&quot;, &quot;wends&quot;, &quot;wenge&quot;, &quot;wenny&quot;, &quot;wents&quot;, &quot;weros&quot;, &quot;wersh&quot;, &quot;wests&quot;, &quot;wetas&quot;, &quot;wetly&quot;, &quot;wexed&quot;, &quot;wexes&quot;, &quot;whamo&quot;, &quot;whams&quot;, &quot;whang&quot;, &quot;whaps&quot;, &quot;whare&quot;, &quot;whata&quot;, &quot;whats&quot;, &quot;whaup&quot;, &quot;whaur&quot;, &quot;wheal&quot;, &quot;whear&quot;, &quot;wheen&quot;, &quot;wheep&quot;, &quot;wheft&quot;, &quot;whelk&quot;, &quot;whelm&quot;, &quot;whens&quot;, &quot;whets&quot;, &quot;whews&quot;, &quot;wheys&quot;, &quot;whids&quot;, &quot;whift&quot;, &quot;whigs&quot;, &quot;whilk&quot;, &quot;whims&quot;, &quot;whins&quot;, &quot;whios&quot;, &quot;whips&quot;, &quot;whipt&quot;, &quot;whirr&quot;, &quot;whirs&quot;, &quot;whish&quot;, &quot;whiss&quot;, &quot;whist&quot;, &quot;whits&quot;, &quot;whity&quot;, &quot;whizz&quot;, &quot;whomp&quot;, &quot;whoof&quot;, &quot;whoot&quot;, &quot;whops&quot;, &quot;whorl&quot;, &quot;whort&quot;, &quot;whoso&quot;, &quot;whows&quot;, &quot;whump&quot;, &quot;whups&quot;, &quot;whyda&quot;, &quot;wicca&quot;, &quot;wicks&quot;, &quot;wicky&quot;, &quot;widdy&quot;, &quot;wides&quot;, &quot;wiels&quot;, &quot;wifed&quot;, &quot;wifes&quot;, &quot;wifey&quot;, &quot;wifie&quot;, &quot;wifty&quot;, &quot;wigan&quot;, &quot;wigga&quot;, &quot;wiggy&quot;, &quot;wikis&quot;, &quot;wilco&quot;, &quot;wilds&quot;, &quot;wiled&quot;, &quot;wiles&quot;, &quot;wilga&quot;, &quot;wilis&quot;, &quot;wilja&quot;, &quot;wills&quot;, &quot;wilts&quot;, &quot;wimps&quot;, &quot;winds&quot;, &quot;wined&quot;, &quot;wines&quot;, &quot;winey&quot;, &quot;winge&quot;, &quot;wings&quot;, &quot;wingy&quot;, &quot;winks&quot;, &quot;winna&quot;, &quot;winns&quot;, &quot;winos&quot;, &quot;winze&quot;, &quot;wiped&quot;, &quot;wiper&quot;, &quot;wipes&quot;, &quot;wired&quot;, &quot;wirer&quot;, &quot;wires&quot;, &quot;wirra&quot;, &quot;wised&quot;, &quot;wises&quot;, &quot;wisha&quot;, &quot;wisht&quot;, &quot;wisps&quot;, &quot;wists&quot;, &quot;witan&quot;, &quot;wited&quot;, &quot;wites&quot;, &quot;withe&quot;, &quot;withs&quot;, &quot;withy&quot;, &quot;wived&quot;, &quot;wiver&quot;, &quot;wives&quot;, &quot;wizen&quot;, &quot;wizes&quot;, &quot;woads&quot;, &quot;woald&quot;, &quot;wocks&quot;, &quot;wodge&quot;, &quot;woful&quot;, &quot;wojus&quot;, &quot;woker&quot;, &quot;wokka&quot;, &quot;wolds&quot;, &quot;wolfs&quot;, &quot;wolly&quot;, &quot;wolve&quot;, &quot;wombs&quot;, &quot;womby&quot;, &quot;womyn&quot;, &quot;wonga&quot;, &quot;wongi&quot;, &quot;wonks&quot;, &quot;wonky&quot;, &quot;wonts&quot;, &quot;woods&quot;, &quot;wooed&quot;, &quot;woofs&quot;, &quot;woofy&quot;, &quot;woold&quot;, &quot;wools&quot;, &quot;woons&quot;, &quot;woops&quot;, &quot;woopy&quot;, &quot;woose&quot;, &quot;woosh&quot;, &quot;wootz&quot;, &quot;words&quot;, &quot;works&quot;, &quot;worms&quot;, &quot;wormy&quot;, &quot;worts&quot;, &quot;wowed&quot;, &quot;wowee&quot;, &quot;woxen&quot;, &quot;wrang&quot;, &quot;wraps&quot;, &quot;wrapt&quot;, &quot;wrast&quot;, &quot;wrate&quot;, &quot;wrawl&quot;, &quot;wrens&quot;, &quot;wrick&quot;, &quot;wried&quot;, &quot;wrier&quot;, &quot;wries&quot;, &quot;writs&quot;, &quot;wroke&quot;, &quot;wroot&quot;, &quot;wroth&quot;, &quot;wryer&quot;, &quot;wuddy&quot;, &quot;wudus&quot;, &quot;wulls&quot;, &quot;wurst&quot;, &quot;wuses&quot;, &quot;wushu&quot;, &quot;wussy&quot;, &quot;wuxia&quot;, &quot;wyled&quot;, &quot;wyles&quot;, &quot;wynds&quot;, &quot;wynns&quot;, &quot;wyted&quot;, &quot;wytes&quot;, &quot;xebec&quot;, &quot;xenia&quot;, &quot;xenic&quot;, &quot;xenon&quot;, &quot;xeric&quot;, &quot;xerox&quot;, &quot;xerus&quot;, &quot;xoana&quot;, &quot;xrays&quot;, &quot;xylan&quot;, &quot;xylem&quot;, &quot;xylic&quot;, &quot;xylol&quot;, &quot;xylyl&quot;, &quot;xysti&quot;, &quot;xysts&quot;, &quot;yaars&quot;, &quot;yabas&quot;, &quot;yabba&quot;, &quot;yabby&quot;, &quot;yacca&quot;, &quot;yacka&quot;, &quot;yacks&quot;, &quot;yaffs&quot;, &quot;yager&quot;, &quot;yages&quot;, &quot;yagis&quot;, &quot;yahoo&quot;, &quot;yaird&quot;, &quot;yakka&quot;, &quot;yakow&quot;, &quot;yales&quot;, &quot;yamen&quot;, &quot;yampy&quot;, &quot;yamun&quot;, &quot;yangs&quot;, &quot;yanks&quot;, &quot;yapok&quot;, &quot;yapon&quot;, &quot;yapps&quot;, &quot;yappy&quot;, &quot;yarak&quot;, &quot;yarco&quot;, &quot;yards&quot;, &quot;yarer&quot;, &quot;yarfa&quot;, &quot;yarks&quot;, &quot;yarns&quot;, &quot;yarrs&quot;, &quot;yarta&quot;, &quot;yarto&quot;, &quot;yates&quot;, &quot;yauds&quot;, &quot;yauld&quot;, &quot;yaups&quot;, &quot;yawed&quot;, &quot;yawey&quot;, &quot;yawls&quot;, &quot;yawns&quot;, &quot;yawny&quot;, &quot;yawps&quot;, &quot;ybore&quot;, &quot;yclad&quot;, &quot;ycled&quot;, &quot;ycond&quot;, &quot;ydrad&quot;, &quot;ydred&quot;, &quot;yeads&quot;, &quot;yeahs&quot;, &quot;yealm&quot;, &quot;yeans&quot;, &quot;yeard&quot;, &quot;years&quot;, &quot;yecch&quot;, &quot;yechs&quot;, &quot;yechy&quot;, &quot;yedes&quot;, &quot;yeeds&quot;, &quot;yeesh&quot;, &quot;yeggs&quot;, &quot;yelks&quot;, &quot;yells&quot;, &quot;yelms&quot;, &quot;yelps&quot;, &quot;yelts&quot;, &quot;yenta&quot;, &quot;yente&quot;, &quot;yerba&quot;, &quot;yerds&quot;, &quot;yerks&quot;, &quot;yeses&quot;, &quot;yesks&quot;, &quot;yests&quot;, &quot;yesty&quot;, &quot;yetis&quot;, &quot;yetts&quot;, &quot;yeuks&quot;, &quot;yeuky&quot;, &quot;yeven&quot;, &quot;yeves&quot;, &quot;yewen&quot;, &quot;yexed&quot;, &quot;yexes&quot;, &quot;yfere&quot;, &quot;yiked&quot;, &quot;yikes&quot;, &quot;yills&quot;, &quot;yince&quot;, &quot;yipes&quot;, &quot;yippy&quot;, &quot;yirds&quot;, &quot;yirks&quot;, &quot;yirrs&quot;, &quot;yirth&quot;, &quot;yites&quot;, &quot;yitie&quot;, &quot;ylems&quot;, &quot;ylike&quot;, &quot;ylkes&quot;, &quot;ymolt&quot;, &quot;ympes&quot;, &quot;yobbo&quot;, &quot;yobby&quot;, &quot;yocks&quot;, &quot;yodel&quot;, &quot;yodhs&quot;, &quot;yodle&quot;, &quot;yogas&quot;, &quot;yogee&quot;, &quot;yoghs&quot;, &quot;yogic&quot;, &quot;yogin&quot;, &quot;yogis&quot;, &quot;yoick&quot;, &quot;yojan&quot;, &quot;yoked&quot;, &quot;yokel&quot;, &quot;yoker&quot;, &quot;yokes&quot;, &quot;yokul&quot;, &quot;yolks&quot;, &quot;yolky&quot;, &quot;yomim&quot;, &quot;yomps&quot;, &quot;yonic&quot;, &quot;yonis&quot;, &quot;yonks&quot;, &quot;yoofs&quot;, &quot;yoops&quot;, &quot;yores&quot;, &quot;yorks&quot;, &quot;yorps&quot;, &quot;youks&quot;, &quot;yourn&quot;, &quot;yours&quot;, &quot;yourt&quot;, &quot;youse&quot;, &quot;yowed&quot;, &quot;yowes&quot;, &quot;yowie&quot;, &quot;yowls&quot;, &quot;yowza&quot;, &quot;yrapt&quot;, &quot;yrent&quot;, &quot;yrivd&quot;, &quot;yrneh&quot;, &quot;ysame&quot;, &quot;ytost&quot;, &quot;yuans&quot;, &quot;yucas&quot;, &quot;yucca&quot;, &quot;yucch&quot;, &quot;yucko&quot;, &quot;yucks&quot;, &quot;yucky&quot;, &quot;yufts&quot;, &quot;yugas&quot;, &quot;yuked&quot;, &quot;yukes&quot;, &quot;yukky&quot;, &quot;yukos&quot;, &quot;yulan&quot;, &quot;yules&quot;, &quot;yummo&quot;, &quot;yummy&quot;, &quot;yumps&quot;, &quot;yupon&quot;, &quot;yuppy&quot;, &quot;yurta&quot;, &quot;yurts&quot;, &quot;yuzus&quot;, &quot;zabra&quot;, &quot;zacks&quot;, &quot;zaida&quot;, &quot;zaidy&quot;, &quot;zaire&quot;, &quot;zakat&quot;, &quot;zaman&quot;, &quot;zambo&quot;, &quot;zamia&quot;, &quot;zanja&quot;, &quot;zante&quot;, &quot;zanza&quot;, &quot;zanze&quot;, &quot;zappy&quot;, &quot;zarfs&quot;, &quot;zaris&quot;, &quot;zatis&quot;, &quot;zaxes&quot;, &quot;zayin&quot;, &quot;zazen&quot;, &quot;zeals&quot;, &quot;zebec&quot;, &quot;zebub&quot;, &quot;zebus&quot;, &quot;zedas&quot;, &quot;zeins&quot;, &quot;zendo&quot;, &quot;zerda&quot;, &quot;zerks&quot;, &quot;zeros&quot;, &quot;zests&quot;, &quot;zetas&quot;, &quot;zexes&quot;, &quot;zezes&quot;, &quot;zhomo&quot;, &quot;zibet&quot;, &quot;ziffs&quot;, &quot;zigan&quot;, &quot;zilas&quot;, &quot;zilch&quot;, &quot;zilla&quot;, &quot;zills&quot;, &quot;zimbi&quot;, &quot;zimbs&quot;, &quot;zinco&quot;, &quot;zincs&quot;, &quot;zincy&quot;, &quot;zineb&quot;, &quot;zines&quot;, &quot;zings&quot;, &quot;zingy&quot;, &quot;zinke&quot;, &quot;zinky&quot;, &quot;zippo&quot;, &quot;zippy&quot;, &quot;ziram&quot;, &quot;zitis&quot;, &quot;zizel&quot;, &quot;zizit&quot;, &quot;zlote&quot;, &quot;zloty&quot;, &quot;zoaea&quot;, &quot;zobos&quot;, &quot;zobus&quot;, &quot;zocco&quot;, &quot;zoeae&quot;, &quot;zoeal&quot;, &quot;zoeas&quot;, &quot;zoism&quot;, &quot;zoist&quot;, &quot;zombi&quot;, &quot;zonae&quot;, &quot;zonda&quot;, &quot;zoned&quot;, &quot;zoner&quot;, &quot;zones&quot;, &quot;zonks&quot;, &quot;zooea&quot;, &quot;zooey&quot;, &quot;zooid&quot;, &quot;zooks&quot;, &quot;zooms&quot;, &quot;zoons&quot;, &quot;zooty&quot;, &quot;zoppa&quot;, &quot;zoppo&quot;, &quot;zoril&quot;, &quot;zoris&quot;, &quot;zorro&quot;, &quot;zouks&quot;, &quot;zowee&quot;, &quot;zowie&quot;, &quot;zulus&quot;, &quot;zupan&quot;, &quot;zupas&quot;, &quot;zuppa&quot;, &quot;zurfs&quot;, &quot;zuzim&quot;, &quot;zygal&quot;, &quot;zygon&quot;, &quot;zymes&quot;, &quot;zymic&quot;] guessList = guessList.concat(wordList); var word = wordList[Math.floor(Math.random()*wordList.length)].toUpperCase(); console.log(word); window.onload = function(){ intialize(); } function intialize() { // Create the game board for (let r = 0; r &lt; height; r++) { for (let c = 0; c &lt; width; c++) { // &lt;span id=&quot;0-0&quot; class=&quot;tile&quot;&gt;P&lt;/span&gt; let tile = document.createElement(&quot;span&quot;); tile.id = r.toString() + &quot;-&quot; + c.toString(); tile.classList.add(&quot;tile&quot;); tile.innerText = &quot;&quot;; document.getElementById(&quot;board&quot;).appendChild(tile); } } // Create the key board let keyboard = [ [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot; &quot;], [&quot;Enter&quot;, &quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;⌫&quot; ] ] for (let i = 0; i &lt; keyboard.length; i++) { let currRow = keyboard[i]; let keyboardRow = document.createElement(&quot;div&quot;); keyboardRow.classList.add(&quot;keyboard-row&quot;); for (let j = 0; j &lt; currRow.length; j++) { let keyTile = document.createElement(&quot;div&quot;); let key = currRow[j]; keyTile.innerText = key; if (key == &quot;Enter&quot;) { keyTile.id = &quot;Enter&quot;; } else if (key == &quot;⌫&quot;) { keyTile.id = &quot;Backspace&quot;; } else if (&quot;A&quot; &lt;= key &amp;&amp; key &lt;= &quot;Z&quot;) { keyTile.id = &quot;Key&quot; + key; // &quot;Key&quot; + &quot;A&quot;; } keyTile.addEventListener(&quot;click&quot;, processKey); if (key == &quot;Enter&quot;) { keyTile.classList.add(&quot;enter-key-tile&quot;); } else { keyTile.classList.add(&quot;key-tile&quot;); } keyboardRow.appendChild(keyTile); } document.body.appendChild(keyboardRow); } // Listen for Key Press document.addEventListener(&quot;keyup&quot;, (e) =&gt; { processInput(e); }) } function processKey() { e = { &quot;code&quot; : this.id }; processInput(e); } function processInput(e) { if (gameOver) return; // alert(e.code); if (&quot;KeyA&quot; &lt;= e.code &amp;&amp; e.code &lt;= &quot;KeyZ&quot;) { if (col &lt; width) { let currTile = document.getElementById(row.toString() + &#39;-&#39; + col.toString()); if (currTile.innerText == &quot;&quot;) { currTile.innerText = e.code[3]; col += 1; } } } else if (e.code == &quot;Backspace&quot;) { if (0 &lt; col &amp;&amp; col &lt;= width) { col -=1; } let currTile = document.getElementById(row.toString() + &#39;-&#39; + col.toString()); currTile.innerText = &quot;&quot;; } else if (e.code == &quot;Enter&quot;) { update(); } if (!gameOver &amp;&amp; row == height) { gameOver = true; document.getElementById(&quot;answer&quot;).innerText = word; } } function update() { let guess = &quot;&quot;; document.getElementById(&quot;answer&quot;).innerText = &quot;&quot;; //string up the guesses into the word for (let c = 0; c &lt; width; c++) { let currTile = document.getElementById(row.toString() + &#39;-&#39; + c.toString()); let letter = currTile.innerText; guess += letter; } guess = guess.toLowerCase(); //case sensitive console.log(guess); if (!guessList.includes(guess)) { document.getElementById(&quot;answer&quot;).innerText = &quot;Not in word list&quot;; return; } //start processing guess let correct = 0; let letterCount = {}; //keep track of letter frequency, ex) KENNY -&gt; {K:1, E:1, N:2, Y: 1} for (let i = 0; i &lt; word.length; i++) { let letter = word[i]; if (letterCount[letter]) { letterCount[letter] += 1; } else { letterCount[letter] = 1; } } console.log(letterCount); //first iteration, check all the correct ones first for (let c = 0; c &lt; width; c++) { let currTile = document.getElementById(row.toString() + &#39;-&#39; + c.toString()); let letter = currTile.innerText; //Is it in the correct position? if (word[c] == letter) { currTile.classList.add(&quot;correct&quot;); let keyTile = document.getElementById(&quot;Key&quot; + letter); keyTile.classList.remove(&quot;present&quot;); keyTile.classList.add(&quot;correct&quot;); correct += 1; letterCount[letter] -= 1; //deduct the letter count } if (correct == width) { gameOver = true; } } console.log(letterCount); //go again and mark which ones are present but in wrong position for (let c = 0; c &lt; width; c++) { let currTile = document.getElementById(row.toString() + &#39;-&#39; + c.toString()); let letter = currTile.innerText; // skip the letter if it has been marked correct if (!currTile.classList.contains(&quot;correct&quot;)) { //Is it in the word? //make sure we don&#39;t double count if (word.includes(letter) &amp;&amp; letterCount[letter] &gt; 0) { currTile.classList.add(&quot;present&quot;); let keyTile = document.getElementById(&quot;Key&quot; + letter); if (!keyTile.classList.contains(&quot;correct&quot;)) { keyTile.classList.add(&quot;present&quot;); } letterCount[letter] -= 1; } // Not in the word or (was in word but letters all used up to avoid overcount) else { currTile.classList.add(&quot;absent&quot;); let keyTile = document.getElementById(&quot;Key&quot; + letter); keyTile.classList.add(&quot;absent&quot;) } } } row += 1; //start new row col = 0; //start at 0 for new row } &lt;/script&gt; &lt;style&gt; body { font-family: Arial, Helvetica, sans-serif; text-align: center; } hr { width: 500px; } #title { font-size: 36px; font-weight: bold; letter-spacing: 2px; } #board { width: 350px; height: 420px; margin: 0 auto; margin-top: 3px; display: flex; flex-wrap: wrap; } .tile { /* Box */ border: 2px solid lightgray; width: 60px; height: 60px; margin: 2.5px; /* Text */ color: black; font-size: 36px; font-weight: bold; display: flex; justify-content: center; align-items: center; } .correct { background-color: #6AAA64; color: white; border-color: white; } .present { background-color: #C9B458; color: white; border-color: white; } .absent { background-color: #787C7E; color: white; border-color:white; } .keyboard-row { width: 400px; margin: 0 auto; display: flex; flex-wrap: wrap; } .key-tile { width: 36px; height: 40px; margin: 1px; border: 1px solid lightgray; /* Text */ font-size: 20px; font-weight: bold; display: flex; justify-content: center; align-items: center; } .enter-key-tile { width: 76px; height: 40px; margin: 1px; border: 1px solid lightgray; /* Text */ font-size: 20px; font-weight: bold; display: flex; justify-content: center; align-items: center; } &lt;/style&gt; .",
            "url": "https://tangalice.github.io/alicetang/2023/06/01/Wordle.html",
            "relUrl": "/2023/06/01/Wordle.html",
            "date": " • Jun 1, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Weather AI",
            "content": "import pandas as pd #pandas is a data analysis library for python weather = pd.read_csv(&quot;weather.csv&quot;, index_col=&quot;DATE&quot;) # pandas read csv function, reads in weather csv file. specifies that the first colomn (date colomn) is the index . weather . STATION NAME ACMH ACSH AWND FMTM PGTM PRCP SNOW SNWD ... WT11 WT13 WT14 WT15 WT16 WT17 WT18 WT21 WT22 WV01 . DATE . 1970-01-01 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 80.0 | 90.0 | NaN | NaN | NaN | 0.00 | 0.0 | 0.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1970-01-02 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 30.0 | 20.0 | NaN | NaN | NaN | 0.00 | 0.0 | 0.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1970-01-03 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 80.0 | 100.0 | NaN | NaN | NaN | 0.02 | 0.0 | 0.0 | ... | NaN | NaN | NaN | NaN | 1.0 | NaN | 1.0 | NaN | NaN | NaN | . 1970-01-04 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 10.0 | 20.0 | NaN | NaN | NaN | 0.00 | 0.0 | 0.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | 1.0 | NaN | NaN | NaN | . 1970-01-05 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 30.0 | 10.0 | NaN | NaN | NaN | 0.00 | 0.0 | 0.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2022-10-17 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | NaN | NaN | 9.62 | NaN | NaN | 0.08 | 0.0 | 0.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2022-10-18 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | NaN | NaN | 12.08 | NaN | NaN | 0.00 | 0.0 | 0.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2022-10-19 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | NaN | NaN | 14.99 | NaN | NaN | 0.00 | 0.0 | 0.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2022-10-20 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | NaN | NaN | 16.78 | NaN | 10.0 | 0.00 | 0.0 | 0.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2022-10-21 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | NaN | NaN | NaN | NaN | NaN | 0.00 | 0.0 | 0.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 19287 rows × 44 columns . null_pct = weather.apply(pd.isnull).sum()/weather.shape[0] null_pct #finds the number of null values in each colomn #then divides it by the total number of rows . STATION 0.000000 NAME 0.000000 ACMH 0.501478 ACSH 0.501426 AWND 0.265256 FMTM 0.475087 PGTM 0.363872 PRCP 0.000000 SNOW 0.000000 SNWD 0.000104 TAVG 0.680406 TMAX 0.000000 TMIN 0.000000 TSUN 0.998393 WDF1 0.501685 WDF2 0.498678 WDF5 0.502981 WDFG 0.734484 WDFM 0.999948 WESD 0.685228 WSF1 0.501530 WSF2 0.498678 WSF5 0.503033 WSFG 0.613055 WSFM 0.999948 WT01 0.630217 WT02 0.935034 WT03 0.933271 WT04 0.982579 WT05 0.981127 WT06 0.990615 WT07 0.994400 WT08 0.796962 WT09 0.992741 WT11 0.999274 WT13 0.886711 WT14 0.954010 WT15 0.997822 WT16 0.658993 WT17 0.996889 WT18 0.939493 WT21 0.999741 WT22 0.997459 WV01 0.999948 dtype: float64 . valid_columns = weather.columns[null_pct &lt; .05] . valid_columns #these are the colomns with less than 5% missing values . Index([&#39;STATION&#39;, &#39;NAME&#39;, &#39;PRCP&#39;, &#39;SNOW&#39;, &#39;SNWD&#39;, &#39;TMAX&#39;, &#39;TMIN&#39;], dtype=&#39;object&#39;) . weather = weather[valid_columns].copy() #preserves only the above colomns in our data #.copy() prevents us from getting a copy warning later . weather.columns = weather.columns.str.lower() . weather . station name prcp snow snwd tmax tmin . DATE . 1970-01-01 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 28 | 22 | . 1970-01-02 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 31 | 22 | . 1970-01-03 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.02 | 0.0 | 0.0 | 38 | 25 | . 1970-01-04 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 31 | 23 | . 1970-01-05 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 35 | 21 | . ... ... | ... | ... | ... | ... | ... | ... | . 2022-10-17 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.08 | 0.0 | 0.0 | 67 | 54 | . 2022-10-18 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 58 | 48 | . 2022-10-19 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 56 | 43 | . 2022-10-20 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 61 | 44 | . 2022-10-21 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 64 | 43 | . 19287 rows × 7 columns . weather = weather.ffill() #for example if the last day had a snow depth of 0, then the next day would also probably have a snow depth of zero too . weather.apply(pd.isnull).sum() #now we can see that all the missing values have been filled and we have 0 missing values . station 0 name 0 prcp 0 snow 0 snwd 0 tmax 0 tmin 0 dtype: int64 . weather.dtypes #everything is stored as the correct type here #object data type usually indicates that the colomn is a string . station object name object prcp float64 snow float64 snwd float64 tmax int64 tmin int64 dtype: object . weather.index #we can see that our index is stored as a object . Index([&#39;1970-01-01&#39;, &#39;1970-01-02&#39;, &#39;1970-01-03&#39;, &#39;1970-01-04&#39;, &#39;1970-01-05&#39;, &#39;1970-01-06&#39;, &#39;1970-01-07&#39;, &#39;1970-01-08&#39;, &#39;1970-01-09&#39;, &#39;1970-01-10&#39;, ... &#39;2022-10-12&#39;, &#39;2022-10-13&#39;, &#39;2022-10-14&#39;, &#39;2022-10-15&#39;, &#39;2022-10-16&#39;, &#39;2022-10-17&#39;, &#39;2022-10-18&#39;, &#39;2022-10-19&#39;, &#39;2022-10-20&#39;, &#39;2022-10-21&#39;], dtype=&#39;object&#39;, name=&#39;DATE&#39;, length=19287) . weather.index = pd.to_datetime(weather.index) . weather.index #now we can see that our index is stored as a date time . DatetimeIndex([&#39;1970-01-01&#39;, &#39;1970-01-02&#39;, &#39;1970-01-03&#39;, &#39;1970-01-04&#39;, &#39;1970-01-05&#39;, &#39;1970-01-06&#39;, &#39;1970-01-07&#39;, &#39;1970-01-08&#39;, &#39;1970-01-09&#39;, &#39;1970-01-10&#39;, ... &#39;2022-10-12&#39;, &#39;2022-10-13&#39;, &#39;2022-10-14&#39;, &#39;2022-10-15&#39;, &#39;2022-10-16&#39;, &#39;2022-10-17&#39;, &#39;2022-10-18&#39;, &#39;2022-10-19&#39;, &#39;2022-10-20&#39;, &#39;2022-10-21&#39;], dtype=&#39;datetime64[ns]&#39;, name=&#39;DATE&#39;, length=19287, freq=None) . weather.index.year #this gives us the year componenet of our data, you can&#39;t easily do this with a string . Int64Index([1970, 1970, 1970, 1970, 1970, 1970, 1970, 1970, 1970, 1970, ... 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022], dtype=&#39;int64&#39;, name=&#39;DATE&#39;, length=19287) . weather.index.year.value_counts().sort_index() #it sorts the index in order by year #counts how many times each unique value occurs, sees how many records we have for each year #should be either 365 or 366 (for leap years) . 1970 365 1971 365 1972 366 1973 365 1974 365 1975 365 1976 366 1977 365 1978 365 1979 365 1980 366 1981 365 1982 365 1983 365 1984 366 1985 365 1986 365 1987 365 1988 366 1989 365 1990 365 1991 365 1992 366 1993 365 1994 365 1995 365 1996 366 1997 365 1998 365 1999 365 2000 366 2001 365 2002 365 2003 365 2004 366 2005 365 2006 365 2007 365 2008 366 2009 365 2010 365 2011 365 2012 366 2013 365 2014 365 2015 365 2016 366 2017 365 2018 365 2019 365 2020 366 2021 365 2022 294 Name: DATE, dtype: int64 . weather[&quot;snwd&quot;].plot() #creates car graph that shows snow depth by day . &lt;AxesSubplot:xlabel=&#39;DATE&#39;&gt; . . weather[&quot;target&quot;] = weather.shift(-1)[&quot;tmax&quot;] #creating a target colomn in the weather data for predictions #shift method keeps the same method but pulls value from the next row . weather #for example Jan 1&#39;s target is Jan 2&#39;s Tmax . station name prcp snow snwd tmax tmin target . DATE . 1970-01-01 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 28 | 22 | 31.0 | . 1970-01-02 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 31 | 22 | 38.0 | . 1970-01-03 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.02 | 0.0 | 0.0 | 38 | 25 | 31.0 | . 1970-01-04 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 31 | 23 | 35.0 | . 1970-01-05 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 35 | 21 | 36.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 2022-10-17 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.08 | 0.0 | 0.0 | 67 | 54 | 58.0 | . 2022-10-18 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 58 | 48 | 56.0 | . 2022-10-19 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 56 | 43 | 61.0 | . 2022-10-20 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 61 | 44 | 64.0 | . 2022-10-21 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 64 | 43 | NaN | . 19287 rows × 8 columns . weather = weather.ffill() #fill the vaule . weather #one row having an incorrect target value will be insignificant with 20,000 rows in total . station name prcp snow snwd tmax tmin target . DATE . 1970-01-01 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 28 | 22 | 31.0 | . 1970-01-02 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 31 | 22 | 38.0 | . 1970-01-03 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.02 | 0.0 | 0.0 | 38 | 25 | 31.0 | . 1970-01-04 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 31 | 23 | 35.0 | . 1970-01-05 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 35 | 21 | 36.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 2022-10-17 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.08 | 0.0 | 0.0 | 67 | 54 | 58.0 | . 2022-10-18 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 58 | 48 | 56.0 | . 2022-10-19 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 56 | 43 | 61.0 | . 2022-10-20 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 61 | 44 | 64.0 | . 2022-10-21 USW00094789 | JFK INTERNATIONAL AIRPORT, NY US | 0.00 | 0.0 | 0.0 | 64 | 43 | 64.0 | . 19287 rows × 8 columns . from sklearn.linear_model import Ridge #apply ridge regression model #&quot;Ridge regression is a model tuning method that is used to analyse any data that suffers from multicollinearity&quot; #&quot;Multicollinearity is a statistical concept where several independent variables in a model are correlated&quot; #ridge regression is similar to linear regression except that it penalizes coefficients to account for multicollinearity rr = Ridge(alpha=.1) #alpha parameter controls how much coefficeints are shrunk . weather.corr() #checking for correlation between colomns #can see that preceptiation is pretty uncorrelated from the rest of colomns #but the rest are correlated to each other . prcp snow snwd tmax tmin target . prcp 1.000000 | 0.151051 | 0.001178 | -0.007210 | 0.052279 | -0.003358 | . snow 0.151051 | 1.000000 | 0.232567 | -0.175075 | -0.159285 | -0.172737 | . snwd 0.001178 | 0.232567 | 1.000000 | -0.259858 | -0.256977 | -0.241054 | . tmax -0.007210 | -0.175075 | -0.259858 | 1.000000 | 0.955487 | 0.915296 | . tmin 0.052279 | -0.159285 | -0.256977 | 0.955487 | 1.000000 | 0.915461 | . target -0.003358 | -0.172737 | -0.241054 | 0.915296 | 0.915461 | 1.000000 | . predictors = weather.columns[~weather.columns.isin([&quot;target&quot;, &quot;name&quot;, &quot;station&quot;])] #create a list of predictor colomns #gives all the colomns in weather data except for these 3 # ~ negative operator looks for colomns not in the list . predictors . Index([&#39;prcp&#39;, &#39;snow&#39;, &#39;snwd&#39;, &#39;tmax&#39;, &#39;tmin&#39;], dtype=&#39;object&#39;) . def backtest(weather, model, predictors, start=3650, step=90): all_predictions = [] for i in range(start, weather.shape[0], step): train = weather.iloc[:i,:] test = weather.iloc[i:(i+step),:] model.fit(train[predictors], train[&quot;target&quot;]) preds = model.predict(test[predictors]) preds = pd.Series(preds, index=test.index) combined = pd.concat([test[&quot;target&quot;], preds], axis=1) combined.columns = [&quot;actual&quot;, &quot;prediction&quot;] combined[&quot;diff&quot;] = (combined[&quot;prediction&quot;] - combined[&quot;actual&quot;]).abs() all_predictions.append(combined) return pd.concat(all_predictions) . predictions = backtest(weather, rr, predictors) . from sklearn.metrics import mean_absolute_error, mean_squared_error mean_absolute_error(predictions[&quot;actual&quot;], predictions[&quot;prediction&quot;]) . 5.13932667966084 . predictions.sort_values(&quot;diff&quot;, ascending=False) . actual prediction diff . DATE . 2007-03-26 78.0 | 49.744725 | 28.255275 | . 1999-01-02 53.0 | 25.911898 | 27.088102 | . 1998-03-26 80.0 | 53.033957 | 26.966043 | . 1985-04-18 84.0 | 57.071179 | 26.928821 | . 1990-03-12 85.0 | 58.144310 | 26.855690 | . ... ... | ... | ... | . 2006-08-20 88.0 | 88.002937 | 0.002937 | . 2019-03-01 40.0 | 40.002460 | 0.002460 | . 1992-06-11 76.0 | 76.001641 | 0.001641 | . 2011-09-16 66.0 | 66.000831 | 0.000831 | . 2014-03-25 39.0 | 38.999920 | 0.000080 | . 15637 rows × 3 columns .",
            "url": "https://tangalice.github.io/alicetang/python/jupyter/2023/05/26/weather.html",
            "relUrl": "/python/jupyter/2023/05/26/weather.html",
            "date": " • May 26, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "JavaScript Tutorial",
            "content": "JavaScript and Jupyter references . JavaScript is the most important language you need to learn as a frontend developer. Jupyter Notebooks is a convenient way to learn the language without the overhead of creating a full Website. Jupyter Notebooks had ChatGPT plugins to assist with design and troubleshooting problems. This Notebook has colors on HTML pages that were designed with a dark mode background. . JavaScript / Jupyter General References . W3Schools JS Reference - ChatGPT AI assistant for Chrome/Jupyter | Theme setup for Jupyter Article. Or do these commands from shell... Install pip: pip install jupyterthemes | Revert to original theme: jt -r | List themes: jt -l | Install with Theme, Name, Logo: jt -t onedork -T -N -kl | . | Chrome Dev Tools | . | Coding with jQuery . Jupyter Notebook GitHub, wget: https://raw.githubusercontent.com/nighthawkcoders/APCSA/master/_notebooks/2023-05-10-PBL-javascript_tutorial.ipynb | Markdown Fetch example in GitHub project for APCSP | HTML Static example in GitHub project for flask_portfolio | . | . output using HTML and CSS . Multiple cells are used to setup HTML in this lesson. Many of the JavaScript cells will use the output tag(s) to write into the HTML that has been setup. . %%html is used to setup HTML code block | &quot;style&quot; tag enables visuals customization | &quot;div&quot; tag is setup to receive data | . %%html &lt;html&gt; &lt;head&gt; &lt;style&gt; #output { background-color: #353b45; padding: 10px; border: 3px solid #ccc; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;output&quot;&gt; Hello! &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . . Hello! . output explored . There are several ways to ouput the classic introduction message: &quot;Hello, World!&quot; . Before you go further, open Console on your Browser. JavaScript developer leaves Console open all the time!!! | The function console.log() outputs to Console, this is often used for inspection or debugging. | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. Developer call this a hard coded string. | &quot;Hello, World&quot; literal is a parameter to console.log(), element.txt() and alert(). | The element.txt function is part of Jupyter Notebook %%js magic. This is convenient for Notebook and testing. | The alert command outputs the parameter to a dialog box, so you can see it in this Jupyter notebook. The alert commands are shown, but are commented out as the stop run all execution of the notebook. | Note, in a Web Application Debugging: An alert is often used for less savy Developers. Console is used by more savy developers; console often requires setting up a lot of outputs. Source level debugging is the most powerful solution for debugging and does not require alert or console commands. | . %%js // required to allow cell to be JavaScript enabled console.log(&quot;JavaScript/Jupyter Output Intro&quot;); // Browser Console output; debugging or tracing console.log(&quot;Hello, World!&quot;); console.log(&quot;Hello, World Again!&quot;); // Document Object Model (DOM) output; output to HTML, CSS which is standard for a Web Page // &lt;mark&gt;select element method&lt;/mark&gt;: DOM native JavaScript get, document.getElementByID document.getElementById(&quot;output&quot;).textContent = &quot;Hello, World!&quot;; // &lt;mark&gt;jQuery CSS-style method&lt;/mark&gt;: Tag for DOM selector, $(&#39;#output&#39;) $(&#39;#output&#39;).append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); // br is break or new line, b is bold // Jupyter built in magic element for testing and convenience of development element.text(&quot;Hello, World!&quot;); // element is output option as part of %%js magic element.append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); //alert(&quot;Hello, World!&quot;); . multiple outputs using one variable . This second example is a new sequence of code, two or more lines of code forms a sequence. This example defines a variable, thank goodness!!! In the previous example we were typing the string &quot;Hello, World&quot; over and over. Observe with the variable msg=&quot;Hello, World!&quot;; we type the string once and now use msg over and over. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console, be sure to Inspect it! | The element.text() is part of Jupyter Notebooks and displays as output blow the code on this page. Until we build up some more interesting data for Web Site, we will not use be using the Python HTML, CSS technique. | The alert(msg) works the same as previous, but as the other commands uses msg as parameter. | . %%js console.log(&quot;Variable Definition&quot;); var msg = &quot;Hello, World!&quot;; // Use msg to output code to Console and Jupyter Notebook console.log(msg); //right click browser select Inspect, then select Console to view element.text(msg); //alert(msg); . output showing use of a function . This example passes the defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are multiple steps in this code.. The &quot;definition of the function&quot;: &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. Passing a parameter is required when you call this function. | The &quot;call to the function:&quot;logIt(msg)&quot; is the call to the function, this actually runs the function. The variable &quot;msg&quot; is used a parameter when calling the logIt function. | . | Showing reuse of function... There are two calls to the logIt function | This is called Prodedural Abstraction, a term that means reusing the same code | . | . %%js console.log(&quot;Function Definition&quot;); /* Function: logIt * Parameter: output * Description: The parameter is &quot;output&quot; to console and jupyter page */ function logIt(output) { console.log(output); element.append(output + &quot;&lt;br&gt;&quot;); //alert(output); } // First sequence calling logIt function var msg = &quot;Hello, World!&quot;; logIt(msg); // Second sequence calling logIt function var msg = &quot;Hello, &lt;b&gt;Students&lt;/b&gt;!&quot; // replaces content of variable var classOf = &quot;Welcome CS class of 2023-2024.&quot; logIt(msg + &quot; &quot; + classOf); // concatenation of strings . output showing Loosely typed data . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. . To define a variable you prefix the name with var or const. The variable type is determined by JavaScript at runtime. | Python and many interpretive languages are loosely typed like JavaScript. This is considered programmer friendly. | Java which is a compiled language is strongly typed, thus you will see terms like String, Integer, Double, and Object in the source code. | In JavaScript, the typeof keyword returns the type of the variable. Become familiar with type as it is valuable in conversation and knowing type help you understand how to modify data. Each variable type will have built in methods to manage content within the data type. | . %%js console.log(&quot;Examine Data Types&quot;); // Function to add typeof to output function getType(output) { return typeof output + &quot;: &quot; + output; } // Function defintion function logIt(output) { console.log(getType(output)); // logs string console.info(output); // logs object element.append(getType(output) + &quot;&lt;br&gt;&quot;); // adds to Jupyter output //alert(getType(output)); } // Common Types element.append(&quot;Common Types &lt;br&gt;&quot;); logIt(&quot;Mr M&quot;); // String logIt(1997); // Number logIt(true); // Boolean element.append(&quot;&lt;br&gt;&quot;); // Object Type, this definition is often called a array or list element.append(&quot;Object Type, array &lt;br&gt;&quot;); var scores = [ 90, 80, 100 ]; logIt(scores); element.append(&quot;&lt;br&gt;&quot;); // Complex Object, this definition is often called hash, map, hashmap, or dictionary element.append(&quot;Object Type, hash or dictionary &lt;br&gt;&quot;); var person = { // key:value pairs seperated by comma &quot;name&quot;: &quot;Mr M&quot;, &quot;role&quot;: &quot;Teacher&quot; }; logIt(person); logIt(JSON.stringify(person)); //method used to convert this object into readable format . Build a Person object and JSON . JavaScript and other languages have special properties and syntax to store and represent data. In fact, a class in JavaScript is a special function. . Definition of class allows for a collection of data, the &quot;class Person&quot; allows programmer to retain name, github id, and class of a Person. | Instance of a class, the &quot;const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; makes an object &quot;teacher&quot; which is an object representation of &quot;class Person&quot;. | Setting and Getting properties After creating teacher and student objects, observe that properties can be changed/muted or extracted/accessed. | . %%html &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;html&gt; &lt;head&gt; &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/js/jquery.tablesorter.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; /* CSS-style selector maps to table id or other id&#39;s in HTML */ #jsonTable, #flaskTable { background-color: #353b45; padding: 10px; border: 3px solid #ccc; box-shadow: 0.8em 0.4em 0.4em grey; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Table for writing and extracting jsonText --&gt; &lt;table id=&quot;jsonTable&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Classroom JSON Data&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td id=&quot;jsonText&quot;&gt;{&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]}&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; . . Classroom JSON Data . {&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]} | . . %%js console.log(&quot;Person objects&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: role uses a default property, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person object in JSON &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } // make a new Person Object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript // update role to Teacher teacher.setRole(&quot;Teacher&quot;); // set the role teacher.logIt(); // log to console // make a new Person Object const student = new Person(&quot;Jane Doe&quot;, &quot;jane&quot;, 2007); // object type is easy to work with in JavaScript student.logIt(); // log to console . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . %%js console.log(&quot;Classroom object&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: this.role is a default property retained in object, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person json &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } /* class: Classroom * Description: A collection of Person objects */ class Classroom { /* method: constructor * parameters: teacher - a Person object, students - an array of Person objects * description: returns object when &quot;new Classroom()&quot; is called containing properties and methods of a Classroom * assignment: this.classroom, this.teacher, ... are properties retained in the returned object */ constructor(teacher, students) { /* spread: this.classroom contains Teacher object and all Student objects * map: this.json contains of map of all persons to JSON */ this.teacher = teacher; this.students = students; this.classroom = [teacher, ...students]; // ... spread option this.json = &#39;{&quot;classroom&quot;:[&#39; + this.classroom.map(person =&gt; person.getJSON()) + &#39;]}&#39;; } /* method: logIT * description: &quot;this&quot; Classroom object is logged to console */ logIt() { //Classroom object console.log(this); //Classroom json element.append(&quot;Classroom object in JSON&lt;br&gt;&quot;); element.append(this.json + &quot;&lt;br&gt;&quot;); //alert(this.json); } } /* function: constructCompSciClassroom * Description: Create data for Classroom and Person objects * Returns: A Classroom Object */ function constructCompSciClassroom() { // define a Teacher object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;Teacher&quot;); // optional 4th parameter // define a student Array of Person objects const students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;VidhiKulkarni&quot;, 2024) ]; // make a CompSci classroom from formerly defined teacher and student objects return new Classroom(teacher, students); // returns object } // assigns &quot;compsci&quot; to the object returned by &quot;constructCompSciClassroom()&quot; function const compsci = constructCompSciClassroom(); // output of Objects and JSON in CompSci classroom compsci.logIt(); // enable sharing of data across jupyter cells $(&#39;#jsonText&#39;).text(compsci.json); // posts/embeds/writes compsci.json to HTML DOM element called jsonText . for loop to generate Table Rows in HTML output . This code extracts JSON text from HTML, that was placed in DOM in an earlier JavaScript cell, then it parses text into a JavaScript object. In addition, there is a for loop that iterates over the extracted object generating formated rows and columns in an HTML table. . Table generation is broken into parts... table data is obtained from a classroom array inside of the extracted object. | the JavaScript for loop allows the construction of a new row of data for each Person hash object inside of the the Array. | in the loop a table row &lt;tr&gt; ... &lt;/tr&gt; is created for each Hash object in the Array. | in the loop table data, a table column, &lt;td&gt; ... &lt;/td&gt; is created for name, ghID, classOf, and role within the Hash object. | . | . %%js console.log(&quot;Classroom Web Page&quot;); // extract JSON text from HTML page const jsonText = document.getElementById(&quot;jsonText&quot;).innerHTML; console.log(jsonText); element.append(&quot;Raw jsonText element embedded in HTML&lt;br&gt;&quot;); element.append( jsonText + &quot;&lt;br&gt;&quot;); // convert JSON text to Object const classroom = JSON.parse(jsonText).classroom; console.log(classroom); // from classroom object creates rows and columns in HTML table element.append(&quot;&lt;br&gt;Formatted data sample from jsonText &lt;br&gt;&quot;); for (var row of classroom) { element.append(row.ghID + &quot; &quot; + row.name + &#39;&lt;br&gt;&#39;); // tr for each row, a new line $(&#39;#classroom&#39;).append(&#39;&lt;tr&gt;&#39;) // td for each column of data $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.ghID + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.classOf + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.role + &#39;&lt;/td&gt;&#39;) // tr to end row $(&#39;#classroom&#39;).append(&#39;&lt;/tr&gt;&#39;); } . %%html &lt;head&gt; &lt;!-- load jQuery and DataTables scripts --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;table id=&quot;flaskTable&quot; class=&quot;table&quot; style=&quot;width:100%&quot;&gt; &lt;thead id=&quot;flaskHead&quot;&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;DOB&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;flaskBody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;script&gt; $(document).ready(function() { fetch(&#39;https://flask.nighthawkcodingsociety.com/api/users/&#39;, { mode: &#39;cors&#39; }) .then(response =&gt; { if (!response.ok) { throw new Error(&#39;API response failed&#39;); } return response.json(); }) .then(data =&gt; { for (const row of data) { // BUG warning/resolution - DataTable requires row to be single append $(&#39;#flaskBody&#39;).append(&#39;&lt;tr&gt;&lt;td&gt;&#39; + row.id + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.dob + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.age + &#39;&lt;/td&gt;&lt;/tr&gt;&#39;); } // BUG warning - Jupyter does not show Datatable controls, works on deployed GitHub pages $(&quot;#flaskTable&quot;).DataTable(); }) .catch(error =&gt; { console.error(&#39;Error:&#39;, error); }); }); &lt;/script&gt; . . ID Name DOB Age . Hacks . One key to these hacks is to build confidence with me going into final grade. I would like to see each student adapt this frontend work to their final project. Second key is the finished work can serve as review for the course, notes for the future in relationship to frontend. . Adapt this tutorial to your own work | Consider what you need to work on to be stronger developer | Show something creative or unique, no cloning | Be ready to talk to Teacher for 5 to 10 minutes. Individually!!! | Show in Jupyter Notebook during discussion, show Theme and ChatGPT | Have a runtime final in GithHub Pages (or Fastpage) | Go way beyond expectations. There seems to be a proliferation of ChatGPT plugins, so APIs must be easy. Someone who itegrates ChatGPT API into their final project will be my hero. | .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2023/05/23/javascript.html",
            "relUrl": "/java/jupyter/2023/05/23/javascript.html",
            "date": " • May 23, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Lab",
            "content": "Recursion Hack . public void drawLine(int n) { if (n == 0) { return; } for (int i = 1; i &lt;= n; i++) { System.out.print(&quot;*&quot;); } System.out.println(); drawLine(n - 1); } drawLine(10); . ********** ********* ******** ******* ****** ***** **** *** ** * . Sorting Hack . import java.util.ArrayList; import java.util.Comparator; public class Country { private String name; private int size; public Country(String name, int size) { this.name = name; this.size = size; } public int getSize() { return size; } public String getName() { return name; } public static void selectionSort(ArrayList&lt;Country&gt; countries, Comparator&lt;Country&gt; comparator) { for (int i = 0; i &lt; countries.size() - 1; i++) { int maxIndex = i; for (int j = i + 1; j &lt; countries.size(); j++) { if (comparator.compare(countries.get(j), countries.get(maxIndex)) &gt; 0) { maxIndex = j; } } if (maxIndex != i) { Country temp = countries.get(i); countries.set(i, countries.get(maxIndex)); countries.set(maxIndex, temp); } } } public static void main(String[] args) { ArrayList&lt;Country&gt; countries = new ArrayList&lt;&gt;(); countries.add(new Country(&quot;USA&quot;, 9834)); countries.add(new Country(&quot;China&quot;, 9596)); countries.add(new Country(&quot;Japan&quot;, 377)); countries.add(new Country(&quot;India&quot;, 3287)); countries.add(new Country(&quot;Russia&quot;, 17098)); // Sort the countries in decreasing order based on their size selectionSort(countries, new Comparator&lt;Country&gt;() { @Override public int compare(Country c1, Country c2) { return Integer.compare(c2.getSize(), c1.getSize()); } }); // Print the sorted list of countries for (Country country : countries) { System.out.println(country.getName() + &quot; - &quot; + country.getSize()); } } } Country.main(null) . Japan - 377 India - 3287 China - 9596 USA - 9834 Russia - 17098 . Array List Hacks . Test if two arraylists contain the same elements in reverse order . import java.util.ArrayList; import java.util.Collections; public class ArrayListReverseOrderTest { public static void main(String[] args) { ArrayList&lt;Integer&gt; list1 = new ArrayList&lt;&gt;(); list1.add(1); list1.add(2); list1.add(3); ArrayList&lt;Integer&gt; list2 = new ArrayList&lt;&gt;(); list2.add(3); list2.add(2); list2.add(1); boolean isSame = isArrayListsEqualInReverseOrder(list1, list2); System.out.println(&quot;Do the arraylists contains the same elements in reverse order? &quot; + isSame); } public static &lt;T&gt; boolean isArrayListsEqualInReverseOrder(ArrayList&lt;T&gt; list1, ArrayList&lt;T&gt; list2) { if (list1.size() != list2.size()) { return false; } ArrayList&lt;T&gt; reverseList1 = new ArrayList&lt;&gt;(list1); Collections.reverse(reverseList1); for (int i = 0; i &lt; list2.size(); i++) { if (!list2.get(i).equals(reverseList1.get(i))) { return false; } } return true; } } ArrayListReverseOrderTest.main(null) . Do the arraylists contains the same elements in reverse order? true . Overwrite all the elements in an arraylist with the alphabet . import java.util.ArrayList; public class ArrayListOverwriteTest { public static void main(String[] args) { ArrayList&lt;Character&gt; list = new ArrayList&lt;&gt;(); // Add 26 elements to the list for (int i = 0; i &lt; 26; i++) { list.add(null); } // Overwrite the elements with the alphabet for (int i = 0; i &lt; 26; i++) { char c = (char) (i + &#39;A&#39;); list.set(i, c); } // Print the list System.out.println(list); } } ArrayListOverwriteTest.main(null) . [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z] .",
            "url": "https://tangalice.github.io/alicetang/jupyter/2023/04/25/Lab2.html",
            "relUrl": "/jupyter/2023/04/25/Lab2.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Lab",
            "content": "Merge Sort Hack #1 . Use the integer mergesort that we created and adapt it to sort an array of Java String objects. We recommend using the compareTo() method of the String class for this. . class Main { // Merges two subarrays of arr[]. // First subarray is arr[l..m] // Second subarray is arr[m+1..r] void merge(String arr[], int l, int m, int r) { // Find the sizes of two subarrays to be merged int n1 = m - l + 1; int n2 = r - m; /* Create temp arrays */ String[] L = new String[n1]; String[] R = new String[n2]; /* Copy data to temp arrays */ for (int i = 0; i &lt; n1; ++i) L[i] = arr[l + i]; for (int j = 0; j &lt; n2; ++j) R[j] = arr[m + 1 + j]; /* Merge the temp arrays */ // Initial indexes of first and second subarrays int i = 0, j = 0; // Initial index of merged subarray array int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { if (L[i].compareTo(R[j]) &lt;= 0) { arr[k] = L[i]; // copy element from L to arr i++; // move to the next element in L } else { arr[k] = R[j]; // copy element from R to arr j++; // move to the next element in R } k++; } /* Copy remaining elements of L[] if any */ while (i &lt; n1) { arr[k] = L[i]; i++; k++; } /* Copy remaining elements of R[] if any */ while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } // Main function that sorts arr[l..r] using // merge() void sort(String[] arr, int l, int r) { if (l &lt; r) { int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } /* A utility function to print array of size n */ static void printArray(String[] arr) { int n = arr.length; for (int i = 0; i &lt; n; ++i) System.out.print(arr[i] + &quot; &quot;); System.out.println(); } // Driver code public static void main(String args[]) { String[] arr = { &quot;bobby&quot;, &quot;amanda&quot;, &quot;peter&quot;, &quot;steven&quot;, &quot;katelyn&quot;, &quot;grant&quot; }; System.out.println(&quot;Given Array&quot;); printArray(arr); Main ob = new Main(); ob.sort(arr, 0, arr.length - 1); System.out.println(&quot; nSorted array&quot;); printArray(arr); } } Main.main(null) . Given Array bobby amanda peter steven katelyn grant Sorted array amanda bobby grant katelyn peter steven . Binary Search Hack #1 . Given an int array[] = {1, 3, 5, 7, 9, 23, 45, 67}, search the number 45 and give it&#39;s index with Binary search, BUT do this using recursion. Make sure to include informative comments to explain the code as you write the algorithm. . public class BinarySearchRecursive { // Define the recursive binary search method public static int binarySearch(int arr[], int low, int high, int target) { // Check if the base case has been reached if (high &gt;= low) { // Calculate the middle index of the array int mid = low + (high - low) / 2; // If the target is present at the middle if (arr[mid] == target) { return mid; } // If the target is smaller than the middle element, // then it can only be present in the left subarray if (arr[mid] &gt; target) { return binarySearch(arr, low, mid - 1, target); } // Else the target can only be present in the right subarray return binarySearch(arr, mid + 1, high, target); } // If the target is not present in the array return -1; } public static void main(String args[]) { int arr[] = {1, 3, 5, 7, 9, 23, 45, 67}; int n = arr.length; int target = 45; // Perform binary search using recursion int result = binarySearch(arr, 0, n - 1, target); // Print the result if (result == -1) { System.out.println(&quot;Element not present in the array&quot;); } else { System.out.println(&quot;Element found at index &quot; + result); } } } BinarySearchRecursive.main(null) . Element found at index 6 .",
            "url": "https://tangalice.github.io/alicetang/jupyter/2023/04/25/Lab.html",
            "relUrl": "/jupyter/2023/04/25/Lab.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Random Test",
            "content": "public class Book { private static int bookCount = 0; private String title; private int id; public Book(String title) { this.title = title; this.id = ++bookCount; } public String getTitle() { return title; } public static int getBookCount() { return bookCount; } public int getID() { return id; } public String toString() { return title; } public static void main(String[] args) { Book book1 = new Book(&quot;The Great Gatsby&quot;); Book book2 = new Book(&quot;To Kill a Mockingbird&quot;); System.out.println(&quot;Book 1 title: &quot; + book1 + &quot; (ID: &quot; + book1.getID()+&quot;)&quot;); System.out.println(&quot;Book 2 title: &quot; + book2 + &quot; (ID: &quot; + book2.getID()+&quot;)&quot;); System.out.println(&quot;Number of books in library: &quot; + Book.getBookCount()); } } Book.main(null); . Book 1 title: The Great Gatsby (ID: 1) Book 2 title: To Kill a Mockingbird (ID: 2) Number of books in library: 2 . import java.time.LocalDateTime; public class Book { private static int bookCount = 0; private int id; private String title; private LocalDateTime timeEntered; public Book(String title) { this.id = ++bookCount; this.title = title; this.timeEntered = LocalDateTime.now(); } public String getTitle() { return this.title; } public void setTitle(String title) { this.title = title; } public int getId() { return this.id; } public LocalDateTime getTimeEntered() { return this.timeEntered; } public static int getBookCount() { return bookCount; } public String toString() { return this.title; } public static void main(String[] args) { Novel novel = new Novel(&quot;To Kill a Mockingbird&quot;, &quot;Harper Lee&quot;); Textbook textbook = new Textbook(&quot;Java Programming&quot;, &quot;Oracle&quot;); System.out.println(&quot;Book: &quot; + novel + &quot; (ID: &quot; + novel.getId() + &quot;)&quot;); System.out.println(&quot;Author: &quot; + novel.getAuthor()); System.out.println(&quot;Time Entered: &quot; + novel.getTimeEntered()); System.out.println(); System.out.println(&quot;Textbook: &quot; + textbook + &quot; (ID: &quot; + textbook.getId() + &quot;)&quot;); System.out.println(&quot;Publishing Company: &quot; + textbook.getPublishingCompany()); System.out.println(&quot;Time Entered: &quot; + textbook.getTimeEntered()); System.out.println(); System.out.println(&quot;Total Books in Library: &quot; + Book.getBookCount()); } } class Novel extends Book { private String author; public Novel(String title, String author) { super(title); this.author = author; } public String getAuthor() { return this.author; } public void setAuthor(String author) { this.author = author; } } class Textbook extends Book { private String publishingCompany; public Textbook(String title, String publishingCompany) { super(title); this.publishingCompany = publishingCompany; } public String getPublishingCompany() { return this.publishingCompany; } public void setPublishingCompany(String publishingCompany) { this.publishingCompany = publishingCompany; } } Book.main(null); . Book: To Kill a Mockingbird (ID: 1) Author: Harper Lee Time Entered: 2023-04-21T09:22:18.280574 Textbook: Java Programming (ID: 2) Publishing Company: Oracle Time Entered: 2023-04-21T09:22:18.280856 Total Books in Library: 2 .",
            "url": "https://tangalice.github.io/alicetang/jupyter/2023/04/20/test.html",
            "relUrl": "/jupyter/2023/04/20/test.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Sorts and Big O Notation",
            "content": "Checkpoint #3 . build sort into data structure | perform BigO analysis and evaluation of best sorts from CB, use sorts from others to compare to yours | support Analysis with runtime data, also analyze number of compares and swaps. Consider space complexity | . public class SelectionSort { public int comparisons = 0; // creates primitive data types public int swaps = 0; // public so it&#39;s used by both methods public static void main(String[] args) { // main method long start = 0; // initializes long which is a primitive data type that stores whole numbers. common type of initialization for a counter or timer that needs to be incremented or decremented as part of a program&#39;s logic long end = 0; // create a new SelectionSort object SelectionSort selectionSort = new SelectionSort(); for (int i=0;i&lt;12;i++) { // create 12 arrays as per requirements // generate 5000 random elements int[] array = new int[5000]; // creates a new array with 5000 integer for (int j=0;j&lt;5000;j++) { array[j] = (int)(Math.random()*5000000); } // for loop generates the elements using random (math.random is only 0-1 so you mulitiply by 5000000 to get bigger number) // sort the array start += System.currentTimeMillis(); // before you start the sorting, it stores the current time selectionSort.sort(array); // sorts end += System.currentTimeMillis(); // stores the end time } // get average System.out.println(&quot;Average time taken: &quot; + (end-start)/12 + &quot; ms&quot;); System.out.println(&quot;Average comparisons: &quot; + selectionSort.comparisons/12); System.out.println(&quot;Average swaps: &quot; + selectionSort.swaps/12); } public void sort(int[] numbers) { // selection sort algorithm int n = numbers.length; // figures out the length of the array for (int i = 0; i &lt; n - 1; i++) { // for loop used to repeatedly finds the minimum value and swaps it int minIndex = i; // outer loop iterates through array numbers and the minimum value is set to i for (int j = i + 1; j &lt; n; j++) { // The inner loop iterates through unsorted portion of the array after the current index i to the last element the algorithm compares the current element with the minimum element found so far comparisons++; // records the number of comparision if (numbers[j] &lt; numbers[minIndex]) { // inside loop checks if the index is different from the current value minIndex = j; // if it is, the current value is set as the index } } if (minIndex != i) { // stores value of first element in the temp variable and then copying the value of the temporary variable to the minimum element&#39;s original position int temp = numbers[i]; numbers[i] = numbers[minIndex]; numbers[minIndex] = temp; swaps++; // number of swaps is implementing } } System.out.println(&quot;Comparisons: &quot; + comparisons); System.out.println(&quot;Swaps: &quot; + swaps); } } SelectionSort.main(null); . Comparisons: 12497500 Swaps: 4990 Comparisons: 24995000 Swaps: 9980 Comparisons: 37492500 Swaps: 14974 Comparisons: 49990000 Swaps: 19963 Comparisons: 62487500 Swaps: 24957 Comparisons: 74985000 Swaps: 29948 Comparisons: 87482500 Swaps: 34937 Comparisons: 99980000 Swaps: 39925 Comparisons: 112477500 Swaps: 44917 Comparisons: 124975000 Swaps: 49905 Comparisons: 137472500 Swaps: 54901 Comparisons: 149970000 Swaps: 59887 Average time taken: 14 ms Average comparisons: 12497500 Average swaps: 4990 . Evaluation: . selection sort: 14 ms // O(n^2) | insertion sort: 6ms // O(n^2) | merge sort: 14 ms // O(nlogn) | bubble sort: 22 ms // O(n^2) | these are the big O notaitons for the average cases, for example, in a best case inesertion sort it could be O(n) | insertion sort is the fastest even though it has the highest number of swaps. When I googled it, it said that Insertion sort is faster because it &quot;has less overhead&quot; which basically means that it requires less extra resources (memory, processor, time) than other algorithms. | . HashMap example . import java.util.HashMap; import java.util.Random; public class ExampleHashMapSearch { public static void main(String[] args) { // Create a new HashMap object with 5000 elements HashMap&lt;Integer, String&gt; myHashMap = new HashMap&lt;&gt;(); for (int i = 0; i &lt; 5000; i++) { myHashMap.put(i, &quot;value_&quot; + i); } // Perform 12 searches with random keys int numSearches = 12; // search for 12 different elements int numKeys = 100; int[] searchTimes = new int[numSearches]; Random rand = new Random(); for (int i = 0; i &lt; numSearches; i++) { // Generate random keys to search for int[] keys = new int[numKeys]; for (int j = 0; j &lt; numKeys; j++) { keys[j] = rand.nextInt(5000); } // Search for the keys and record the time taken long startTime = System.nanoTime(); for (int j = 0; j &lt; numKeys; j++) { myHashMap.get(keys[j]); } long endTime = System.nanoTime(); searchTimes[i] = (int) ((endTime - startTime)); // Convert nanoseconds to milliseconds } // Calculate the average search time int sum = 0; for (int i = 0; i &lt; numSearches; i++) { sum += searchTimes[i]; } int avg = sum / numSearches; // Print the results System.out.println(&quot;Average search time: &quot; + avg + &quot; nanoseconds&quot;); } } ExampleHashMapSearch.main(null); . Average search time: 19434 nanoseconds . Hashmap is O(1) | Binary Search is O(logn) divides into 2 | .",
            "url": "https://tangalice.github.io/alicetang/jupyter/2023/04/04/HashMap.html",
            "relUrl": "/jupyter/2023/04/04/HashMap.html",
            "date": " • Apr 4, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Classes and Objects",
            "content": "Classes . Classes are “blueprints” that we use to instantiate objects | . Why Do We Need Classes . Classes are an essential aspect of OOP | Models real world objects but in code | . Anatomy of a Class . Object State, attributes, behavior | Instance of a class | Represented by an instance in the program | . | Class Defines an abstract data type | Object references String variables | . | Instance Variables Attributes, behaviors | Data for objects ### Methods and Constructors | . | . | Methods Behaviors or actions that apply to the objects | . | Behaviors or actions that apply to the objects Creates the object | . | . Main Method . Tests the class | Instance variables Attributes, fields, properties | . | . Constructors . Special method for object instantiation Sets initial values for variables | Can run methods | . | Default Constructor No constructor defined | No arguments | . | Can have multiple constructors per class | . Documentation with Comments . Comment with // for a single line | / / for multiple line | /* / for documentation comment | Help with explaining what code is about | Preconditions What must be true before code is implemented | . | Postconditions Should be true after method is run | Describe the output if the method | . | . Accessor &amp; Mutator Methods . Get of methods or getters Allows you to ‘get’ values of variables | Returns a copy of variable | . | Non-Void Methods Return a value of specified data type | No parameters | . | . Mutator Methods . Set of methods or setters Allows you to change the values of instance variables | . | Void methods Will not return a value | Will take parameters for instance variables | . | . Writing Methods . 3 Parts: Method Definition (Modifiers, Return Type) | Method Signature (Name, Parameters) | Method Body (Code) | . | camelCase | Object.method() | . Method Return Types . String Returns a string | . | Int Returns an integer | . | Bool Returns a Boolean | . | Any Object Type Returns specified Object | . | Void Method have any return values | . | . Keywords in Java . Key word usually used after access modifiers | Denotes as belonging to a class | Objects cannot reference/use static variables &amp; methods | Universally shared variables and methods among objects | . This . Refers to the constructor that it is being called in | Eliminates confusion between attributes and parameters | . Access Modifiers . Restricts scope of classes, variables, and functions | Mainly used for encapsulation | Prevents misuse of data &amp; methods | . Scope and Access . Where a variable can be accessed or used Declaration of variable | . | 3 Levels: Class Level: Instance var | Method Level: Local, Parameter var | Block Level: Loops, If/Else | . | .",
            "url": "https://tangalice.github.io/alicetang/cb/jupyter/2023/03/28/ClassesandObjects.html",
            "relUrl": "/cb/jupyter/2023/03/28/ClassesandObjects.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "CSUSM EC",
            "content": "Main Takeaways / Reflection . One main takeaway that I learned today was that a CS degree is very versatile, and you can use cs no matter what stem field you study. For example, Ashley is a physics major, but she says she still uses Python language to read her data. This is extremely relevant to me as very soon I have to decide what college I want to commit to. Depending on what college I go to, I would either be a CS major or a pre-statistics/data science major. John and Ashley’s input is very helpful and is helping me gear more towrads choosing CS. CS is more applicable to different areas compared to data science; I would still be utilizing cs as a data science major. However statistics and data isn’t nearly as applicable. Hearing about John and Ashley’s stories is also somewhat motivating. Even though Ashley failed multiple classes and John called himself a delinquent, they were still able to be successful. It’s never too late to straighten yourself up and get to work. The information regarding different types of loans was also very helpful and something that I think is not talked about enough. Before this event, I did not really even know what subsidized verseus unsubsidized loans were. I’ll make sure to keep John’s words in mind if I have to take out student loans for college. . Notes . Ashley . from palm springs | majored in applied physics at CSUSM, 2017-2022 | phd at USD for material sciences and engineering | failed some classes, but that doesn’t define you | CSUSM has a smaller campus, felt that it had a great support system (especially for stem) and opened many | gets paid 41k a year to go to USD | . John . from palm springs, called himself a “delinquent” in high school | attended palomar for 3 years, then transferred to CSUSM during the pandemic | first time on campus was his last semester | majored in CS, took him 6 years to get a degree | says a CS degree is versatile | now works at CSUSM | since he went to community college first, he is not in debt (he took one subsidized loan) | JOHN IS DEBT FREE! | He had an internship at the safari park | . CSUSM . Used to be a poultry farm | Has a new engineering building | Going to build another science building for engineering etc | National leader in social mobility | Highest turnover to socio-economic status | There are a lot of companies that want to hire from CSUSM | Computer engineering starting this fall | Smaller campus = constantly change curriculum to adapt | Can transition between comp engineer/computer science etc (the classes are very in sync) | . Clubs . Very important to be involved in your undergrad career | Cyber security club, robotics, Women in stem | Ashley was in Society of physics students | Gives opportunities | . Internships . How to find: Networking, Campus events, join clubs, check emails, and google | you can intern at other universities (don’t have to be a student) | try to avoid unpaid internships (earn money when you can) | the worst thing someone can say is “no” | Ask faculty members to help read your essay | . Paying for College . Grants vs Scholarships (Depends how much your parents earn) Grant: government loan of money Some grants go towards paying for textbooks or other things that can help you be successful | . | Scholarship: privately funded full ride for playing a sport | how to find: it is on you to search them out, you can get a scholarship for virtually anything (grades matter though) | . | . | Avoid taking out loans | Two types of loans Unsubsidized: Start gaining interest immediately | Subsidized: A loan that is partially funded by the government, You get a grace period to avoid interest | . | .",
            "url": "https://tangalice.github.io/alicetang/2023/03/28/CSUSMec.html",
            "relUrl": "/2023/03/28/CSUSMec.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Queues Hacks 2",
            "content": "Linked List Code . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . Queue Base Code . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } /** * Returns if queue is empty * * @return boolean if it is empty */ public boolean isEmpty() { return this.head == null; } public String toString() { int count = 0; String str = &quot;&quot;; for (T e : this) { str += e + &quot; &quot;; count++; } return &quot;Words count: &quot; + count + &quot;, data: &quot; + str; } } . import java.util.Random; /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManagerChanged&lt;T&gt; { // queue data private final String name; // name of queue protected int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object private String lastOperation = &quot;&quot;; private String lastObject = &quot;&quot;; /** * Queue constructor * Title with empty queue */ public QueueManagerChanged(String name) { this.name = name; } public int getCount() { return this.count; } /** * Print any array objects from queue */ public void printQueue() { System.out.println(lastOperation + &quot;: &quot; + lastObject); System.out.print(this.name + &quot; count: &quot; + count); System.out.print(&quot;, data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } public void printIntQueue() { for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } /** * Add an objects to queue */ public void add(T object) { //accepts single generic T Object this.queue.add(object); this.count++; this.lastOperation = &quot;Enqueued&quot;; this.lastObject = object.toString(); } public LinkedList&lt;T&gt; getHead() { return this.queue.getHead(); } public T delete() { //accepts single generic T Object T headObject = this.queue.delete(); this.count--; this.lastOperation = &quot;Dequeued&quot;; this.lastObject = headObject.toString(); return headObject; } public T peek() { //accepts single generic T Object return this.queue.peek(); } public LinkedList&lt;T&gt; getNode(int index) { LinkedList&lt;T&gt; node = queue.getHead(); for (int i = 0; i &lt; index; i++) { node = node.getNext(); } return node; } public void shuffle() { for(LinkedList&lt;T&gt; node1 = queue.getHead(); node1 != null; node1 = node1.getNext()) { Random random = new Random(); int index = random.nextInt(count); LinkedList&lt;T&gt; node2 = getNode(index); T temp = node1.getData(); node1.setData(node2.getData()); node2.setData(temp); // Swap them } } } . Challenge 1 . Add and Delete elements from Queue. Working with the code that is given, you will need to adjust Add and write Delete, to output from the Queue as follows . import java.util.*; public class QueueChangeTester { public static void main(String[] args) { // Create an array of strings representing FRQs Object[] Levels = new String[] { &quot;underground&quot;, &quot;forest floor&quot;, &quot;understory&quot;, &quot;canopy&quot;, &quot;emergent&quot;, &quot;sky&quot;, &quot;space&quot;}; // Create a new QueueManagerChanged object called qFRQs QueueManagerChanged qLevels = new QueueManagerChanged(&quot;Levels&quot;); // Iterate over the FRQs array and add each element to the qFRQs queue for (Object i : Levels) { qLevels.add(i); qLevels.printQueue(); // Print the current state of the queue } // Iterate over the FRQs array again and delete each element from the qFRQs queue for (Object i : Levels) { qLevels.delete(); qLevels.printQueue(); // Print the current state of the queue } } } QueueChangeTester.main(null); . Enqueued: underground Levels count: 1, data: underground Enqueued: forest floor Levels count: 2, data: underground forest floor Enqueued: understory Levels count: 3, data: underground forest floor understory Enqueued: canopy Levels count: 4, data: underground forest floor understory canopy Enqueued: emergent Levels count: 5, data: underground forest floor understory canopy emergent Enqueued: sky Levels count: 6, data: underground forest floor understory canopy emergent sky Enqueued: space Levels count: 7, data: underground forest floor understory canopy emergent sky space Dequeued: underground Levels count: 6, data: forest floor understory canopy emergent sky space Dequeued: forest floor Levels count: 5, data: understory canopy emergent sky space Dequeued: understory Levels count: 4, data: canopy emergent sky space Dequeued: canopy Levels count: 3, data: emergent sky space Dequeued: emergent Levels count: 2, data: sky space Dequeued: sky Levels count: 1, data: space Dequeued: space Levels count: 0, data: . Challenge 2 . Perform a merge or combination of 2 Queue&#39;s that are ordered. This is a foundation step for the algorithm used in Merge sorting. . class QueueCombine { public static void main(String[] args) { // Create three arrays of integers and three queue objects to hold them Object[] ints1 = new Integer[] { 1, 3, 5, 7}; QueueManagerChanged q1 = new QueueManagerChanged(&quot;Queue1&quot;); Object[] ints2 = new Integer[] { 2, 4, 6, 8}; QueueManagerChanged q2 = new QueueManagerChanged(&quot;Queue2&quot;); Object[] ints3 = new Integer[] { }; QueueManagerChanged q3 = new QueueManagerChanged(&quot;Queue3&quot;); // Add the integers in ints1 to q1 for (Object o : ints1) { q1.add(o); } // Add the integers in ints2 to q2 for (Object o : ints2) { q2.add(o); } // Print the initial state of q1 and q2 System.out.print(&quot;Initial Queue First: &quot;); q1.printIntQueue(); System.out.print(&quot;Initial Queue Second: &quot;); q2.printIntQueue(); // Combine q1 and q2 into q3 while (q1.getCount() != 0 || q2.getCount() != 0) { // If both q1 and q2 have elements, compare the first elements and add the smaller one to q3 if (q1.getCount() != 0 &amp;&amp; q2.getCount() != 0) { int i1 = (Integer) q1.peek(); int i2 = (Integer) q2.peek(); if (i1 &lt;= i2) { q3.add(q1.delete()); } else { q3.add(q2.delete()); } } // If only q1 has elements, add the first element to q3 else if (q1.getCount() != 0) { q3.add(q1.delete()); } // If only q2 has elements, add the first element to q3 else if (q2.getCount() !=0) { q3.add(q2.delete()); } else { // Do nothing } } // Print the final state of q3 System.out.print(&quot;Final Queue Third: &quot;); q3.printIntQueue(); } } QueueCombine.main(null); . Initial Queue First: 1 3 5 7 Initial Queue Second: 2 4 6 8 Final Queue Third: 1 2 3 4 5 6 7 8 . Challenge 3 . Shuffle the Queue. Iterate through the Queue and change data with another random position in the queue. . public class QueueShuffle { public static void main(String[] args) { // Create an array of integers Object[] integers = new Integer[] { 1, 2, 3, 4, 5}; // Create a new queue and add the integers to it QueueManagerChanged qIntegers = new QueueManagerChanged(&quot;Numbers&quot;); for (Object i : integers) { qIntegers.add(i); } // Print the original queue System.out.print(&quot;Original Queue:&quot;); qIntegers.printIntQueue(); // Shuffle the queue qIntegers.shuffle(); // Print the shuffled queue System.out.print(&quot;Queue After Shuffling:&quot;); qIntegers.printIntQueue(); } } // Call the main method of the QueueShuffle class QueueShuffle.main(null); . Original Queue:1 2 3 4 5 Queue After Shuffling:4 3 5 2 1 . Challenge 4 . Build a Stack and use it to reverse the order of a Queue. The Queue is a LIFO Data Structure, the Stack is a FIFO data structure, so code is similar but most everything is reversed. . import java.util.*; public class ReverseQueue { public static void main(String[] args) { Object[] integers = new Integer[] { 1, 2, 3, 4, 5}; QueueManagerChanged qIntegers = new QueueManagerChanged(&quot;Numbers&quot;); for (Object o : integers) { qIntegers.add(o); } Stack&lt;Object&gt; stack = new Stack&lt;&gt;(); System.out.println(&quot;Stack Initial: &quot; + stack); System.out.print(&quot;Queue Initial: &quot;); qIntegers.printIntQueue(); // Push all elements from queue to stack while (qIntegers.getCount() != 0) { stack.push(qIntegers.delete()); } System.out.println(&quot;Stack Full: &quot; + stack); System.out.print(&quot;Queue when Stacked: &quot;); qIntegers.printIntQueue(); // Pop all elements from stack and add back to queue while (stack.size() != 0) { qIntegers.add(stack.pop()); } // Print the reversed queue System.out.println(&quot;Stack Final: &quot; + stack); System.out.print(&quot;Queue Final: &quot;); qIntegers.printIntQueue(); } } ReverseQueue.main(null); . Stack Initial: [] Queue Initial: 1 2 3 4 5 Stack Full: [1, 2, 3, 4, 5] Queue when Stacked: Stack Final: [] Queue Final: 5 4 3 2 1 .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2023/03/27/Queues2.html",
            "relUrl": "/java/jupyter/2023/03/27/Queues2.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Queues Hacks",
            "content": "Linked List Code . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . Queue Base Code . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } /** * Returns if queue is empty * * @return boolean if it is empty */ public boolean isEmpty() { return this.head == null; } public String toString() { int count = 0; String str = &quot;&quot;; for (T e : this) { str += e + &quot; &quot;; count++; } return &quot;Words count: &quot; + count + &quot;, data: &quot; + str; } } . Challenge 1 . Add and Delete elements from Queue. Working with the code that is given, you will need to adjust Add and write Delete, to output from the Queue as follows . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of Levels String[] levels = new String[] { &quot;underground&quot;, &quot;forest floor&quot;, &quot;understory&quot;, &quot;canopy&quot;, &quot;emergent&quot;, &quot;sky&quot;, &quot;space&quot;}; Queue&lt;String&gt; q = new Queue&lt;&gt;(); for (String w : levels) { q.add(w); System.out.println(&quot;Enqueued Data: &quot; + w); System.out.println(q); } while (!q.isEmpty()) { String val = q.delete(); System.out.println(&quot;Dequeued Data: &quot; + val); System.out.println(q); } } } QueueTester.main(null); . Enqueued Data: underground Words count: 1, data: underground Enqueued Data: forest floor Words count: 2, data: underground forest floor Enqueued Data: understory Words count: 3, data: underground forest floor understory Enqueued Data: canopy Words count: 4, data: underground forest floor understory canopy Enqueued Data: emergent Words count: 5, data: underground forest floor understory canopy emergent Enqueued Data: sky Words count: 6, data: underground forest floor understory canopy emergent sky Enqueued Data: space Words count: 7, data: underground forest floor understory canopy emergent sky space Dequeued Data: underground Words count: 6, data: forest floor understory canopy emergent sky space Dequeued Data: forest floor Words count: 5, data: understory canopy emergent sky space Dequeued Data: understory Words count: 4, data: canopy emergent sky space Dequeued Data: canopy Words count: 3, data: emergent sky space Dequeued Data: emergent Words count: 2, data: sky space Dequeued Data: sky Words count: 1, data: space Dequeued Data: space Words count: 0, data: . Challenge 2 . Perform a merge or combination of 2 Queue&#39;s that are ordered. This is a foundation step for the algorithm used in Merge sorting. . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester2 { public static void main(String[] args) { // Create first queue int[] firstData = {1, 4, 5, 8}; Queue&lt;Integer&gt; firstQ = new Queue&lt;&gt;(); for (int i : firstData) { firstQ.add(i); } // Create second queue int[] secondData = {2, 3, 6, 7}; Queue&lt;Integer&gt; secondQ = new Queue&lt;&gt;(); for (int i : secondData) { secondQ.add(i); } System.out.println(&quot;First Queue&quot;); System.out.println(firstQ); System.out.println(&quot;Second Queue&quot;); System.out.println(secondQ); // Merge the queues Queue&lt;Integer&gt; mergedQ = new Queue&lt;&gt;(); while (!firstQ.isEmpty() || !secondQ.isEmpty()) { if (firstQ.isEmpty()) { mergedQ.add(secondQ.delete()); } else if (secondQ.isEmpty()) { mergedQ.add(firstQ.delete()); } else if (firstQ.peek() &lt; secondQ.peek()) { mergedQ.add(firstQ.delete()); } else { mergedQ.add(secondQ.delete()); } } System.out.println(&quot;Merged Queue&quot;); System.out.println(mergedQ); } } QueueTester2.main(null); . First Queue Words count: 4, data: 1 4 5 8 Second Queue Words count: 4, data: 2 3 6 7 Merged Queue Words count: 8, data: 1 2 3 4 5 6 7 8 . Challenge 3 . Shuffle the Queue. Iterate through the Queue and change data with another random position in the queue. . class QueueShuffler&lt;T&gt; { public void shuffle(Queue&lt;T&gt; q) { List&lt;T&gt; dequeuedQueue = new ArrayList&lt;&gt;(); while (!q.isEmpty()) { dequeuedQueue.add(q.delete()); } while (!dequeuedQueue.isEmpty()) { int rand = (int) (Math.random() * dequeuedQueue.size()); q.add(dequeuedQueue.get(rand)); dequeuedQueue.remove(rand); } } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester3 { public static void main(String[] args) { // Create first queue int[] firstData = {1, 2,3,4,5,6,7,8}; Queue&lt;Integer&gt; firstQ = new Queue&lt;&gt;(); for (int i : firstData) { firstQ.add(i); } System.out.println(firstQ); QueueShuffler&lt;Integer&gt; shuffler = new QueueShuffler&lt;&gt;(); shuffler.shuffle(firstQ); System.out.println(firstQ); } } QueueTester3.main(null); . Words count: 8, data: 1 2 3 4 5 6 7 8 Words count: 8, data: 1 4 8 7 3 6 2 5 . Challenge 4 . Build a Stack and use it to reverse the order of a Queue. The Queue is a LIFO Data Structure, the Stack is a FIFO data structure, so code is similar but most everything is reversed. . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class StackIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public StackIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Stack&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; head = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = head; else { // nodes in queue head.setNextNode(this.head); this.head = head; // update head } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } /** * Returns if queue is empty * * @return boolean if it is empty */ public boolean isEmpty() { return this.head == null; } public String toString() { int count = 0; String str = &quot;&quot;; for (T e : this) { str += e + &quot; &quot;; count++; } return &quot;Words count: &quot; + count + &quot;, data: &quot; + str; } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class StackTester { public static void main(String[] args) { int[] data = {1, 2, 3}; Queue&lt;Integer&gt; q = new Queue&lt;&gt;(); for (int i : data) { q.add(i); } System.out.println(&quot;Queue&quot;); System.out.println(q); // use stack Stack&lt;Integer&gt; s = new Stack&lt;&gt;(); while (!q.isEmpty()) { s.add(q.delete()); } System.out.println(&quot;Stack&quot;); System.out.println(s); } } StackTester.main(null); . Queue Words count: 3, data: 1 2 3 Stack Words count: 3, data: 3 2 1 .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2023/03/27/Queues.html",
            "relUrl": "/java/jupyter/2023/03/27/Queues.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Data Structures Hacks",
            "content": "Notes and Definitions . Classes (in object oriengted programming) . a blueprint/template for creating objects, defines the properties and methods that objects of the class can ahve | objects will share common properties and behaviors | . Access Modifiers . keywords that determine accessibility of class, inclduing its members and methods | 4 types of access modifiers in Java : public, protected, private, and package-private (default) Public: A public class or member is accessible from any other class in any package | Protected: A protected class or member is accessible within its own package or by a subclass in a different package | Private: A private class or member is accessible only within the same class | Package-Private: A package-private class or member is accessible only within its own package | . | . Constructors . speacial method that is called when an object of the class is created | initiliazes object&#39;s properties / sets up its encironemt | has the same name as the class and does not ahve a return type | paramters are optional | . Modifiers/Setters . methods used to modify/set value of object&#39;s property | usually used to ensure data integrity and encapsulation | can be public, private, protected, or package-private | any return type | . Getters . methods used to get value of object&#39;s property | used to access private or protected properties | should be public and have return type that matches the type of the proeprty taht are retrieving Getters are methods used to retrieve the value of an object&#39;s properties. They are used to access private or protected properties of an object. Getters should be public and have a return type that matches the type of the property they are getting. | . Example of a class that incorporates access modifiers, constructors, modifiers/setters, and getters: . public class Cat { private String name; private int age; public Cat(String name, int age) { this.name = name; this.age = age; } public void setName(String name) { this.name = name; } public void setAge(int age) { this.age = age; } public String getName() { return name; } public int getAge() { return age; } } . In this example, the class is called &quot;Cat&quot;. It has two private properties, name and age. There is one constructor that takes the two paramerters, name and age. There are two modifier methods, setName and setAge. Two getter methods, getName and getAge. . Linked List, Queues, and Stacks - Examples . public class Node&lt;T&gt; { private T value; private Node&lt;T&gt; next; public Node(T value) { this.value = value; this.next = null; } public T getValue() { return this.value; } public Node&lt;T&gt; getNext() { return this.next; } public void setNext(Node&lt;T&gt; next) { this.next = next; } } . public class LinkedList&lt;T&gt; { private Node&lt;T&gt; head; public LinkedList() { this.head = null; } public void add(T value) { Node&lt;T&gt; newNode = new Node&lt;&gt;(value); if (head == null) { head = newNode; } else { Node&lt;T&gt; current = head; while (current.getNext() != null) { current = current.getNext(); } current.setNext(newNode); } } public void remove(T value) { if (head == null) { return; } if (head.getValue().equals(value)) { head = head.getNext(); return; } Node&lt;T&gt; current = head; while (current.getNext() != null) { if (current.getNext().getValue().equals(value)) { current.setNext(current.getNext().getNext()); return; } current = current.getNext(); } } public void print() { Node&lt;T&gt; current = head; while (current != null) { System.out.print(current.getValue() + &quot; &quot;); current = current.getNext(); } System.out.println(); } } . public class Queue&lt;T&gt; { private LinkedList&lt;T&gt; list; public Queue() { this.list = new LinkedList&lt;&gt;(); } public void enqueue(T value) { list.add(value); } public T dequeue() { if (isEmpty()) { throw new IllegalStateException(&quot;Queue is empty&quot;); } T value = list.getValue(); list.remove(value); return value; } public boolean isEmpty() { return list == null || list.getValue() == null; } } . PBL Examples . /* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Alphabet extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Alphabet.key = key;} public enum KeyType implements KeyTypes {title, letter} private static final int size = 26; // constant used in data initialization // Instance data private final char letter; /* * single letter object */ public Alphabet(char letter) { this.setType(&quot;Alphabet&quot;); this.letter = letter; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Alphabet.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.letter.equals(this.getKey())) { output += this.letter; } else { output += super.getType() + &quot;: &quot; + this.letter; } return output; } // Test data initializer for upper case Alphabet public static Alphabet[] alphabetData() { Alphabet[] alphabet = new Alphabet[Alphabet.size]; for (int i = 0; i &lt; Alphabet.size; i++) { alphabet[i] = new Alphabet( (char)(&#39;A&#39; + i) ); } return alphabet; } /* * main to test Animal class */ public static void main(String[] args) { // Inheritance Hierarchy Alphabet[] objs = alphabetData(); // print with title Alphabet.setOrder(KeyType.title); Alphabet.print(objs); // print letter only Alphabet.setOrder(KeyType.letter); Alphabet.print(objs); } } Alphabet.main(null); . class [LREPL.$JShell$17$Alphabet; 26 Generic: Alphabet listed by title Alphabet: A Alphabet: B Alphabet: C Alphabet: D Alphabet: E Alphabet: F Alphabet: G Alphabet: H Alphabet: I Alphabet: J Alphabet: K Alphabet: L Alphabet: M Alphabet: N Alphabet: O Alphabet: P Alphabet: Q Alphabet: R Alphabet: S Alphabet: T Alphabet: U Alphabet: V Alphabet: W Alphabet: X Alphabet: Y Alphabet: Z class [LREPL.$JShell$17$Alphabet; 26 Generic: Alphabet listed by letter A B C D E F G H I J K L M N O P Q R S T U V W X Y Z . public class Cupcake extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Cupcake.key = key;} public enum KeyType implements KeyTypes {title, flavor, frosting, sprinkles} // Instance data private final String frosting; private final int sprinkles; private final String flavor; // Constructor Cupcake(String frosting, int sprinkles, String flavor) { this.setType(&quot;Cupcake&quot;); this.frosting = frosting; this.sprinkles = sprinkles; this.flavor = flavor; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Cupcake.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.flavor.equals(this.getKey())) { output += this.flavor; } else if (KeyType.frosting.equals(this.getKey())) { output += this.frosting; } else if (KeyType.sprinkles.equals(this.getKey())) { output += &quot;00&quot; + this.sprinkles; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.flavor + &quot;, &quot; + this.frosting + &quot;, &quot; + this.sprinkles; } return output; } // Test data initializer public static Cupcake[] cupcakes() { return new Cupcake[]{ new Cupcake(&quot;Red&quot;, 4, &quot;Red Velvet&quot;), new Cupcake(&quot;Orange&quot;, 5, &quot;Orange&quot;), new Cupcake(&quot;Yellow&quot;, 6, &quot;Lemon&quot;), new Cupcake(&quot;Green&quot;, 7, &quot;Apple&quot;), new Cupcake(&quot;Blue&quot;, 8, &quot;Blueberry&quot;), new Cupcake(&quot;Purple&quot;, 9, &quot;Blackberry&quot;), new Cupcake(&quot;Pink&quot;, 10, &quot;Strawberry&quot;), new Cupcake(&quot;Tan&quot;, 11, &quot;Vanilla&quot;), new Cupcake(&quot;Brown&quot;, 12, &quot;Chocolate&quot;), }; } public static void main(String[] args) { // Inheritance Hierarchy Cupcake[] objs = cupcakes(); // print with title Cupcake.setOrder(KeyType.title); Cupcake.print(objs); // print flavor only Cupcake.setOrder(KeyType.flavor); Cupcake.print(objs); } } Cupcake.main(null); . class [LREPL.$JShell$19$Cupcake; 9 Generic: Cupcake listed by title Cupcake: Red Velvet, Red, 4 Cupcake: Orange, Orange, 5 Cupcake: Lemon, Yellow, 6 Cupcake: Apple, Green, 7 Cupcake: Blueberry, Blue, 8 Cupcake: Blackberry, Purple, 9 Cupcake: Strawberry, Pink, 10 Cupcake: Vanilla, Tan, 11 Cupcake: Chocolate, Brown, 12 class [LREPL.$JShell$19$Cupcake; 9 Generic: Cupcake listed by flavor Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate . public class Pets extends Generics { // Class data public static KeyTypes key = KeyType.name; // static initializer public static void setOrder(KeyTypes key) { Pets.key = key; } public enum KeyType implements KeyTypes { name, age, animal } // Instance data private final String name; private final int age; private final String animal; // Constructor public Pets(String name, int age, String animal) { this.setType(&quot;Pets&quot;); this.name = name; this.age = age; this.animal = animal; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Pets.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output = &quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;Age: &quot; + this.age; } else if (KeyType.animal.equals(this.getKey())) { output += &quot;Animal: &quot; + this.animal; } else { output = super.getType() + &quot;: &quot; + this.name + &quot;, Age: &quot; + this.age + &quot;, Animal: &quot; + this.animal; } return output; } // Test data initializer public static Pets[] pets() { return new Pets[]{ new Pets(&quot;Spot&quot;, 1, &quot;Ladybug&quot;), new Pets(&quot;Luca&quot;, 2, &quot;Cat&quot;), new Pets(&quot;Apollo&quot;, 3, &quot;Dog&quot;), new Pets(&quot;Binger&quot;, 4, &quot;Cat&quot;), new Pets(&quot;Mart&quot;, 5, &quot;Rat&quot;), new Pets(&quot;Kevin&quot;, 6, &quot;Parrot&quot;), new Pets(&quot;Bartholomew&quot;, 7, &quot;Hamster&quot;), new Pets(&quot;Slugzie&quot;, 8, &quot;Slug&quot;), new Pets(&quot;Fattie&quot;, 9, &quot;Dog&quot;), new Pets(&quot;Squish&quot;, 10, &quot;Squid&quot;), }; } public static void main(String[] args) { // Inheritance Hierarchy Pets[] objs = pets(); // print with title Pets.setOrder(KeyType.name); Generics.print(objs); // print difficulty only Pets.setOrder(KeyType.age); Generics.print(objs); // print question only Pets.setOrder(KeyType.animal); Generics.print(objs); } } Pets.main(null); . class [LREPL.$JShell$21D$Pets; 10 Generic: Pets listed by name Spot Luca Apollo Binger Mart Kevin Bartholomew Slugzie Fattie Squish class [LREPL.$JShell$21D$Pets; 10 Generic: Pets listed by age Age: 1 Age: 2 Age: 3 Age: 4 Age: 5 Age: 6 Age: 7 Age: 8 Age: 9 Age: 10 class [LREPL.$JShell$21D$Pets; 10 Generic: Pets listed by animal Animal: Ladybug Animal: Cat Animal: Dog Animal: Cat Animal: Rat Animal: Parrot Animal: Hamster Animal: Slug Animal: Dog Animal: Squid .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2023/03/20/DataStructures.html",
            "relUrl": "/java/jupyter/2023/03/20/DataStructures.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "CB MCQ",
            "content": ". Corrections . #17 (D) : The for loop starts at 1 and increments by 2 for each iteration until it is greater than num. The values of loop that are being added together are 1, 3, 5, …, num. When loop has the value num + 2, the loop stops preventing num + 2 from being included in the sum, since it is not less than or equal to num. . | #25 (C) : The outer loop iterates four times (for x = 0, 1, 2, 3). When x is assigned 4, the loop terminates. The inner loop will iterate from the value of x to 4, not including 4. In the first iteration of the outer loop, the inner loop iterates four times (for y = 0, 1, 2, 3) and count will increase by 1 each time and will equal to 4. In the second iteration of the outer loop, the inner loop iterates three times (for y = 1, 2, 3) and count will now be 7. In the third iteration of the outer loop, the inner loop iterates two times (for y = 2, 3) and count will now be 9. In the fourth and final iteration of the outer loop, the inner loop will iterate one time (for y = 3) and count will be 10. . | #33 (E) : Choice I sets max to Integer.MIN_VALUE, which is the smallest possible integer value. Then it accesses each element in arr and assigns them value. If value is greater than max, max is assigned value since it is now the largest value so far. Choice II uses an if statement inside the for loop to check and see if value is the first element in arr or not. Once the first element is identified, max is initialized to the first element and first is set to false. For all subsequent elements in arr, if value is greater than max, max is assigned value since it is now the largest value so far. Choice III sets max to the first value in arr. Then it accesses each subsequent value in arr checking to see if the value is greater than max, if it is max is assigned this element since it is now the largest value so far. . | #35 (C) : In the first iteration of the binary search, it will check the value at index (0 + 7) / 2 which is index 3. Since 8 is greater than data[3], start is assigned mid + 1 which is 4 and the process will repeat. In the second iteration of the while loop, it will check the value at index (4 + 7) / 2 which is index 5. Since data[5] is 8, 5 is returned. . | #36 (D) : The first iteration would check the middle element of 2000 and eliminate approximately 1000 elements. The second iteration would check the middle element of 1000 and eliminate approximately 500 elements. The third would eliminate approximately 250 elements. The fourth would eliminate approximately 125 elements. The fifth would eliminate approximately 62 elements. The sixth would eliminate approximately 31 elements. The seventh would eliminate approximately 15 elements. The eighth would eliminate approximately 7 elements. The nineth would eliminate approximately 3 elements. The tenth would eliminate approximately 1 element. The eleventh iteration would be the final iteration to determine if the element was found or not. . | #37 (E) : Choice I iterates from startIndex to the end of the array words as expected, but when it adds elements to result it adds the current word followed by a second word starting at the end of the array words. This will result in duplicate words being added to result. Choice II starts at the end of the array words and adds each word to result working right to left until it reaches the startIndex. By starting at the end of the array, the elements are concatenated in reverse order. Choice III starts by adding the elements of words to temp in reverse order. The second loop starts at the beginning of temp (which was the end of words) and adds each subsequent element to result until it reaches the element that was at startIndex and is now at temp.length – startIndex resulting in result containing the required elements in reverse order. . | #38 (C) : This recursive method starts at the end of the array numbers by setting numVals to numbers.length and checks to see if this element is the same as v, which is equal to the actual parameter val. If it is, it sets k to 1. The method recursively calls mystery, decrementing numVals by 1 each time. Once, numVals is equal to 1 the method checks to see if element 0 is equal to v and then the recursion is complete and k is returned. In each iteration, k will either be 1 or 0, based on whether the element is equal to v or not. The sum of all the values of k will be the return value of the original call to mystery. . | .",
            "url": "https://tangalice.github.io/alicetang/2023/03/12/MCQ4.html",
            "relUrl": "/2023/03/12/MCQ4.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Data Types Hacks",
            "content": "Binary Addition Seed EC . import java.util.Scanner; public class BinaryAddition { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); System.out.println(&quot;Enter the first number&quot;); String num1 = myObj.nextLine(); int number1 = Integer.parseInt(num1); System.out.println(num1); System.out.println(&quot;Enter the second number&quot;); String num2 = myObj.nextLine(); int number2 = Integer.parseInt(num2); System.out.println(num2); //int number1 = 0b1; // binary number 1 0b means that it is a binary number //int number2 = 0b1; // binary number 2 int sum = number1 + number2; // add the binary numbers // convert the sum to a binary string String binarySum = Integer.toBinaryString(sum); System.out.println(&quot;Binary addition of &quot; + number1 + &quot; and &quot; + number2 + &quot; is &quot; + binarySum); } } BinaryAddition.main(null) . Enter the first number 1 Enter the second number 1 Binary addition of 1 and 1 is 10 . Code Exercises . import java.lang.Math; import java.util.ArrayList; // int System.out.println(&quot;INT&quot;); int int1 = 4; int int2 = 5; int sum = int1 + int2; System.out.println(&quot;int 1 = &quot; + int1); System.out.println(&quot;int 2 = &quot; + int2); System.out.println(&quot;int 1 + int 2 = &quot; + sum); // double System.out.println(); System.out.println(&quot;DOUBLE&quot;); double a = 12.2; double b = 2.0; double multiply = a*b; System.out.println(&quot;double 1 = &quot; + a); System.out.println(&quot;double 2 = &quot; + b); System.out.println(&quot;double 1 * double 2 = &quot; + multiply); // boolean System.out.println(); System.out.println(&quot;BOOLEAN&quot;); boolean red = true; if(red){ System.out.println(&quot;The color is red. isRed: &quot; + red); } else{ System.out.println(&quot;The color is not red. isRed: &quot; + !red); } // char System.out.println(); System.out.println(&quot;CHAR&quot;); char char1, char2, char3; char1 = &#39;Z&#39;; char2 = &#39;*&#39;; char3 = &#39;6&#39;; System.out.println(&quot;char1 = Z, char2 = *, char3 = 6&quot;); System.out.println(&quot;chars: &quot; + char1 + char2 + char3); // Wrapper Classes System.out.println(&quot;--&quot;); System.out.println(&quot;WRAPPER CLASSES&quot;); // Integer System.out.println(&quot;Integer: &quot; + new Integer(sum).toString()); // Double System.out.println(&quot;Double: &quot; + new Double(multiply).toString()); // Boolean System.out.println(&quot;Boolean: &quot; + new Boolean(red).toString()); // Character System.out.println(&quot;Character: &quot; + new Character(char1).toString() + new Character(char2).toString() + new Character(char3).toString()); . INT int 1 = 4 int 2 = 5 int 1 + int 2 = 9 DOUBLE double 1 = 12.2 double 2 = 2.0 double 1 * double 2 = 24.4 BOOLEAN The color is red. isRed: true CHAR char1 = Z, char2 = *, char3 = 6 chars: Z*6 -- WRAPPER CLASSES Integer: 9 Double: 24.4 Boolean: true Character: Z*6 . Methods and Control Structures . Methods . block of code that performs the specfic actions mentioned inside when it is called | can include paramters or values into methods | designed to be reusable and can be called in different places | . Control Structures . the &quot;building blocks&quot; of computer programs, control their flow | decides if a program takes one path or another, decisions based on conditions | program flow is not limited to being linear (can bifurcate, repeat code, or bypass sections) | . Teacher Code Exploration . Diverse Array . matrix contains methods and control structures | multiple methjods and control structures for and while loops | if statements | . | data types: int and arrays | . // DiverseArray learnings /* All Array and 2D array questions will have similar patterns 1. 1D array int[] arr = { 1, 2, 3, 4, 5 } 2. 2D array int[][] arr2D = { { 1, 2, 3, 4, 5 }, { 2, 3, 4, 5, 6 } } 3. Arrays dimensions are not mutable, but can be established with variable sizes using &quot;new&quot; int[] arr = new int[rows] int[][] arr2D = new int[rows][cols] 4. All iterations can use enhanced or conventional for loops, these apply to both 1D and 2D for (int num : arr) { ... } // enhanced, used when index is not required for (int i = 0; i &lt; arr.length; i++) { ... } // conventional, using arr.length to restrict i 5. Same array comparisons (two indexes), bubble sort like adjacent comparison for(int i = 0; i &lt; sumsLength - 1; i++) { // observe minus for (int j = i + 1; j &lt; sumsLength; j++) { // observe j = i + 1, to offset comparisons */ public class DiverseArray { public static int arraySum(int[] arr) { int sum = 0; // sum initializer // enhanced for loop as values are needed, not index for (int num : arr) { sum += num; System.out.print(num + &quot; t&quot;); // debug } return sum; } public static int[] rowSums(int[][] arr2D) { int rows = arr2D.length; // remember arrays have length int[] sumList = new int[rows]; // size of sumList is based on rows // conventional for loop as index used for sumList for (int i = 0; i &lt; rows; i++) { sumList[i] = arraySum(arr2D[i]); System.out.println(&quot;= t&quot; + sumList[i]); // debug } return sumList; } public static boolean isDiverse(int[][] arr2D) { int [] sums = rowSums(arr2D); int sumsLength = sums.length; // ij loop, two indexes needed in evaluation, similar to bubble sort iteration for(int i = 0; i &lt; sumsLength - 1; i++) { for (int j = i + 1; j &lt; sumsLength; j++) { if (sums[i] == sums[j]) { return false; // leave as soon as you find duplicate } } } return true; // all diverse checks have been made } public static void main(String[] args) { int[][] mat1 = { { 1, 3, 2, 7, 3 }, // row 1 { 10, 10, 4, 6, 2 }, // row 2 { 5, 3, 5, 9, 6 }, // row 3 { 7, 6, 4, 2, 1 } // row 4 }; int[][] mat2 = { { 1, 1, 5, 3, 4 }, // row 1 { 12, 7, 6, 1, 9 }, // row 2 { 8, 11, 10, 2, 5 }, // row 3 { 3, 2, 3, 0, 6 } // row 4 }; System.out.println(&quot;Mat1 Diverse: &quot; + isDiverse(mat1)); System.out.println(); System.out.println(&quot;Mat2 Diverse: &quot; + isDiverse(mat2)); } } . Random . Math.random | designed to create a number between 0 and 1 | to get a numer in a different range, multiple the random number by another number | . Do Nothing By Value . does not change the values locally. the variable does not actually change because you are only chaning the subvalue | changing a varibale happens at the large scale | . Int By Reference . int changes value even though it is local | there is a trick to get around the fact that you can&#39;t edit variables locally | . public class IntByReference { private int value; public IntByReference(Integer value) { this.value = value; } public String toString() { return (String.format(&quot;%d&quot;, this.value)); } public void swapToLowHighOrder(IntByReference i) { if (this.value &gt; i.value) { int tmp = this.value; this.value = i.value; i.value = tmp; } } public static void swapper(int n0, int n1) { IntByReference a = new IntByReference(n0); IntByReference b = new IntByReference(n1); System.out.println(&quot;Before: &quot; + a + &quot; &quot; + b); a.swapToLowHighOrder(b); // conditionally build swap method to change values of a, b System.out.println(&quot;After: &quot; + a + &quot; &quot; + b); System.out.println(); } public static void main(String[] ags) { IntByReference.swapper(21, 16); IntByReference.swapper(16, 21); IntByReference.swapper(16, -1); } } . Menu . use try, catch, runnable to control program execution | . import java.util.HashMap; import java.util.Map; import java.util.Scanner; /** * Menu: custom implementation * @author John Mortensen * * Uses String to contain Title for an Option * Uses Runnable to store Class-Method to be run when Title is selected */ // The Menu Class has a HashMap of Menu Rows public class Menu { // Format // Key {0, 1, 2, ...} created based on order of input menu // Value {MenuRow0, MenuRow1, MenuRow2,...} each corresponds to key // MenuRow {&lt;Exit,Noop&gt;, Option1, Option2, ...} Map&lt;Integer, MenuRow&gt; menu = new HashMap&lt;&gt;(); /** * Constructor for Menu, * * @param rows, is the row data for menu. */ public Menu(MenuRow[] rows) { int i = 0; for (MenuRow row : rows) { // Build HashMap for lookup convenience menu.put(i++, new MenuRow(row.getTitle(), row.getAction())); } } /** * Get Row from Menu, * * @param i, HashMap key (k) * * @return MenuRow, the selected menu */ public MenuRow get(int i) { return menu.get(i); } /** * Iterate through and print rows in HashMap */ public void print() { for (Map.Entry&lt;Integer, MenuRow&gt; pair : menu.entrySet()) { System.out.println(pair.getKey() + &quot; ==&gt; &quot; + pair.getValue().getTitle()); } } /** * To test run Driver */ public static void main(String[] args) { Driver.main(args); } } // The MenuRow Class has title and action for individual line item in menu class MenuRow { String title; // menu item title Runnable action; // menu item action, using Runnable /** * Constructor for MenuRow, * * @param title, is the description of the menu item * @param action, is the run-able action for the menu item */ public MenuRow(String title, Runnable action) { this.title = title; this.action = action; } /** * Getters */ public String getTitle() { return this.title; } public Runnable getAction() { return this.action; } /** * Runs the action using Runnable (.run) */ public void run() { action.run(); } } // The Main Class illustrates initializing and using Menu with Runnable action class Driver { /** * Menu Control Example */ public static void main(String[] args) { // Row initialize MenuRow[] rows = new MenuRow[]{ // lambda style, () -&gt; to point to Class.Method new MenuRow(&quot;Exit&quot;, () -&gt; main(null)), new MenuRow(&quot;Swap if Hi-Low&quot;, () -&gt; IntByReference.main(null)), new MenuRow(&quot;Matrix Reverse&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Diverse Array&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Random Squirrels&quot;, () -&gt; Number.main(null)) }; // Menu construction Menu menu = new Menu(rows); // Run menu forever, exit condition contained in loop while (true) { System.out.println(&quot;Hacks Menu:&quot;); // print rows menu.print(); // Scan for input try { Scanner scan = new Scanner(System.in); int selection = scan.nextInt(); // menu action try { MenuRow row = menu.get(selection); // stop menu if (row.getTitle().equals(&quot;Exit&quot;)) { if (scan != null) scan.close(); // scanner resource requires release return; } // run option row.run(); } catch (Exception e) { System.out.printf(&quot;Invalid selection %d n&quot;, selection); } } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } } } } . 2021 FRQ: Methods and Control Structures . public class WordMatch { private String secret; // declaring variable secret public WordMatch (String secret) { // constructs WordMatch object with secret string this.secret = secret; } public void setSecret(String secret) { // sets the secret value this.secret = secret; } public int scoreGuess(String guess) { // testing use of control structures which in this case is a for loop // make sure that the condition inside the for loop is possible to be executed and has the right condition to make the code function properly int count = 0; for (int i = 0; i &lt; secret.length(); i++) { // looping over the whole secret not guess if (secret.substring(i).indexOf(guess) == 0) { // start at 0 index and as i increases if index of guess is at the beginning of substring count++; // , then increment count by 1 } } return count * guess.length() * guess.length(); // return the score which is how many times guess appeared in secret and multiply by square of length of guess } public String findBetterGuess (String guess1, String guess2) { // this is using the method of scoreGuess above and is inputing guess1 and guess2 into scoreGuess to check which has the higher // this is methods and control structures because the frq is testing that you know when to use and how to call methods to help advance your code and make it function properly if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { // if the score of guess1 is greater than score of guess2 return guess1; // then guess 1 is the better guess } if (scoreGuess(guess1) &lt; scoreGuess(guess2)) { // if the score of guess1 is less than score of guess2 return guess2; // then guess 2 is the better guess } if (guess2.compareTo(guess1) &gt; 0) { // compare guess1 and guess2 and the alphabetically greater one is returned return guess2; } return guess1; } public static void main(String args[]) { Scanner sc = new Scanner(System.in); // System.out.println(&quot;Enter a guess: &quot;); String guess = sc.nextLine(); String secret = &quot;mississippi&quot;; WordMatch wordMatch = new WordMatch(secret); int score = wordMatch.scoreGuess(guess); System.out.println(&quot;Score for &quot; + guess + &quot; is &quot; + score); // System.out.println(&quot;Enter another guess: &quot; +); String guess1 = sc.nextLine(); // System.out.println(&quot;Enter another guess: &quot; +); String guess2 = sc.nextLine(); String compare = wordMatch.findBetterGuess(guess1, guess2); System.out.println(&quot;The better guess between &quot; + guess1 + &quot; and &quot; + guess2 + &quot; is: &quot; + compare); sc.close(); } } WordMatch.main(null) . Score for fruit is 0 The better guess is between batch and fluke is: fluke . Wordmatch object constructed with secret String. Then the value of secret is set. Scoreguess is a method that uses a loop to compare the value of guess to the value of secret. Score is incremented for every letter they have in common. In mian, scoreguess is called to get the score for both guesses. Then findBetterGuess compares the two scores and gets the guess with the better score. .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2023/03/12/DataTypesHacks.html",
            "relUrl": "/java/jupyter/2023/03/12/DataTypesHacks.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "CB MCQ",
            "content": ". Corrections . #11 (D) : The original code segment prints “YES” for odd integers and “NO” for even integers. Code segment I produces the same output as the original code segment because the result of evaluating the expression x % 2 has only two possible values: 0 if x is even and 1 if x is odd. Code segment II produces the same output as the original code segment because the second else clause that prints “NONE” is never reached. Code segment III does not produce the same output as the original code segment. It creates a local boolean variable and assigns it the result of x % 2 == 0, but when using it in the if statement, the wrong branch is taken so that “YES” is printed for even integers and “NO” is printed for odd integers. . | #20 (E) : The given code segment starts when k is 1 and prints every other value as long as k is less than or equal to 7. This code segment starts when k is 1 and prints every other value as long as k is less than or equal to 8. Both code segments print 1357. . | #26 (A) : The length of arr is 6. When k takes on the value 6 in the last iteration of the loop, referencing arr[6] causes a runtime error because the last element of the array is arr[5]. Changing the Boolean expression in the for loop header to k &lt; arr.length fixes the error by making arr[5] the last array element referenced. . | #27 (B) : One issue with the code is that when the body of the if statement executes, the loop variable j is sometimes incremented by 1 twice, once inside the body of the if statement and once at the end of the loop iteration. As a consequence, the for loop iterates through some but not all of the elements in nums. Specifically, the method does not work as intended when the input list has two consecutive pairs of duplicate integers. For the list in this option, at the beginning of the first loop iteration, the value of j is 0 and the value of nums is {1, 2, 2, 3, 3, 4, 5}. At the beginning of the second loop iteration, the value of j is 1 and the value of nums is {1, 2, 2, 3, 3, 4, 5}. At the beginning of the third loop iteration, the value of j is 3 and the value of nums is {1, 2, 3, 3, 4, 5}. At the beginning of the fourth (and last) loop iteration, the value of j is 4 and the value of nums is {1, 2, 3, 3, 4, 5}. At the end of the method, the value of nums is {1, 2, 3, 3, 4, 5} and is different than the expected value of nums, which is {1, 2, 3, 4, 5}. . | #37 (E) : In the body of the first if clause in the code segment, b1 retains the value true if num is between 0 and 100, exclusive. In the body of the else clause, b1 retains the value true if num is less than -100. The statement assigns true to b2 if num is less than -100 or between 0 and 100, exclusive. . | #38 (B!) : Choice 2 correctly creates a new point with the two paramerter Point constructor that assigns a to x and b to y. Choice 1 and 3 use the no paramater point constructor which incorrectly assigns 0 to both x and y. Choice 3 attempts to update x and y individually but they are variables in Point that cannot be accessed direclty from circle. This code will cause a compile runtime error. . | #50 (D) : The for loop iterates from i = 0 to i = 19. The expression i % num2 == 0 evaluates to true when i is divisible by 5 and the expression i % 2 == 0 evaluates to true when i is even. The only values in the range 0 to 19, inclusive, that are both divisible by 5 and even are 0 and 10, so the statement prints “0 10 “. . | #59 (B) : Choice I will return the correct value if the element in the array with one element was target. In this case, with the first call to seqSearchRecHelper the value of data[0] would be target and 0 would be returned. Choice II will eventually cause an ArrayIndexOutOfBoundsException to be thrown when the recursive call is made with target and -1. This will happen after every valid index in data has been examined. During this call, data[-1] is out of bounds. Choice III will correctly return the index of the element closest to the end of the array with the value target, since data[last] == target will be true at some valid index value of last. . | .",
            "url": "https://tangalice.github.io/alicetang/2023/01/31/MCQ3.html",
            "relUrl": "/2023/01/31/MCQ3.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "CB MCQ",
            "content": ". Corrections . #11 (D) : The original code segment prints “YES” for odd integers and “NO” for even integers. Code segment I produces the same output as the original code segment because the result of evaluating the expression x % 2 has only two possible values: 0 if x is even and 1 if x is odd. Code segment II produces the same output as the original code segment because the second else clause that prints “NONE” is never reached. Code segment III does not produce the same output as the original code segment. It creates a local boolean variable and assigns it the result of x % 2 == 0, but when using it in the if statement, the wrong branch is taken so that “YES” is printed for even integers and “NO” is printed for odd integers. . | #20 (E) : The given code segment starts when k is 1 and prints every other value as long as k is less than or equal to 7. This code segment starts when k is 1 and prints every other value as long as k is less than or equal to 8. Both code segments print 1357. . | #26 (A) : The length of arr is 6. When k takes on the value 6 in the last iteration of the loop, referencing arr[6] causes a runtime error because the last element of the array is arr[5]. Changing the Boolean expression in the for loop header to k &lt; arr.length fixes the error by making arr[5] the last array element referenced. . | #27 (B) : One issue with the code is that when the body of the if statement executes, the loop variable j is sometimes incremented by 1 twice, once inside the body of the if statement and once at the end of the loop iteration. As a consequence, the for loop iterates through some but not all of the elements in nums. Specifically, the method does not work as intended when the input list has two consecutive pairs of duplicate integers. For the list in this option, at the beginning of the first loop iteration, the value of j is 0 and the value of nums is {1, 2, 2, 3, 3, 4, 5}. At the beginning of the second loop iteration, the value of j is 1 and the value of nums is {1, 2, 2, 3, 3, 4, 5}. At the beginning of the third loop iteration, the value of j is 3 and the value of nums is {1, 2, 3, 3, 4, 5}. At the beginning of the fourth (and last) loop iteration, the value of j is 4 and the value of nums is {1, 2, 3, 3, 4, 5}. At the end of the method, the value of nums is {1, 2, 3, 3, 4, 5} and is different than the expected value of nums, which is {1, 2, 3, 4, 5}. . | #37 (E) : In the body of the first if clause in the code segment, b1 retains the value true if num is between 0 and 100, exclusive. In the body of the else clause, b1 retains the value true if num is less than -100. The statement assigns true to b2 if num is less than -100 or between 0 and 100, exclusive. . | #38 (B!) : Choice 2 correctly creates a new point with the two paramerter Point constructor that assigns a to x and b to y. Choice 1 and 3 use the no paramater point constructor which incorrectly assigns 0 to both x and y. Choice 3 attempts to update x and y individually but they are variables in Point that cannot be accessed direclty from circle. This code will cause a compile runtime error. . | #50 (D) : The for loop iterates from i = 0 to i = 19. The expression i % num2 == 0 evaluates to true when i is divisible by 5 and the expression i % 2 == 0 evaluates to true when i is even. The only values in the range 0 to 19, inclusive, that are both divisible by 5 and even are 0 and 10, so the statement prints “0 10 “. . | #59 (B) : Choice I will return the correct value if the element in the array with one element was target. In this case, with the first call to seqSearchRecHelper the value of data[0] would be target and 0 would be returned. Choice II will eventually cause an ArrayIndexOutOfBoundsException to be thrown when the recursive call is made with target and -1. This will happen after every valid index in data has been examined. During this call, data[-1] is out of bounds. Choice III will correctly return the index of the element closest to the end of the array with the value target, since data[last] == target will be true at some valid index value of last. . | .",
            "url": "https://tangalice.github.io/alicetang/2023/01/23/MCQ2.html",
            "relUrl": "/2023/01/23/MCQ2.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 1-10",
            "content": "Topic | Notes + HW | . 01 Primitive Types | Blog | . 02 Using Objects | Blog | . 04 Iteration | Blog | . 05 Writing Classes | Blog | . 06 Array | Blog | . 07 Array Lists | Blog | . 08 2D Arrays | Blog | . 09 Inheritance | Blog | . 10 Recursion | Blog | . Unit 1-5 Notes and Vocab Combined .",
            "url": "https://tangalice.github.io/alicetang/2022/12/15/Unit1to10.html",
            "relUrl": "/2022/12/15/Unit1to10.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Recursion Lesson",
            "content": "Vocab . Big O notation for Hash map, Binary Search, Single loop, Nested Loop Big O notation describes the set of all algorithms that run no worse than a certain speed, no better than a certain speed, and at a certain speed | Shows the number of operations it will perform | . | . Recursion . a recursive method is a method that calls itself | contains at least one base case that halts recursion and once recursive call | each recursive call has its own local variables | parameter values take progress of recursive progress | recursion can be replaced with an iterative and give same result | Recursion can traverse String, array, and ArrayList objects | . Binary Search (way to use recursion) . find midpoint and choose upper or lower half of section over and over agin until number is located | code to do this would use recursion and call the search function in itself | . Merge Sort (way to use recursion) . divide and conquer algortih to Sort ArrayList | divies array in halves and then calls itself for the two halves in order to sort them | mergeds the two sorted halves into one list | . Recursion Tree . recursion trees are a method for visualizing each recurisve case until the base case is reached | in order for recursion block to finish, there must be some speicial case in which they dont call themselves (base case) | . HW . google form MC | .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/cb/2022/12/13/RecursionLesson.html",
            "relUrl": "/java/jupyter/cb/2022/12/13/RecursionLesson.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "EC Writeup",
            "content": "Main Takeaways and Reflection . Even if you start off with a different career like Kathyleen did, it is not too late to switch to a career in tech. Kris struggled in his CS classes but that ultiamtely didn’t stop him. Career in tech can help you impact a lot of people (rewarding job). Kathyleen wasn’t satisfied with her one to one impact during her investment banking job. Tech career means you contribute to helping people/the greater good. It is also important to focus on continuous learning, never stop learning. Esepcially since tech industry is always advancing, you need to continoulsy expand your knowledge to keep up. Kris said every time he changed companies, he would need to learn more promgramming languages. Knowing only a couple programming languages is the bare minimum for a CS career. The things we learn in this class (CSA and CSP) are applicable; Kris used Rest APIs at his job at twitter. Application to me, achieving success and continously learning in CSA is the first step for a successful career in tech. . Notes . Kathyleen Beveridge . Words to live by . Grateful that she works for company which makes a big impact on people | . Education . MBA, University of South California | BS Finance, Santa Clara University | Studied abroad in Spain | . Career and Journey . Wells Fargo, Nikko Securities, investment advisor went back to school and switched careers (investment banking only really had one to one impact) | . | First high tech job at HP | Qualcomm : Senior Manager Sales Operations and Director of Global Sales | ThermoFischer : senior director of marketing | . Company Mission Statments . HP: Create technology that makes life better for everyone, everywhere | Qualcomm: Inventing the tech everyone loves | Thermo Fisher Scientific: Enable our customers to make the world healthier, cleaner, and safer Similarities | Using tech for the good of the people, main idea is to help people, doing something that people want | Every tech company that she worked in, it had a macro, global impact on the people of the world The product or service is life changing or generation changing | Qualcomm chips were in 99% of cell phones in the world | Everyday a billion people’s lives are impacted by Qualcomm technology! | . | . Currently . Senior director of marketing and commercial sales | Voice of sales, voice of customers | People work really closely with scrum master to commercialize the product | No matter what you are doing, she enjoys working with all the folks. She can’t do what others do | You can take a concept and build it and make it happen | . She has data scientist in her team . Join massive fragment data bases outside the company to predict customer demand and where the sales will be | They sell freezers | Databases predicted where the demand will be BEFORE customers place orders | . Kris Porter . Words to live by . It doesn’t matter what you like at this age, you can have a tech career later on. | . Education . UCLA, Bachelors and Masters degree no CS classes when he started | first CS class was second quarter of some year in college | Failed his first CS class; stopped after failure | . | . Career and Journey . NBC Universal, Streaming media infrastructure | Twitter most of his team laid off | removte workers all kicked off | . | Mysten Labs | . Learning Highlights . Continuous learning | CCNA training | Machine learning and Deep Learning | Python | Data Structures, Algorithms, Systems | Rest APIs in his job at twitter | Slowly movies to graph UL | . Agile Methodology . Technical perspective, different companies have their own version of agile, they use it depending on what they need | Qualcomm, 150 engineers, interacted with each other, planned all of the work for the quarter in a big meeting that last 2 day (good way to coordinate) | Agile is important | . Business landscape can change: Use Sprints . Gone are the days where projects take 6 months | What can we do in shorter time periods? | That skillset is highly regarding | . Machine Learning . Learn how to use python libraries | Use information on when to archive and delete repositories | To cut costs | . Questions . Most important skill to have in the tech industry: . Continuous learning Not just learning a particular programming language, but to learn everything | Different companies have different stacks, everytime he moved companies he had to learn new programming languages | Everyone has different ways of doing things | . | Don’t be super concerned about things you read on the news In learning the skill to work with computers, that is self fulfilling | Start ups are a risk Only risk is not learning (thats deep) | . | . | Be adaptive Career path is zigzaggy | Dated herself for 35 years | Never thought she’d be doing what she’s doing | Best technical people Listen to requirements | Translate it in terms of how the technology can solve the requirements | Help speak it to her | . | . | . Biggest Challenges faced in the tech industry: . She spent 14 years in qualcomm (semiconductor industry) Acquisitions?? Buy other companies | The big fish in the pond (acquiring companies) | Serial killers (but not quite) | . | Interviews are ridiculous Interviews are a series of timed, random tests Could be a problem to solve in 30-45 minutes | Code has to compile with no errors | . | . | . How is your work-life balance: . When you talk to a company, you’re in a position to negotiate You’re the one with the skill | Some good companies, some bad | . | You have to learn how to use services that are specific to certain companies | . How does coding help in the business industry? . Plenty of people were software developers academically, but moved into non-tech senior roles | Coding is a way of thinking A way of looking at a problem and dissecting it | Critical thinking, problem solving | Think methodically | . | She interviews people on their ability to be a problem solver, and their ability to walk her through what you did what you did | . One of her questions: . You are in a room, not electronics, just whiteboard, pen, pencil | How many cars were sold in the United States last year? She wants to know your assumptions, how she derived her answer | . | . What are you interested in exploring or learning right now? . He is interested in learning about block chain technology AWS and google cloud stuff at large companies | . | . How would coding help with investment and finance? . Understanding algorithms, patterns, and analytics | .",
            "url": "https://tangalice.github.io/alicetang/2022/12/13/ECWriteup.html",
            "relUrl": "/2022/12/13/ECWriteup.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Inheritance Lesson",
            "content": "Vocab . inheritance, extends a way for attributes and methods to be inherited between clases | extends is what allows you to bring those attributes | . | subclass constuctor, super Keyword 2 A subclass inherits all the members from the superclass while the constructor of the superclass can be invoked from the subclass | Super keyword refers to superclass objects; it is used to call superclass methods and to access the superclass costructor | . | Overloading a method, same name different parameters Overloading a method in java is a feature that allows a class to have more than one method with the same name, but with different parameters | Instead of defining two methods that do the same thing, it is better to overload one | . | Polymorphism: any of overloading, overriding, late binding Polymorphism is the ability of a class to provide different implementations of a method depending on the type of object that is passed to the method | Allows us to perform the same action in many different ways | . | . Inheritance . the capability of a class to derive properties and characteristics from another class | without inheritance, you have to rewrite methods in each different class | with inheritance, create a superclass vehicle which is extended by subclasses (don&#39;t have to rewrite methods) | . Syntax . public class A {...} | public class B extends A {...} | . Overriding . @Override is used to give different implementations to method of superclass | . Inheritance Hierachies . superclasses and subclasses are gernally organized into a single root tree strucutre called an inheritance hierachy | lower levels of hierchy inherit attributes and methods from upper level | object type and refernce type can be different when instantiating an object variable | . Polymorphism . utilized when a method is implemented to perform different tasks in different classes | allows method to take on multiple &quot;forms&quot; or implementations based on specific object it is acting upon | . HW . Part 1 . Create a world cup superclass with properties of your choice and subclasses for five teams which inherits those properties | Write a constructor for one of those subclasses | . Part 2 . Add a getAge method in the Person super class | Create a new subclass Student with additional members of your choice to personalize the Student class | Create a new subclass Teacher with additiona members of your choice | Override the toString method using the @Override to print a Student and teacher object with new members | Print the student and teacher. | . Part 1 . public class WC{ private int goals; private int wins; public WC(int goals, int wins) { this.goals = goals; this.wins = wins; } public String toString(){ return(&quot; Goals Scored in WC: &quot; + this.goals + &quot;, World Cup Wins: &quot; + this.wins); } public static void main(String[] args) { Argentina argentina = new Argentina(12, 2); System.out.println(&quot;Argentina: &quot; + argentina); Brazil brazil = new Brazil(8, 5); System.out.println(&quot;Brazil: &quot; + brazil); France france = new France(11, 2); System.out.println(&quot;France: &quot; + france); Portugal portugal = new Portugal(12, 0); System.out.println(&quot;Portugal: &quot; + portugal); Morocco morocco = new Morocco(5, 0); System.out.println(&quot;Morocco: &quot; + morocco); } } public class Argentina extends WC { public Argentina(int goals, int wins) { super(goals, wins); } } public class Brazil extends WC { public Brazil(int goals, int wins) { super(goals, wins); } } public class France extends WC { public France(int goals, int wins) { super(goals, wins); } } public class Portugal extends WC { public Portugal(int goals, int wins) { super(goals, wins); } } public class Morocco extends WC { public Morocco(int goals, int wins) { super(goals, wins); } } WC.main(null); . Argentina: Goals Scored in WC: 12, World Cup Wins: 2 Brazil: Goals Scored in WC: 8, World Cup Wins: 5 France: Goals Scored in WC: 11, World Cup Wins: 2 Portugal: Goals Scored in WC: 12, World Cup Wins: 0 Morocco: Goals Scored in WC: 5, World Cup Wins: 0 . public class WC{ private int goals; private int wins; public WC(int goals, int wins) { this.goals = goals; this.wins = wins; } public String toString(){ return(&quot; Goals Scored in WC: &quot; + this.goals + &quot;, World Cup Wins: &quot; + this.wins); } public static void main(String[] args) { WC argentina = new WC(12, 2); System.out.println(&quot;Argentina: &quot; + argentina); WC brazil = new WC(8, 5); System.out.println(&quot;Brazil: &quot; + brazil); WC france = new WC(11, 2); System.out.println(&quot;France: &quot; + france); WC portugal = new WC(12, 0); System.out.println(&quot;Portugal: &quot; + portugal); WC morocco = new WC(5, 0); System.out.println(&quot;Morocco: &quot; + morocco); } } WC.main(null); . Argentina: Goals Scored in WC: 12, World Cup Wins: 2 Brazil: Goals Scored in WC: 8, World Cup Wins: 5 France: Goals Scored in WC: 11, World Cup Wins: 2 Portugal: Goals Scored in WC: 12, World Cup Wins: 0 Morocco: Goals Scored in WC: 5, World Cup Wins: 0 . Part 2 . public class Person { public String name; public String birthday; public int age; public Person (String name, String birthday, int age){ this.name = name; this.birthday = birthday; this.age = age; } public int getAge(){ return age; } public String toString(){ return &quot;Name: &quot; + this.name + &quot;, Age: &quot; + this.getAge(); } } public class Student extends Person { private int grade; private double gpa; private int aps; public Student (String name, String birthday, int age, int grade, double gpa, int aps) { super(name, birthday, age); this.grade = grade; this.gpa = gpa; this.aps = aps; } @Override public String toString() { return &quot;Name: &quot; + this.name + &quot;, birthday: &quot; + this.birthday + &quot;, age: &quot; + this.age + &quot;, grade: &quot; + this.grade +&quot;, gpa: &quot; + this.gpa +&quot;, APs: &quot; + this.aps; } } public class Alice extends Student{ public Alice(String name, String birthday, int age, int grade, double gpa, int aps){ super(name, birthday, age, grade, gpa, aps); } public static void main(String[] args) { Alice alice = new Alice(&quot;Alice&quot;, &quot;2005-01-30&quot;,17, 12, 3.9, 12); System.out.println(&quot;Student: &quot; + alice.toString()); } } public class Teacher extends Person { private String subject; private int years; public Teacher (String name, String birthday, int age, String subject, int years) { super(name, birthday, age); this.subject = subject; this.years = years; } @Override public String toString() { return &quot;Name: &quot; + this.name + &quot;, birthday: &quot; + this.birthday + &quot;, age: &quot; + this.age + &quot;, subject: &quot; + this.subject +&quot;, years teaching: &quot; + this.years ; } } public class Smith extends Teacher{ public Smith(String name, String birthday, int age, String subject, int years){ super(name, birthday, age, subject, years); } public static void main(String[] args) { Smith smith = new Smith(&quot;Mr. Smith&quot;, &quot;1982-03-14&quot;, 40, &quot;Math&quot;, 6); System.out.println(&quot;Teacher: &quot; + smith.toString()); } } Alice.main(null); Smith.main(null); . Student: Name: Alice, birthday: 2005-01-30, age: 17, grade: 12, gpa: 3.9, APs: 12 Teacher: Name: Mr. Smith, birthday: 1982-03-14, age: 40, subject: Math, years teaching: 6 .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/cb/2022/12/12/InheritanceLesson.html",
            "relUrl": "/java/jupyter/cb/2022/12/12/InheritanceLesson.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "CB FRQ 4",
            "content": "/** Constructs a LightBoard object having numRows rows and numCols columns. * Precondition: numRows &gt; 0, numCols &gt; 0 * Postcondition: each light has a 40% probability of being set to on. */ public class LightBoard { private boolean[][] lights; public LightBoard(int numRows, int numCols) { lights = new boolean[numRows][numCols]; for (int r = 0; r &lt; numRows; r++) { for (int c = 0; c &lt; numCols; c++) { if(Math.random() &lt; 0.4) { lights[r][c] = true; } else { lights[r][c] = false; } } } } /** Evaluates a light in row index row and column index col and returns a status * as described in part (b). * Precondition: row and col are valid indexes in lights. */ public boolean evaluateLight(int row, int col) { int count = 0; for (int r = 0; r &gt; lights.length; r++) { if (lights[r][col]) { count++; } } if (lights[row][col] &amp;&amp; count % 2 == 0) { return false; } if (!lights[row][col] &amp;&amp; count % 3 == 0) { return true; } return lights[row][col]; } } LightBoard lightboard = new LightBoard(7,5); System.out.println(lightboard.evaluateLight(0,0)); System.out.println(lightboard.evaluateLight(2,1)); System.out.println(lightboard.evaluateLight(5,3)); . true true true .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/cb/2022/12/12/CBFRQ4.html",
            "relUrl": "/java/jupyter/cb/2022/12/12/CBFRQ4.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "2D Arrays Lesson",
            "content": "Vocab . nested for loops A for loop inside of another for loop. These are used to loop through all the elements in a 2d array. One loop can work through the rows and the other the columns. | . | Out Of Bounds Error happens when a loop goes beyond the last valid index in an array. | . | . 2D Arrays . array of arrays | multidemensional, as many rows and colomns as you want | . Initializing . created with 2 brackets (ex: int[][] numbers) | can be initialized by giving values or a size if initialzed with values, each row can have a different number of colomns | . | . Iterating . use for loop inside a for loop | first loops iterates through rows and second loop iterates through the colomnns | . Acessing . use indexes to access values inside array | [1][2] is second row, third colomn | . HW . Create a class for 2D array learning. | Create a method to initialize a 2D array with arbitrary values | Create a method to reverse the 2D array and print out the values | Create a method that asks for the input of a position and it returns the corresponding value | Create a method that multiplies each value in a row and then adds all the products together | Create a new object to test out each method in the main function | . import java.util.Scanner; public class Array{ int[][] numbers = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}}; public void print(){ for(int i = 0; i &lt; numbers.length; i++){ for(int j = 0; j &lt; numbers[i].length; j++){ System.out.print(numbers[i][j] + &quot; &quot;); } System.out.println(); } } public void reverse() { for (int i = numbers.length - 1; i &gt;= 0; i--){ for(int j = numbers[i].length - 1; j &gt;= 0; j--) { System.out.print(numbers[i][j]+ &quot; &quot;); } System.out.println(); } } public void askIndex() { Scanner scanner = new Scanner(System.in); System.out.print(&quot;What row do you want? &quot;); int rowIndex = scanner.nextInt(); System.out.println(rowIndex); System.out.print(&quot;What col do you want? &quot;); int colIndex = scanner.nextInt(); System.out.println(colIndex); System.out.println(numbers[rowIndex][colIndex]); } public void multSum() { int a = 1; int b = 0; for(int i = 0; i &lt; numbers.length; i++){ for(int j = 0; j &lt; numbers[i].length; j++){ a = a * numbers[i][j]; } b = b + a; a = 1; } System.out.println(&quot;result: &quot;+ b); } public static void main(String[] args){ Array array = new Array(); array.print(); System.out.println(); array.reverse(); System.out.println(); array.askIndex(); System.out.println(); array.multSum(); } } Array.main(null); . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 What row do you want? 2 What col do you want? 3 12 result: 57264 .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/cb/2022/12/06/2DArrayLesson.html",
            "relUrl": "/java/jupyter/cb/2022/12/06/2DArrayLesson.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 1-5 Blog",
            "content": "Unit 1 - Primitive Types . Primities . primitives are lowercase | nonprimitives are uppercase | Collegeboard need-to-know primitives: Boolean, Int, Double | . Casting . changing a variable from one data type to another | widening: happens automatically, going from smaller to larger data type | narrowing: need to declare to address overflow error, going from larger to smaller data type | . Operators . (+) is addition | (-) is subtraction | (/) is division | (*) is multiplication | (%) finds the remainder | example: x += 7 increases the varaible by 7 | . Casting for Division . When dividing a double by a double the output is a double, and when dividing an integer with an integer the output is an integer, but that is not always the case. like 7/3 is not an integer. To fix this you need to cast the denominator to a double like 7/(double)3 | . int x = 8/3; System.out.println(x); // vs casting with double double y = 8/(double)3; System.out.println(y); . 2 2.6666666666666665 . Casting, specifically for Truncating or Rounding . When rounding double values they can be rounded to the nearest integer by adding or subtracting 0.5 and casting with (int) | . double x = 8.0 / 3; int rounded = (int)(x + 0.5); System.out.println(&quot;8.0/3 = &quot; + x); System.out.println(&quot;8/3 truncated: &quot; + (int)x ); System.out.println(&quot;8.0/3 rounded to nearest int: &quot; + rounded); . 8.0/3 = 2.6666666666666665 8/3 truncated: 2 8.0/3 rounded to nearest int: 3 . Unit 2 - Using Objects . What is OOP . OOP is object oriented programming | programming pardigm centered around objects | . Classes and Objects . classes are templates or a blueprint, contatin data | objects are instances of a class, need to be instantiated | methods are functions of a class | Method Declaration consists of 6 components: Access modifer, Return type, Method name, Parameter list, Exception list, Method body | Calling a method allows for code reuse, optimization, and organization | To call an object&#39;s method you have to make an object reference | . Wrapper Classes, why wrap int, double. Show examples . A wrapper class is a class whose object contains primitive data types. Wrapper classes allow us to wrap a primitive value into the class object | . // in newer versions of Java Integer a = 2; Double b = 3.5; System.out.println(a); System.out.println(b) . 2 3.5 . Concatenation . Concatenation is the joining or data. | Some examples are: | string concatenation and string and object concatenation with toString() method | . Math class, specifically Random usage . Math class contains methods from the java.lang package | These are static methods so you call them by using ClassName.methodName() | Ex: math.random | . System.out.println(Math.abs(-2)); System.out.println(Math.pow(19, 6)); System.out.println(Math.sqrt(500)); . 2 4.7045881E7 22.360679774997898 . Unit 3 - Boolean Expression and If Statements . Boolean Expressions . A Boolean expression is a logical statement that is either True or False. Boolean expressions can compare any type of data if both parts of the expression have the same basic data type. A Boolean expression can be a combination of the Boolean constants true or false. . All non zero numbers are true . the most common example: 1 = true; 0 = false | == checks for comparison | not to be confused with = which is assignment | != checks for inequality | &lt;, &gt;, &gt;=, &lt;= | these operands do their normal functions | || relates to the or function | &amp;&amp; related to and function | . Logic Gates . Logic gates are used to carry out logical operations on single or multiple binary inputs and give one binary output. In simple terms, logic gates are the electronic circuits in a digital system. . . Buffer/YES : output is the same as the input | NOT : output is the opposite of the input | AND : returns true if both inputs are true | NAND : returns false if both inputs are true | OR : returns true if at least one of the inputs are true, returns false if both inputs are false | NOR : returns false if at least one of the inputs are true, returns true if both inputs are false | XOR : returns true if the two inputs are different | XNOR : returns true if two inputs are the same | . Compound Boolean Expression . Compound Boolean Expressions are like &amp;&amp; which means that the code is executed based on if the first and second conditions are true. | . De Morgan&#39;s Law . DeMorgan&#39;s laws tell us how to transform logical expressions (with multiple AND and/or OR statements) using the NOT operator. . (not(A and B)) is equal to (not A or not B) | (not(A or B)) is equal to (not A and not B) | (not(A and B)) is not equal to (not A and not B) Syntax | union symbol (∪) : OR | intersection symbol (∩) : AND | apostrophe (&#39;) : NOT | . Truth Tables . A truth table is a breakdown of a logic function by listing all possible values the function can attain. Such a table typically contains several rows and columns, with the top row representing the logical variables and combinations, in increasing complexity leading up to the final function. . Compare methods . Comparing numbers: compare() method of Integer class of java.lang package compares two integer values (x, y) given as a parameter and returns the value zero if (x==y), if (x &lt; y) then it returns a value less than zero and if (x &gt; y) then it returns a value greater than zero. | Comparing strings: if (string1 &gt; string2) it returns a positive value. If (string1 == string2) it returns 0. If (string1 &lt; string2) it returns a negative value | Comparing objects: == and != operators | . int a = 10; int b = 20; // as 10 less than 20, Output will be a value less than zero System.out.println(Integer.compare(a, b)); . -1 . Unit 4 - Iteration . Operators . ++ increment by 1 | -- decrement by 1 | . While loop . while a specific condition is executed the condition will run | . Recursion Loop . Put your function inside its own functions | . Nested Iteration . technique that coders use | any of the three loops can be used | put a loop inside a loop | . For loop . for each thing in a sequence it will loop | will run for each thing that is true | Loops that runs for a set number of iterations | The enhanced for loop iterates in a sequence (counter is always increased by one) | . public class LoopConversion { public static void main(String[] args) { int count = 0; //convert to for loop for (count=0; count &lt; 5;) { System.out.println(&quot;count is &quot; + count); count++; } } } LoopConversion.main(null); . count is 0 count is 1 count is 2 count is 3 count is 4 . While Loop . Iterative statement that checks for conditions and runs as long as they are met. | Do while loop is similar but it is guaranteed to execute at least one time | . public class WhileLoop { public static void main(String[] args) { int i = 0; //convert to for loop while (i &lt; 5) { System.out.println(&quot;i is &quot; + i); i++; } } } WhileLoop.main(null); . i is 0 i is 1 i is 2 i is 3 i is 4 . Nested Loops . Nested loops are loops within loops | . class Main { public static void main(String[] args) { int weeks = 3; int days = 7; // outer loop prints weeks for (int i = 1; i &lt;= weeks; ++i) { System.out.println(&quot;Week: &quot; + i); // inner loop prints days for (int j = 1; j &lt;= days; ++j) { System.out.println(&quot; Day: &quot; + j); } } } } Main.main(null); . Week: 1 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 Week: 2 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 Week: 3 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 . Unit 5 - Writing Classes . Classes . classes are &quot;blueprints&quot; that we use to instantiate objects | classes are an essential aspect of OOP | . Anatomy . Object . state, attributes, behavior | intance of a class | represented by an instance in the program | . Class . defines an abstract data type | object references: string variable | instance variables : attributes, behaviors, data for objects | . Functions . methods : the action or behavior of an object | constructor : special method for object instantiation, sets the initial values for variables, default constructors have no arguments | main : tests the class | . accesor . Get of Methods or getters allows you to access the values of varaibles | returns a copy of the variable | . | non-void methods value of specific data type returned | no parameteres | . | . mutator . Set of Methods or setters allows you to change to values of variables | . | non-void methods no value returned | will take parameters | . | . Writing Methods . method_definition(Modifiers, Return Type) | method_signature(Name, Parameters) | method_body(Code) | &quot;Object.method()&quot; | . Key Words . /Static Modifiers . used after access modifiers | denotes as belonging to a class /This | refers to the constructor that is being called Access Modifiers | Restricts scope of classes, variables and functions | . Scope and Access . /Scope . Where a variable can be accessed/used | Class level: Instance Var | Method level: Local, parameter var | Block level: If else/ Loops | . Public, Private, Protected . Public - can be accessed within and outside of class | Private - can only be accessed within the class | Protected - can be accessed by all classes in the package and all subclass outside of the package | . class Lamp { boolean isOn; void turnOn() { isOn = true; System.out.println(&quot;is the light on? &quot; + isOn); } void turnOff() { isOn = false; System.out.println(&quot;is the light on? &quot; + isOn); } } class Main { public static void main(String[] args) { // create objects led and halogen Lamp a = new Lamp(); Lamp b = new Lamp(); // turn on the light by // calling method turnOn() a.turnOn(); // turn off the light by // calling method turnOff() b.turnOff(); } } Main.main(null); . is the light on? true is the light on? false . Inheritance, extends . Inheritance is a way for attributes and methods to be inherited from one class to another | Extends is what allows you to bring those attributes from one class to another | example: fibonacci | . Subclass constructor, super Keyword2 . A subclass inherits all the members from the superclass while the constructor of the superclass can be invoked from the subclass | Super keyword refers to superclass objects; it is used to call superclass methods and to access the superclass costructor | . Overloading a method, same name different parameters . Overloading a method in java is a feature that allows a class to have more than one method with the same name, but with different parameters | Instead of defining two methods that do the same thing, it is better to overload one | . Overriding a method, same signature of a method . Method overriding occurs when a subclass has the same method as the parent class | When a subclass provides a particular implementation of a method declared by one of its parent classes | . Abstract Class, Abstract Method . A abstract class cannot be instantiated but they can be subclassed | An abstract method is a method that has just the method definition but does not contain implementation | . Standard methods: toString(), equals(), hashCode() . Standard methods are blocks of code that can be called from another location in the program or class | toString(); returns the given value in string format | equals(); compares two strings and returns true if the strings are equal | hashCode(); returns an integer value generated by a hashing algorithm | . Late binding of object, referencing superclass object, ie Animal a = new Chicken(); Animal b = new Goat(); . Late binding is when the compiler should perform no argument checks, no type checks on a method call and should leave it all to the runtime | . Polymorphism: any of overloading, overriding, late binding . Polymorphism is the ability of a class to provide different implementations of a method depending on the type of object that is passed to the method | Allows us to perform the same action in many different ways | . Big O notation for Hash map, Binary Search, Single loop, Nested Loop . Big O notation describes the set of all algorithms that run no worse than a certain speed, no better than a certain speed, and at a certain speed | Shows the number of operations it will perform | .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/cb/2022/12/02/Unit1to5.html",
            "relUrl": "/java/jupyter/cb/2022/12/02/Unit1to5.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Array Lists Lesson",
            "content": "Vocab . array collection of similar data types | . | elements each variable in an arrya | . | index and array length index is the value/position assigned to each element | array length is how many elements are in the array | . | . Introductions . A reference type | Array cannot be modified while ArrayLists can change size dynamically | . Methods . add(int index, element) ... | . Traversing ArrayLists . For Loop | While Loop | Enhanced ForLoop | . Searching . The locating of data within linear structures | Searching a structure involves control structures - iterationnal and selection - loop with an if statement | For loops are optimal for linear searching because each element needs to be specified sequentiallly with no need to track the index after its executed | Order matters sometimes in searching | . Sorting . Sorting sorts the ArrayList in a specified order (ascending or descending) | Collections.sort[(list.name)] - sort in ascending order | Collections.sort[(ArrayList,Collections.reverseOrder())] - sort in ascending order | . HW . Create an ArrayList that includes 2 of the 4 factors listed below. . Sort an ArrayList in descending order and swap the first and last elements | Find and display the hashCode of an Arraylist before and after being sorted | Return &quot;ascending&quot; if the list is sorted in ascending order, return &quot;descending&quot; if it is descending, and return &quot;neither&quot; if neither | Replace 3 elements in an ArrayList with another ArrayList and reverse the order of the new list | . import java.util.ArrayList; import java.util.Collections; // initialize Array List with strings ArrayList&lt;String&gt; strlist = new ArrayList&lt;&gt;(); strlist.add(&quot;apple&quot;); strlist.add(&quot;orange&quot;); strlist.add(&quot;3&quot;); strlist.add(&quot;yellow&quot;); strlist.add(&quot;AX7&quot;); strlist.add(&quot;blue98&quot;); System.out.println(strlist); // reverse order of array list Collections.reverse(strlist); // switch first and last public static void swap(){ String temp = strlist.get(0); int lastindex = strlist.size()-1; strlist.set(0, strlist.get(lastindex)); strlist.set(lastindex, temp); System.out.println(&quot;reversed list with first and last element switched: &quot; + strlist); } swap() . [apple, orange, 3, yellow, AX7, blue98] reversed list with first and last element switched: [apple, AX7, yellow, 3, orange, blue98] . import java.util.ArrayList; import java.util.Collections; // initialize Array List with strings ArrayList&lt;String&gt; strlist = new ArrayList&lt;&gt;(); strlist.add(&quot;apple&quot;); strlist.add(&quot;orange&quot;); strlist.add(&quot;3&quot;); strlist.add(&quot;yellow&quot;); strlist.add(&quot;AX7&quot;); strlist.add(&quot;blue98&quot;); // hashCode before sort System.out.println(&quot;Unsorted hashCode: &quot; + strlist.hashCode()); // hashCode after sort Collections.sort(strlist); System.out.println(&quot;Sorted hashCode: &quot; + strlist.hashCode()); . Unsorted hashCode: 903531471 Sorted hashCode: 1218882291 .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/cb/2022/12/01/ArrayListLesson.html",
            "relUrl": "/java/jupyter/cb/2022/12/01/ArrayListLesson.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "CB MCQ",
            "content": ". Main Takeaways . need to work on arrays and classes notation | on actual test, use pencil and paper to keep track of large sets of datas when dealing with an array problem. I got mixed up handling so many numbers all in my head at once | don’t get indexes of arrays confused. Index for java starts at zero. data.length is one more than the last index value (also applies to list.size). | data[k] changes after each iteration | private variables cannot be accessed from outside the class | . Corrections . . #15 (A) : For choice II, the data.length upper bound will cause and out of bounds error when inserted into data[data.length-1] and data[data.length-1+1]. But for choice I and II, data[k-1]&gt;datadata[k] and data[k]&gt; data[k+1] both correctly check that if the values are decreasing or not. | #18 (B) : The indices for myList are 0 through myList.size() – 1, for a total of myList.size() elements. Using Math.random()generates a random floating point number between 0 and 1, not including 1. When this value is multiplied by the number of elements we want in our range, myList.size(), a random floating point number between 0 and myList.size(), not including myList.size(), is generated. When this value is typecast as an int, the result is an integer value between 0 and myList.size() – 1 inclusive. | #29 (E) : The original code segment prints all values between 1 and 100 that are evenly divisible by 4. The following values are printed: 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, and 100. Choice E shows these values can also be printed by having a for loop that has a loop control variable k that starts at 4, increments by 4, and terminates when k is greater than 100. | #31 (C) : Data[K+1] being added to Data[K], adding values in array to each other. For every single iteration of the loop, data[K+1] is updated so values are only increasing. So you aren’t just adding 2 numbers next to each other. Add the new number each time. | #34 (B) : Choice 2 correctly creates a new point with the two paramerter Point constructor that assigns a to x and b to y. Choice 1 and 3 use the no paramater point constructor which incorrectly assigns 0 to both x and y. Choice 3 attempts to update x and y individually but they are variables in Point that cannot be accessed direclty from circle. This code will cause a compile runtime error. | .",
            "url": "https://tangalice.github.io/alicetang/2022/11/07/MCQ.html",
            "relUrl": "/2022/11/07/MCQ.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "N@TM",
            "content": "Reflection . Since we needed a “fun” feature on our project website we chose to build the number game 2048. At N@TM, the game was a success because people seemed really interested in trying to play the game. I looked at another team’s websites which also happened to be about statistics. They recreated the data graphing feature of stapplet. I thought that was really cool and I think we coudl take inspireation from them and do the same for our stats website. Another team made a car website with a google maps API to find local car dealerships; I thought that was pretty interesting. My team and I also went to the other classrooms and looked at 3D animation, pottery, and painting and drawing. I was impressed with how detailed the creations were for the 3D animation 1 class. They looked way cooler than what I made when I was in 3D animation 1. I also saw a pottery bear that looked really professional. For painting and drawing, I saw audrey’s artworks. She got a 5 on the AP exam for them. They were really good. . Images . .",
            "url": "https://tangalice.github.io/alicetang/2022/11/03/N@TM.html",
            "relUrl": "/2022/11/03/N@TM.html",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Array Lesson",
            "content": "Vocab . Populating giving the elements in the array values | . | array bounds marks start and end of array | . | traversal going through each element | . | . Array . a type of data structure that contains a collection of data | ArrayLists are a different data structure | Data in a java array can be primitive or referenced | element - one value in an array | index - the position of one value in an array | use any sort of loop to traverse through an array | . HW . public class Array { private int[] values = {0, 2, 4, 6, 8, 10}; public void printValues(){ for(int i = 0; i &lt; values.length; i++){ System.out.println(values[i]); } } public void swapValues(){ int lastElement = values[values.length-1]; values[values.length-1] = values[0]; values[0] = lastElement; } public void replaceZero(){ for(int i = 0; i &lt; values.length; i++){ values[i] = 0; } } public static void main(String[] args){ System.out.println(&quot;Swapping first and last: &quot;); Array swapValues = new Array(); swapValues.swapValues(); swapValues.printValues(); System.out.println(&quot;Replace all with zero: &quot;); Array replaceZero = new Array(); swapValues.replaceZero(); swapValues.printValues(); } } Array.main(null); . Swapping first and last: 10 2 4 6 8 0 Replace all with zero: 0 0 0 0 0 0 .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/cb/2022/10/25/ArrayLesson.html",
            "relUrl": "/java/jupyter/cb/2022/10/25/ArrayLesson.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Classes Lesson",
            "content": "Classes . classes are &quot;blueprints&quot; that we use to instantiate objects | classes are an essential aspect of OOP | . Anatomy . Object . state, attributes, behavior | intance of a class | represented by an instance in the program | . Class . defines an abstract data type | object references: string variable | instance variables : attributes, behaviors, data for objects | . Functions . methods : the action or behavior of an object | constructor : special method for object instantiation, sets the initial values for variables, default constructors have no arguments | main : tests the class | accesor : allows you to access the values of varaibles, returns a copy of the variable | mutator : allows you to change to values of variables | . Writing Methods . method_definition(Modifiers, Return Type) | method_signature(Name, Parameters) | method_body(Code) | &quot;Object.method()&quot; | . Homework : 2021 FRQ 1A, 3a . 1a) . public int scoreGuess (String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals (guess)) { count++; } } return count * guess.length() * guess.length(); } . 3a) . public void addMembers(String[] names, int gradYear ){ for( String n : names ){ memberList.add(new MemberInfo( n, gradYear, true) ); } } .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/cb/2022/10/20/ClassesLesson.html",
            "relUrl": "/java/jupyter/cb/2022/10/20/ClassesLesson.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Iteration Lesson",
            "content": "While Loop . loop runs as long as the while condition is true/met . For Loop . loop runs for a set amount of iterations . Recursion Loop . recursive function calls itself repeditly, forming a loop . Nested Iteration . previous 3 types of loops are applicable, loop inside a loop . While Loop Practice . import java.util.Scanner; public class Checker { public static void main(String[] args) { int number; // Create a Scanner object for keyboard input. Scanner keyboard = new Scanner(System.in); // Get a number from the user. System.out.print(&quot;Enter a number in the range of 1 through 100: &quot;); number = keyboard.nextInt(); while ((number &lt; 1) || (number &gt; 100)) { System.out.print(&quot;Invalid input. Enter a number in the range &quot; + &quot;of 1 through 100: &quot;); number = keyboard.nextInt(); } } } Checker.main(null) . Enter a number in the range of 1 through 100: Invalid input. Enter a number in the range of 1 through 100: Invalid input. Enter a number in the range of 1 through 100: . For Loop Practice . public class LoopConversion { public static void main(String[] args) { int count ; //convert to for loop for (count=0; count&lt;5; count++) { System.out.println(&quot;count is &quot; + count); } } } LoopConversion.main(null) . count is 0 count is 1 count is 2 count is 3 count is 4 . Pop Quiz . public class PopQuiz { public static void main(String[] args) { int count; for (count=0; count&lt;5; count++) { System.out.println(count); } int count2 = 0; while (count2 &lt; 5) { System.out.println(count2); count2++ ; } } } PopQuiz.main(null) . 0 1 2 3 4 0 1 2 3 4 . Homework- Choose one or do both . Write a program where the user inputs their monthly budget. The loop should then ask the user to input each of their monthly expenses. These expenses should be kept in a running total. The final output should display if the user is over or under their budget for the month, and by how much. | Write a program where a random number is generated. Then the user tries to guess the number. If they guess too high display something to let them know, and same for if they guess a number that is too low. The loop must iterate until the number is guessed correctly. | . Also complete the quiz. . HW Part 2 . import java.util.Scanner; public class Numberguesser { public static void guessnumber() { Scanner scanner = new Scanner(System.in); int number = 1 + (int)(100* Math.random()); int i, guess; System.out.println( &quot;A number is chosen between 1 to 100.&quot; + &quot;Guess the number&quot; + &quot; within 5 trials.&quot;); for (i = 0; i &lt; 5; i++) { System.out.println( &quot;Guess a number:&quot;); guess = scanner.nextInt(); if (number == guess) { System.out.println(&quot;You guessed the number.&quot;); break; } else if (number &gt; guess&amp;&amp; i != 5 - 1) { System.out.println(&quot;The number is greater than &quot; + guess); } else if (number &lt; guess &amp;&amp; i != 5 - 1) { System.out.println(&quot;The number is less than &quot; + guess); } } if (i == 5) { System.out.println( &quot;You have used all 5 trials.&quot;); System.out.println( &quot;The number was &quot; + number); } } // Driver Code public static void main(String arg[]) { // Function Call guessnumber(); } } Numberguesser.main(null); . A number is chosen between 1 to 100.Guess the number within 5 trials. Guess a number: The number is less than 50 Guess a number: The number is greater than 25 Guess a number: The number is greater than 13 Guess a number: The number is greater than 19 Guess a number: You have used all 5 trials. The number was 32 . Quiz .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/cb/2022/10/19/IterationLesson.html",
            "relUrl": "/java/jupyter/cb/2022/10/19/IterationLesson.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Goblin HW",
            "content": "public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } . import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.8); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(0.8); fight(goblin1, goblin2); } } Duel.main(null); . jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 2 Gunther the great attacks jeffrey! Gunther the great misses... jeffrey HP: 12 jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 0 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 11 Gunther the great has perished .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/10/14/GoblinHW.html",
            "relUrl": "/java/jupyter/2022/10/14/GoblinHW.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "OOP Lesson",
            "content": "What is OOP . OOP is object oriented programming | programming pardigm centered around objects | . Classes and Objects . classes are templates or a blueprint, contatin data | objects are instances of a class, need to be instantiated | methods are functions of a class | Method Declaration consists of 6 components: Access modifer, Return type, Method name, Parameter list, Exception list, Method body | Calling a method allows for code reuse, optimization, and organization | To call an object&#39;s method you have to make an object reference | . Homework . no FRQ, finish Goblin Game, implement a 0.8 percent chance of landing a hit (due monday) Goblin HW .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/cb/2022/10/13/OOPLesson.html",
            "relUrl": "/java/jupyter/cb/2022/10/13/OOPLesson.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Primitives Lesson",
            "content": "Why Java? . more simple language | automatic garbage collection | flexible and effecient because it is object oriented | multi threaded allows java to run multiple programs at once | . Primities . primitives are lowercase | nonprimitives are uppercase | Collegeboard need-to-know primitives: Boolean, Int, Double | . Casting . changing a variable from one data type to another | widening: happens automatically, going from smaller to larger data type | narrowing: need to declare to address overflow error, going from larger to smaller data type | . Operators . (+) is addition | (-) is subtraction | (/) is division | (*) is multiplication | (%) finds the remainder | example: x += 7 increases the varaible by 7 | . Homework . 2006 FRQ 2a, 3a (due monday) . 2 a) . // returns the price of the item including the tax public double purchasePrice() { return getListPrice() * (1.0 + taxRate); } . 3 a) . // returns 0 when this customer is equal to other; // a positive integer when this customer is greater than other; // a negative integer when this customer is less than other public int compareCustomer(Customer other) { int diff = getName().compareTo(other.getName()); if (diff == 0) diff = getID() - other.getID(); return diff; } .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/cb/2022/10/12/PrimitivesLesson.html",
            "relUrl": "/java/jupyter/cb/2022/10/12/PrimitivesLesson.html",
            "date": " • Oct 12, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Array Lists",
            "content": "ArrayLists allows for elements to be added and removed from an array after it is made. In a normal array, a new one has to be made every time . import java.util.ArrayList; // import the ArrayList class ArrayList&lt;String&gt; Colors = new ArrayList&lt;String&gt;(); // Create an ArrayList object . add(int index, element) : adds an element to the list . Colors.add(&quot;red&quot;); Colors.add(&quot;orange&quot;); Colors.add(&quot;yellow&quot;); . true . addAll(int index, Collection collection) : adds all the elements in a list to another . ArrayList&lt;String&gt; shades = new ArrayList&lt;String&gt;(); shades.add(&quot;black&quot;); shades.add(&quot;white&quot;); Colors.addAll(shades); System.out.println(&quot;colors: &quot; + Colors + &quot; n&quot;); System.out.println(&quot;shades: &quot; + shades); . colors: [red, orange, yellow, black, white] shades: [black, white] . size() : outputs the size of a list (number of elements) . System.out.println(&quot;The number of colors in Colors[] is currently &quot; + Colors.size()); . The number of colors in Colors[] is currently 5 . clear() : clears everything in a list, reference list is stored . shades.clear(); System.out.println(&quot;shades: &quot; + shades); . shades: [] . remove(int index), removes the element from a list with that specific index, shifts the rest of the elements to the left and decreases their index by 1 . Colors.remove(0); System.out.println(&quot;colors: &quot; + Colors); . colors: [orange, yellow, black, white] . remove(element) : remove the element with a specific name . Colors.add(&quot;green&quot;); // removes orange item Colors.remove(&quot;orange&quot;); System.out.println(&quot;colors: &quot; + Colors); . colors: [yellow, black, white, green] . get(int index) : obtains the element of that index . System.out.println(&quot;The first item listed is &quot; + Colors.get(0)); . The first item listed is yellow . set(int index, element) : replaces what is in that index with the new element . // replace the first term (index of 0) Colors.set(0, &quot;purple&quot;); System.out.println(&quot;colors: &quot; + Colors); . colors: [purple, black, white, green] . IndexOf(element) : returns the index of that element . System.out.println(&quot;The index for black is &quot; + Colors.indexOf(&quot;black&quot;)); . The index for black is 1 . lastIndexOf(element) : returns last occurrence of an object if not present in list . System.out.println(&quot;The index for yellow is &quot; + Colors.lastIndexOf(&quot;yellow&quot;)); . The index for yellow is -1 . equals(element) : true or false if two objects (lists) are equal to one another . if (Colors.equals(shades) == true) { System.out.println(&quot;all the colors are in shades&quot;); } else { System.out.println(&quot;the colors include non black/white shades&quot;); } . the colors include non black/white shades . hashCode() : returns the hashcode of a list . System.out.println(&quot;The hashcode for this list is &quot; + Colors.hashCode()); . The hashcode for this list is -2139276674 . isEmpty() : true or false if the list is empty (has no elements within) . System.out.println(&quot;Colors empty is &quot; + shades.isEmpty()); . Colors empty is true . contains(element) : returns true if the list contains the element . System.out.println(&quot;Colors contains blue is &quot; + Colors.contains(&quot;blue&quot;)); . Colors contains blue is false . containsAll(Collection collection) : returns yes if the list contains all the elements of the other list . shades.add(&quot;pink&quot;); shades.add(&quot;blue&quot;); if (Colors.containsAll(shades) == true) { System.out.println(&quot;colors contains all shades&quot;); } else { System.out.println(&quot;colors does not contain all shades&quot;); } . colors does not contain all shades . sort(Comparator comp) : sorts elements . Collections.sort(Colors); System.out.println(&quot;Sorted colors &quot; + Colors); . Sorted colors [black, green, purple, white] .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/10/09/ArrayLists.html",
            "relUrl": "/java/jupyter/2022/10/09/ArrayLists.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Databases",
            "content": "import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class Jokes { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String joke; // The Joke private int haha; // Store joke likes private int boohoo; // Store joke jeers } . | import lombok.AllArgsConstructor; package lombok does not exist . import java.util.List; import org.springframework.data.jpa.repository.JpaRepository; // JPA is an object-relational mapping (ORM) to persistent data, originally relational databases (SQL). Today JPA implementations has been extended for NoSQL. public interface JokesJpaRepository extends JpaRepository&lt;Jokes, Long&gt; { // JPA has many built in methods, these few have been prototyped for this application void save(String Joke); // A List&lt;Jokes&gt; findAllByOrderByJokeAsc(); // returns a List of Jokes in Ascending order List&lt;Jokes&gt; findByJokeIgnoreCase(String joke); // look to see if Joke(s) exist } . import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; import java.util.List; import java.util.Optional; @RestController // annotation to simplify the creation of RESTful web services @RequestMapping(&quot;/api/jokes&quot;) // all requests in file begin with this URI public class JokesApiController { // Autowired enables Control to connect URI request and POJO Object to easily for Database CRUD operations @Autowired private JokesJpaRepository repository; /* GET List of Jokes * @GetMapping annotation is used for mapping HTTP GET requests onto specific handler methods. */ @GetMapping(&quot;/&quot;) public ResponseEntity&lt;List&lt;Jokes&gt;&gt; getJokes() { // ResponseEntity returns List of Jokes provide by JPA findAll() return new ResponseEntity&lt;&gt;( repository.findAll(), HttpStatus.OK); } /* Update Like * @PutMapping annotation is used for mapping HTTP PUT requests onto specific handler methods. * @PathVariable annotation extracts the templated part {id}, from the URI */ @PutMapping(&quot;/like/{id}&quot;) public ResponseEntity&lt;Jokes&gt; setLike(@PathVariable long id) { /* * Optional (below) is a container object which helps determine if a result is present. * If a value is present, isPresent() will return true * get() will return the value. */ Optional&lt;Jokes&gt; optional = repository.findById(id); if (optional.isPresent()) { // Good ID Jokes joke = optional.get(); // value from findByID joke.setHaha(joke.getHaha()+1); // increment value repository.save(joke); // save entity return new ResponseEntity&lt;&gt;(joke, HttpStatus.OK); // OK HTTP response: status code, headers, and body } // Bad ID return new ResponseEntity&lt;&gt;(HttpStatus.BAD_REQUEST); // Failed HTTP response: status code, headers, and body } /* Update Jeer */ @PutMapping(&quot;/jeer/{id}&quot;) public ResponseEntity&lt;Jokes&gt; setJeer(@PathVariable long id) { Optional&lt;Jokes&gt; optional = repository.findById(id); if (optional.isPresent()) { // Good ID Jokes joke = optional.get(); joke.setBoohoo(joke.getBoohoo()+1); repository.save(joke); return new ResponseEntity&lt;&gt;(joke, HttpStatus.OK); } // Bad ID return new ResponseEntity&lt;&gt;(HttpStatus.BAD_REQUEST); } } . | import org.springframework.beans.factory.annotation.Autowired; package org.springframework.beans.factory.annotation does not exist . // Reaction function to likes or jeers user actions function reaction(type, put_url, elemID) { // fetch the API fetch(put_url, put_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&quot;PUT API response failure: &quot; + response.status) return; // api failure } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); // Likes or Jeers updated/incremented if (type === HAHA) // like data element document.getElementById(elemID).innerHTML = data.haha; // fetched haha data assigned to haha Document Object Model (DOM) else if (type === BOOHOO) // jeer data element document.getElementById(elemID).innerHTML = data.boohoo; // fetched boohoo data assigned to boohoo Document Object Model (DOM) else error(&quot;unknown type: &quot; + type); // should never occur }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + put_url); }); } . | function reaction(type, put_url, elemID) { &lt;identifier&gt; expected | function reaction(type, put_url, elemID) { &lt;identifier&gt; expected | function reaction(type, put_url, elemID) { &lt;identifier&gt; expected | .then(response =&gt; { illegal start of expression | .then(response =&gt; { illegal start of expression | if (response.status !== 200) { illegal start of expression | error(&#34;PUT API response failure: &#34; + response.status) &#39;;&#39; expected | response.json().then(data =&gt; { illegal start of expression | response.json().then(data =&gt; { illegal start of expression | if (type === HAHA) // like data element illegal start of expression | else if (type === BOOHOO) // jeer data element illegal start of expression | }) illegal start of expression | }) illegal start of expression | .catch(err =&gt; { &lt;identifier&gt; expected | .catch(err =&gt; { illegal start of expression | .catch(err =&gt; { illegal start of expression | .catch(err =&gt; { illegal start of expression | }); illegal start of expression | .catch(err =&gt; { | error(err + &#34; &#34; + put_url); | }); | | } reached end of file while parsing | } reached end of file while parsing .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/10/08/Databases.html",
            "relUrl": "/java/jupyter/2022/10/08/Databases.html",
            "date": " • Oct 8, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "TT 7 Project Approval",
            "content": "Part 1 Arrays and Images . Arrays and Images | . Part 2 API . Fetched and Backed API | formatted the api response body for a page on the team website | . Ticket Issue #7 .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/10/02/TT7.html",
            "relUrl": "/hacks/2022/10/02/TT7.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Images",
            "content": "Saving PNG to GIF . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . . Resized ASCII .txt File . changed for (int i = 0; i &lt; img.getHeight(); i++) to for (int i = 0; i &lt; img.getHeight(); i+=3) | . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } //chnaged i++ to i+=3 to shorten length of ASCII mona lisa (billmongan.com said 2 columns wide and 4 rows tall) for (int i = 0; i &lt; img.getHeight(); i+=3) { for (int j = 0; j &lt; img.getWidth(); j+=1) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 10497 100x87 images/tmp/pumpkin.png . . Grey Scale . Helpful Resource . The weighted method, also called the luminosity method, weighs red, green, and blue according to their wavelengths. | Can also just take the average of the three RGB values | . public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String greyFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.greyFile = this.outDir + name + &quot;.png&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; this.setStats(); } public void convertToGrey() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); // double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col.getGreen() * 0.11))); //The weighted method, also called the luminosity method, weighs red, green, and blue according to their wavelengths. //Can also just take the average of the three RGB values int r = (int) (col.getRed() * 0.299); int g = (int) (col.getGreen() * 0.587); int b = (int) (col.getBlue() * 0.114); Color greyScale = new Color( r + g + b, r + g + b, r + g + b); img.setRGB(j, i, greyScale.getRGB()); } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } //write image try{ File file = new File(this.greyFile); ImageIO.write(img, &quot;png&quot;, file); }catch(IOException e){ System.out.println(e); } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); // monaLisa.printStats(&quot;Original&quot;); // monaLisa.resize(33); // monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToGrey(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); // pumpkin.printStats(&quot;Original&quot;); // pumpkin.resize(33); // pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToGrey(); } } Pics.main(null); . . Red, Green, Blue Scale . Example below is specifically green scale. Set R and B value to zero, and keep G value at 1. | same logic applies to blue and red scale | . public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String greyFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.greyFile = this.outDir + name + &quot;.png&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; this.setStats(); } public void convertToGrey() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); // double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col.getGreen() * 0.11))); int r = (int) (col.getRed() * 0); int g = (int) (col.getGreen() ); int b = (int) (col.getBlue() * 0); Color greyScale = new Color( r, g, b); img.setRGB(j, i, greyScale.getRGB()); } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } //write image try{ File file = new File(this.greyFile); ImageIO.write(img, &quot;png&quot;, file); }catch(IOException e){ System.out.println(e); } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); // monaLisa.printStats(&quot;Original&quot;); // monaLisa.resize(33); // monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToGrey(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); // pumpkin.printStats(&quot;Original&quot;); // pumpkin.resize(33); // pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToGrey(); } } Pics.main(null); . . Color Scale Exploration . purple scale, only G value multiplied by zero, R and B values untouched. . public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String greyFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.greyFile = this.outDir + name + &quot;.png&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; this.setStats(); } public void convertToGrey() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); // double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col.getGreen() * 0.11))); int r = (int) (col.getRed() * 0.7); int g = (int) (col.getGreen() * 0); int b = (int) (col.getBlue() * 1); Color greyScale = new Color( r, g, b); img.setRGB(j, i, greyScale.getRGB()); } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } //write image try{ File file = new File(this.greyFile); ImageIO.write(img, &quot;png&quot;, file); }catch(IOException e){ System.out.println(e); } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); // monaLisa.printStats(&quot;Original&quot;); // monaLisa.resize(33); // monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToGrey(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); // pumpkin.printStats(&quot;Original&quot;); // pumpkin.resize(33); // pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToGrey(); } } Pics.main(null); . .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/30/Images.html",
            "relUrl": "/java/jupyter/2022/09/30/Images.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "API",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //RapidAPI Body System.out.println(response.body()); . {&#34;countries_stat&#34;:[{&#34;country_name&#34;:&#34;USA&#34;,&#34;cases&#34;:&#34;82,649,779&#34;,&#34;deaths&#34;:&#34;1,018,316&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;80,434,925&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1,465&#34;,&#34;active_cases&#34;:&#34;1,196,538&#34;,&#34;total_cases_per_1m_population&#34;:&#34;247,080&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,044&#34;,&#34;total_tests&#34;:&#34;1,000,275,726&#34;,&#34;tests_per_1m_population&#34;:&#34;2,990,303&#34;},{&#34;country_name&#34;:&#34;India&#34;,&#34;cases&#34;:&#34;43,057,545&#34;,&#34;deaths&#34;:&#34;522,193&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;42,519,479&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;698&#34;,&#34;active_cases&#34;:&#34;15,873&#34;,&#34;total_cases_per_1m_population&#34;:&#34;30,657&#34;,&#34;deaths_per_1m_population&#34;:&#34;372&#34;,&#34;total_tests&#34;:&#34;834,717,702&#34;,&#34;tests_per_1m_population&#34;:&#34;594,319&#34;},{&#34;country_name&#34;:&#34;Brazil&#34;,&#34;cases&#34;:&#34;30,345,654&#34;,&#34;deaths&#34;:&#34;662,663&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;29,364,400&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8,318&#34;,&#34;active_cases&#34;:&#34;318,591&#34;,&#34;total_cases_per_1m_population&#34;:&#34;140,954&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,078&#34;,&#34;total_tests&#34;:&#34;63,776,166&#34;,&#34;tests_per_1m_population&#34;:&#34;296,238&#34;},{&#34;country_name&#34;:&#34;France&#34;,&#34;cases&#34;:&#34;28,244,977&#34;,&#34;deaths&#34;:&#34;145,020&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;25,852,832&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1,677&#34;,&#34;active_cases&#34;:&#34;2,247,125&#34;,&#34;total_cases_per_1m_population&#34;:&#34;430,996&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,213&#34;,&#34;total_tests&#34;:&#34;266,484,045&#34;,&#34;tests_per_1m_population&#34;:&#34;4,066,333&#34;},{&#34;country_name&#34;:&#34;Germany&#34;,&#34;cases&#34;:&#34;24,109,433&#34;,&#34;deaths&#34;:&#34;134,624&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;21,243,000&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1,980&#34;,&#34;active_cases&#34;:&#34;2,731,809&#34;,&#34;total_cases_per_1m_population&#34;:&#34;286,106&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,598&#34;,&#34;total_tests&#34;:&#34;122,332,384&#34;,&#34;tests_per_1m_population&#34;:&#34;1,451,714&#34;},{&#34;country_name&#34;:&#34;UK&#34;,&#34;cases&#34;:&#34;21,933,206&#34;,&#34;deaths&#34;:&#34;173,352&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;20,782,350&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;339&#34;,&#34;active_cases&#34;:&#34;977,504&#34;,&#34;total_cases_per_1m_population&#34;:&#34;320,054&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,530&#34;,&#34;total_tests&#34;:&#34;514,985,782&#34;,&#34;tests_per_1m_population&#34;:&#34;7,514,777&#34;},{&#34;country_name&#34;:&#34;Russia&#34;,&#34;cases&#34;:&#34;18,137,137&#34;,&#34;deaths&#34;:&#34;374,902&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;17,474,628&#34;,&#34;new_deaths&#34;:&#34;168&#34;,&#34;new_cases&#34;:&#34;8,446&#34;,&#34;serious_critical&#34;:&#34;2,300&#34;,&#34;active_cases&#34;:&#34;287,607&#34;,&#34;total_cases_per_1m_population&#34;:&#34;124,187&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,567&#34;,&#34;total_tests&#34;:&#34;273,400,000&#34;,&#34;tests_per_1m_population&#34;:&#34;1,871,995&#34;},{&#34;country_name&#34;:&#34;S. Korea&#34;,&#34;cases&#34;:&#34;16,895,194&#34;,&#34;deaths&#34;:&#34;22,133&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;109&#34;,&#34;new_cases&#34;:&#34;64,725&#34;,&#34;serious_critical&#34;:&#34;726&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;329,028&#34;,&#34;deaths_per_1m_population&#34;:&#34;431&#34;,&#34;total_tests&#34;:&#34;15,804,065&#34;,&#34;tests_per_1m_population&#34;:&#34;307,778&#34;},{&#34;country_name&#34;:&#34;Italy&#34;,&#34;cases&#34;:&#34;16,079,209&#34;,&#34;deaths&#34;:&#34;162,609&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;14,684,371&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;409&#34;,&#34;active_cases&#34;:&#34;1,232,229&#34;,&#34;total_cases_per_1m_population&#34;:&#34;266,648&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,697&#34;,&#34;total_tests&#34;:&#34;211,365,630&#34;,&#34;tests_per_1m_population&#34;:&#34;3,505,156&#34;},{&#34;country_name&#34;:&#34;Turkey&#34;,&#34;cases&#34;:&#34;15,016,270&#34;,&#34;deaths&#34;:&#34;98,676&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;14,854,475&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;975&#34;,&#34;active_cases&#34;:&#34;63,119&#34;,&#34;total_cases_per_1m_population&#34;:&#34;174,654&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,148&#34;,&#34;total_tests&#34;:&#34;158,110,923&#34;,&#34;tests_per_1m_population&#34;:&#34;1,838,986&#34;},{&#34;country_name&#34;:&#34;Spain&#34;,&#34;cases&#34;:&#34;11,786,036&#34;,&#34;deaths&#34;:&#34;103,908&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,261,340&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;339&#34;,&#34;active_cases&#34;:&#34;420,788&#34;,&#34;total_cases_per_1m_population&#34;:&#34;251,906&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,221&#34;,&#34;total_tests&#34;:&#34;471,036,328&#34;,&#34;tests_per_1m_population&#34;:&#34;10,067,575&#34;},{&#34;country_name&#34;:&#34;Vietnam&#34;,&#34;cases&#34;:&#34;10,563,502&#34;,&#34;deaths&#34;:&#34;43,013&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,086,075&#34;,&#34;new_deaths&#34;:&#34;9&#34;,&#34;new_cases&#34;:&#34;8,813&#34;,&#34;serious_critical&#34;:&#34;612&#34;,&#34;active_cases&#34;:&#34;1,434,414&#34;,&#34;total_cases_per_1m_population&#34;:&#34;106,789&#34;,&#34;deaths_per_1m_population&#34;:&#34;435&#34;,&#34;total_tests&#34;:&#34;85,789,114&#34;,&#34;tests_per_1m_population&#34;:&#34;867,262&#34;},{&#34;country_name&#34;:&#34;Argentina&#34;,&#34;cases&#34;:&#34;9,060,923&#34;,&#34;deaths&#34;:&#34;128,344&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;8,895,999&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;412&#34;,&#34;active_cases&#34;:&#34;36,580&#34;,&#34;total_cases_per_1m_population&#34;:&#34;197,215&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,793&#34;,&#34;total_tests&#34;:&#34;35,716,069&#34;,&#34;tests_per_1m_population&#34;:&#34;777,376&#34;},{&#34;country_name&#34;:&#34;Netherlands&#34;,&#34;cases&#34;:&#34;8,035,603&#34;,&#34;deaths&#34;:&#34;22,206&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,643,520&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;94&#34;,&#34;active_cases&#34;:&#34;369,877&#34;,&#34;total_cases_per_1m_population&#34;:&#34;467,096&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,291&#34;,&#34;total_tests&#34;:&#34;21,107,399&#34;,&#34;tests_per_1m_population&#34;:&#34;1,226,938&#34;},{&#34;country_name&#34;:&#34;Japan&#34;,&#34;cases&#34;:&#34;7,621,562&#34;,&#34;deaths&#34;:&#34;29,284&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,135,403&#34;,&#34;new_deaths&#34;:&#34;27&#34;,&#34;new_cases&#34;:&#34;43,721&#34;,&#34;serious_critical&#34;:&#34;195&#34;,&#34;active_cases&#34;:&#34;456,875&#34;,&#34;total_cases_per_1m_population&#34;:&#34;60,596&#34;,&#34;deaths_per_1m_population&#34;:&#34;233&#34;,&#34;total_tests&#34;:&#34;46,690,473&#34;,&#34;tests_per_1m_population&#34;:&#34;371,215&#34;},{&#34;country_name&#34;:&#34;Iran&#34;,&#34;cases&#34;:&#34;7,216,040&#34;,&#34;deaths&#34;:&#34;140,975&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;6,966,954&#34;,&#34;new_deaths&#34;:&#34;13&#34;,&#34;new_cases&#34;:&#34;528&#34;,&#34;serious_critical&#34;:&#34;1,046&#34;,&#34;active_cases&#34;:&#34;108,111&#34;,&#34;total_cases_per_1m_population&#34;:&#34;83,972&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,641&#34;,&#34;total_tests&#34;:&#34;50,811,054&#34;,&#34;tests_per_1m_population&#34;:&#34;591,284&#34;},{&#34;country_name&#34;:&#34;Colombia&#34;,&#34;cases&#34;:&#34;6,091,094&#34;,&#34;deaths&#34;:&#34;139,771&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,924,433&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;342&#34;,&#34;active_cases&#34;:&#34;26,890&#34;,&#34;total_cases_per_1m_population&#34;:&#34;117,448&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,695&#34;,&#34;total_tests&#34;:&#34;34,355,022&#34;,&#34;tests_per_1m_population&#34;:&#34;662,433&#34;},{&#34;country_name&#34;:&#34;Indonesia&#34;,&#34;cases&#34;:&#34;6,043,768&#34;,&#34;deaths&#34;:&#34;156,067&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,868,251&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2,771&#34;,&#34;active_cases&#34;:&#34;19,450&#34;,&#34;total_cases_per_1m_population&#34;:&#34;21,682&#34;,&#34;deaths_per_1m_population&#34;:&#34;560&#34;,&#34;total_tests&#34;:&#34;94,877,499&#34;,&#34;tests_per_1m_population&#34;:&#34;340,374&#34;},{&#34;country_name&#34;:&#34;Poland&#34;,&#34;cases&#34;:&#34;5,991,197&#34;,&#34;deaths&#34;:&#34;115,948&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,334,375&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;344&#34;,&#34;serious_critical&#34;:&#34;1,588&#34;,&#34;active_cases&#34;:&#34;540,874&#34;,&#34;total_cases_per_1m_population&#34;:&#34;158,616&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,070&#34;,&#34;total_tests&#34;:&#34;36,027,053&#34;,&#34;tests_per_1m_population&#34;:&#34;953,808&#34;},{&#34;country_name&#34;:&#34;Mexico&#34;,&#34;cases&#34;:&#34;5,733,514&#34;,&#34;deaths&#34;:&#34;324,117&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,033,892&#34;,&#34;new_deaths&#34;:&#34;57&#34;,&#34;new_cases&#34;:&#34;802&#34;,&#34;serious_critical&#34;:&#34;4,798&#34;,&#34;active_cases&#34;:&#34;375,505&#34;,&#34;total_cases_per_1m_population&#34;:&#34;43,641&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,467&#34;,&#34;total_tests&#34;:&#34;15,762,889&#34;,&#34;tests_per_1m_population&#34;:&#34;119,981&#34;},{&#34;country_name&#34;:&#34;Australia&#34;,&#34;cases&#34;:&#34;5,689,377&#34;,&#34;deaths&#34;:&#34;6,991&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,274,197&#34;,&#34;new_deaths&#34;:&#34;21&#34;,&#34;new_cases&#34;:&#34;34,769&#34;,&#34;serious_critical&#34;:&#34;135&#34;,&#34;active_cases&#34;:&#34;408,189&#34;,&#34;total_cases_per_1m_population&#34;:&#34;218,537&#34;,&#34;deaths_per_1m_population&#34;:&#34;269&#34;,&#34;total_tests&#34;:&#34;68,845,476&#34;,&#34;tests_per_1m_population&#34;:&#34;2,644,452&#34;},{&#34;country_name&#34;:&#34;Ukraine&#34;,&#34;cases&#34;:&#34;4,997,224&#34;,&#34;deaths&#34;:&#34;108,306&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;177&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;115,517&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,504&#34;,&#34;total_tests&#34;:&#34;19,521,252&#34;,&#34;tests_per_1m_population&#34;:&#34;451,259&#34;},{&#34;country_name&#34;:&#34;Malaysia&#34;,&#34;cases&#34;:&#34;4,427,067&#34;,&#34;deaths&#34;:&#34;35,491&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;4,310,599&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;89&#34;,&#34;active_cases&#34;:&#34;80,977&#34;,&#34;total_cases_per_1m_population&#34;:&#34;133,690&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,072&#34;,&#34;total_tests&#34;:&#34;58,332,799&#34;,&#34;tests_per_1m_population&#34;:&#34;1,761,549&#34;},{&#34;country_name&#34;:&#34;Thailand&#34;,&#34;cases&#34;:&#34;4,165,874&#34;,&#34;deaths&#34;:&#34;27,778&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,954,945&#34;,&#34;new_deaths&#34;:&#34;126&#34;,&#34;new_cases&#34;:&#34;17,784&#34;,&#34;serious_critical&#34;:&#34;1,496&#34;,&#34;active_cases&#34;:&#34;183,151&#34;,&#34;total_cases_per_1m_population&#34;:&#34;59,414&#34;,&#34;deaths_per_1m_population&#34;:&#34;396&#34;,&#34;total_tests&#34;:&#34;17,270,775&#34;,&#34;tests_per_1m_population&#34;:&#34;246,317&#34;},{&#34;country_name&#34;:&#34;Austria&#34;,&#34;cases&#34;:&#34;4,104,859&#34;,&#34;deaths&#34;:&#34;18,047&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,989,860&#34;,&#34;new_deaths&#34;:&#34;12&#34;,&#34;new_cases&#34;:&#34;5,810&#34;,&#34;serious_critical&#34;:&#34;121&#34;,&#34;active_cases&#34;:&#34;96,952&#34;,&#34;total_cases_per_1m_population&#34;:&#34;451,125&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,983&#34;,&#34;total_tests&#34;:&#34;181,825,734&#34;,&#34;tests_per_1m_population&#34;:&#34;19,982,688&#34;},{&#34;country_name&#34;:&#34;Israel&#34;,&#34;cases&#34;:&#34;4,054,342&#34;,&#34;deaths&#34;:&#34;10,658&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;4,009,152&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;220&#34;,&#34;active_cases&#34;:&#34;34,532&#34;,&#34;total_cases_per_1m_population&#34;:&#34;434,735&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,143&#34;,&#34;total_tests&#34;:&#34;41,373,364&#34;,&#34;tests_per_1m_population&#34;:&#34;4,436,346&#34;},{&#34;country_name&#34;:&#34;Belgium&#34;,&#34;cases&#34;:&#34;4,015,791&#34;,&#34;deaths&#34;:&#34;31,319&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,726,457&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;169&#34;,&#34;active_cases&#34;:&#34;258,015&#34;,&#34;total_cases_per_1m_population&#34;:&#34;343,798&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,681&#34;,&#34;total_tests&#34;:&#34;33,456,470&#34;,&#34;tests_per_1m_population&#34;:&#34;2,864,259&#34;},{&#34;country_name&#34;:&#34;Czechia&#34;,&#34;cases&#34;:&#34;3,895,544&#34;,&#34;deaths&#34;:&#34;40,081&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,838,099&#34;,&#34;new_deaths&#34;:&#34;5&#34;,&#34;new_cases&#34;:&#34;911&#34;,&#34;serious_critical&#34;:&#34;43&#34;,&#34;active_cases&#34;:&#34;17,364&#34;,&#34;total_cases_per_1m_population&#34;:&#34;362,550&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,730&#34;,&#34;total_tests&#34;:&#34;55,117,064&#34;,&#34;tests_per_1m_population&#34;:&#34;5,129,629&#34;},{&#34;country_name&#34;:&#34;Portugal&#34;,&#34;cases&#34;:&#34;3,791,744&#34;,&#34;deaths&#34;:&#34;22,162&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;61&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;373,827&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,185&#34;,&#34;total_tests&#34;:&#34;40,748,372&#34;,&#34;tests_per_1m_population&#34;:&#34;4,017,371&#34;},{&#34;country_name&#34;:&#34;South Africa&#34;,&#34;cases&#34;:&#34;3,759,689&#34;,&#34;deaths&#34;:&#34;100,298&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,632,572&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;175&#34;,&#34;active_cases&#34;:&#34;26,819&#34;,&#34;total_cases_per_1m_population&#34;:&#34;61,981&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,653&#34;,&#34;total_tests&#34;:&#34;24,313,334&#34;,&#34;tests_per_1m_population&#34;:&#34;400,824&#34;},{&#34;country_name&#34;:&#34;Canada&#34;,&#34;cases&#34;:&#34;3,695,585&#34;,&#34;deaths&#34;:&#34;38,777&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,426,082&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;426&#34;,&#34;active_cases&#34;:&#34;230,726&#34;,&#34;total_cases_per_1m_population&#34;:&#34;96,391&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,011&#34;,&#34;total_tests&#34;:&#34;60,536,359&#34;,&#34;tests_per_1m_population&#34;:&#34;1,578,955&#34;},{&#34;country_name&#34;:&#34;Philippines&#34;,&#34;cases&#34;:&#34;3,684,500&#34;,&#34;deaths&#34;:&#34;60,182&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,610,658&#34;,&#34;new_deaths&#34;:&#34;3&#34;,&#34;new_cases&#34;:&#34;205&#34;,&#34;serious_critical&#34;:&#34;289&#34;,&#34;active_cases&#34;:&#34;13,660&#34;,&#34;total_cases_per_1m_population&#34;:&#34;32,835&#34;,&#34;deaths_per_1m_population&#34;:&#34;536&#34;,&#34;total_tests&#34;:&#34;29,427,586&#34;,&#34;tests_per_1m_population&#34;:&#34;262,246&#34;},{&#34;country_name&#34;:&#34;Switzerland&#34;,&#34;cases&#34;:&#34;3,579,867&#34;,&#34;deaths&#34;:&#34;13,816&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,378,507&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;90&#34;,&#34;active_cases&#34;:&#34;187,544&#34;,&#34;total_cases_per_1m_population&#34;:&#34;408,247&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,576&#34;,&#34;total_tests&#34;:&#34;20,666,182&#34;,&#34;tests_per_1m_population&#34;:&#34;2,356,766&#34;},{&#34;country_name&#34;:&#34;Peru&#34;,&#34;cases&#34;:&#34;3,559,343&#34;,&#34;deaths&#34;:&#34;212,724&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;356&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;105,303&#34;,&#34;deaths_per_1m_population&#34;:&#34;6,293&#34;,&#34;total_tests&#34;:&#34;29,592,270&#34;,&#34;tests_per_1m_population&#34;:&#34;875,489&#34;},{&#34;country_name&#34;:&#34;Chile&#34;,&#34;cases&#34;:&#34;3,544,463&#34;,&#34;deaths&#34;:&#34;57,375&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,368,772&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;286&#34;,&#34;active_cases&#34;:&#34;118,316&#34;,&#34;total_cases_per_1m_population&#34;:&#34;182,588&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,956&#34;,&#34;total_tests&#34;:&#34;36,711,724&#34;,&#34;tests_per_1m_population&#34;:&#34;1,891,147&#34;},{&#34;country_name&#34;:&#34;Greece&#34;,&#34;cases&#34;:&#34;3,277,557&#34;,&#34;deaths&#34;:&#34;28,867&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,151,717&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;277&#34;,&#34;active_cases&#34;:&#34;96,973&#34;,&#34;total_cases_per_1m_population&#34;:&#34;317,250&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,794&#34;,&#34;total_tests&#34;:&#34;78,872,546&#34;,&#34;tests_per_1m_population&#34;:&#34;7,634,431&#34;},{&#34;country_name&#34;:&#34;Denmark&#34;,&#34;cases&#34;:&#34;2,959,040&#34;,&#34;deaths&#34;:&#34;6,072&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,929,091&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;15&#34;,&#34;active_cases&#34;:&#34;23,877&#34;,&#34;total_cases_per_1m_population&#34;:&#34;507,639&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,042&#34;,&#34;total_tests&#34;:&#34;127,141,200&#34;,&#34;tests_per_1m_population&#34;:&#34;21,811,751&#34;},{&#34;country_name&#34;:&#34;Romania&#34;,&#34;cases&#34;:&#34;2,888,318&#34;,&#34;deaths&#34;:&#34;65,427&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,606,660&#34;,&#34;new_deaths&#34;:&#34;6&#34;,&#34;new_cases&#34;:&#34;494&#34;,&#34;serious_critical&#34;:&#34;216&#34;,&#34;active_cases&#34;:&#34;216,231&#34;,&#34;total_cases_per_1m_population&#34;:&#34;151,968&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,442&#34;,&#34;total_tests&#34;:&#34;22,594,702&#34;,&#34;tests_per_1m_population&#34;:&#34;1,188,815&#34;},{&#34;country_name&#34;:&#34;Sweden&#34;,&#34;cases&#34;:&#34;2,498,388&#34;,&#34;deaths&#34;:&#34;18,656&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,464,421&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;19&#34;,&#34;active_cases&#34;:&#34;15,311&#34;,&#34;total_cases_per_1m_population&#34;:&#34;244,630&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,827&#34;,&#34;total_tests&#34;:&#34;18,493,218&#34;,&#34;tests_per_1m_population&#34;:&#34;1,810,763&#34;},{&#34;country_name&#34;:&#34;Iraq&#34;,&#34;cases&#34;:&#34;2,324,141&#34;,&#34;deaths&#34;:&#34;25,204&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,295,947&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;20&#34;,&#34;active_cases&#34;:&#34;2,990&#34;,&#34;total_cases_per_1m_population&#34;:&#34;55,534&#34;,&#34;deaths_per_1m_population&#34;:&#34;602&#34;,&#34;total_tests&#34;:&#34;18,450,939&#34;,&#34;tests_per_1m_population&#34;:&#34;440,871&#34;},{&#34;country_name&#34;:&#34;Serbia&#34;,&#34;cases&#34;:&#34;2,001,144&#34;,&#34;deaths&#34;:&#34;15,953&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,967,786&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;25&#34;,&#34;active_cases&#34;:&#34;17,405&#34;,&#34;total_cases_per_1m_population&#34;:&#34;230,710&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,839&#34;,&#34;total_tests&#34;:&#34;9,427,662&#34;,&#34;tests_per_1m_population&#34;:&#34;1,086,907&#34;},{&#34;country_name&#34;:&#34;Bangladesh&#34;,&#34;cases&#34;:&#34;1,952,532&#34;,&#34;deaths&#34;:&#34;29,127&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,893,131&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1,297&#34;,&#34;active_cases&#34;:&#34;30,274&#34;,&#34;total_cases_per_1m_population&#34;:&#34;11,646&#34;,&#34;deaths_per_1m_population&#34;:&#34;174&#34;,&#34;total_tests&#34;:&#34;13,956,056&#34;,&#34;tests_per_1m_population&#34;:&#34;83,245&#34;},{&#34;country_name&#34;:&#34;Hungary&#34;,&#34;cases&#34;:&#34;1,890,953&#34;,&#34;deaths&#34;:&#34;46,048&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,776,617&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;45&#34;,&#34;active_cases&#34;:&#34;68,288&#34;,&#34;total_cases_per_1m_population&#34;:&#34;196,645&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,789&#34;,&#34;total_tests&#34;:&#34;11,295,119&#34;,&#34;tests_per_1m_population&#34;:&#34;1,174,608&#34;},{&#34;country_name&#34;:&#34;Slovakia&#34;,&#34;cases&#34;:&#34;1,774,808&#34;,&#34;deaths&#34;:&#34;19,839&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,730,712&#34;,&#34;new_deaths&#34;:&#34;10&#34;,&#34;new_cases&#34;:&#34;1,155&#34;,&#34;serious_critical&#34;:&#34;88&#34;,&#34;active_cases&#34;:&#34;24,257&#34;,&#34;total_cases_per_1m_population&#34;:&#34;324,794&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,631&#34;,&#34;total_tests&#34;:&#34;7,057,901&#34;,&#34;tests_per_1m_population&#34;:&#34;1,291,611&#34;},{&#34;country_name&#34;:&#34;Jordan&#34;,&#34;cases&#34;:&#34;1,694,216&#34;,&#34;deaths&#34;:&#34;14,048&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,678,941&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;124&#34;,&#34;active_cases&#34;:&#34;1,227&#34;,&#34;total_cases_per_1m_population&#34;:&#34;163,125&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,353&#34;,&#34;total_tests&#34;:&#34;16,670,254&#34;,&#34;tests_per_1m_population&#34;:&#34;1,605,074&#34;},{&#34;country_name&#34;:&#34;Georgia&#34;,&#34;cases&#34;:&#34;1,654,255&#34;,&#34;deaths&#34;:&#34;16,800&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,635,791&#34;,&#34;new_deaths&#34;:&#34;3&#34;,&#34;new_cases&#34;:&#34;92&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,664&#34;,&#34;total_cases_per_1m_population&#34;:&#34;416,129&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,226&#34;,&#34;total_tests&#34;:&#34;16,807,205&#34;,&#34;tests_per_1m_population&#34;:&#34;4,227,861&#34;},{&#34;country_name&#34;:&#34;Pakistan&#34;,&#34;cases&#34;:&#34;1,527,856&#34;,&#34;deaths&#34;:&#34;30,369&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,493,998&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;105&#34;,&#34;serious_critical&#34;:&#34;186&#34;,&#34;active_cases&#34;:&#34;3,489&#34;,&#34;total_cases_per_1m_population&#34;:&#34;6,683&#34;,&#34;deaths_per_1m_population&#34;:&#34;133&#34;,&#34;total_tests&#34;:&#34;28,048,307&#34;,&#34;tests_per_1m_population&#34;:&#34;122,679&#34;},{&#34;country_name&#34;:&#34;Ireland&#34;,&#34;cases&#34;:&#34;1,509,536&#34;,&#34;deaths&#34;:&#34;6,996&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,415,949&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;41&#34;,&#34;active_cases&#34;:&#34;86,591&#34;,&#34;total_cases_per_1m_population&#34;:&#34;299,669&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,389&#34;,&#34;total_tests&#34;:&#34;12,016,948&#34;,&#34;tests_per_1m_population&#34;:&#34;2,385,571&#34;},{&#34;country_name&#34;:&#34;Norway&#34;,&#34;cases&#34;:&#34;1,423,509&#34;,&#34;deaths&#34;:&#34;2,871&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;20&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;258,925&#34;,&#34;deaths_per_1m_population&#34;:&#34;522&#34;,&#34;total_tests&#34;:&#34;11,002,430&#34;,&#34;tests_per_1m_population&#34;:&#34;2,001,256&#34;},{&#34;country_name&#34;:&#34;Kazakhstan&#34;,&#34;cases&#34;:&#34;1,305,457&#34;,&#34;deaths&#34;:&#34;13,660&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,290,988&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;10&#34;,&#34;serious_critical&#34;:&#34;24&#34;,&#34;active_cases&#34;:&#34;809&#34;,&#34;total_cases_per_1m_population&#34;:&#34;68,056&#34;,&#34;deaths_per_1m_population&#34;:&#34;712&#34;,&#34;total_tests&#34;:&#34;11,575,012&#34;,&#34;tests_per_1m_population&#34;:&#34;603,428&#34;},{&#34;country_name&#34;:&#34;Hong Kong&#34;,&#34;cases&#34;:&#34;1,201,431&#34;,&#34;deaths&#34;:&#34;9,236&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;115&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;157,942&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,214&#34;,&#34;total_tests&#34;:&#34;44,972,952&#34;,&#34;tests_per_1m_population&#34;:&#34;5,912,223&#34;},{&#34;country_name&#34;:&#34;Singapore&#34;,&#34;cases&#34;:&#34;1,180,124&#34;,&#34;deaths&#34;:&#34;1,325&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,109,387&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;9&#34;,&#34;active_cases&#34;:&#34;69,412&#34;,&#34;total_cases_per_1m_population&#34;:&#34;198,895&#34;,&#34;deaths_per_1m_population&#34;:&#34;223&#34;,&#34;total_tests&#34;:&#34;23,712,995&#34;,&#34;tests_per_1m_population&#34;:&#34;3,996,529&#34;},{&#34;country_name&#34;:&#34;Morocco&#34;,&#34;cases&#34;:&#34;1,164,670&#34;,&#34;deaths&#34;:&#34;16,065&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,148,154&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;293&#34;,&#34;active_cases&#34;:&#34;451&#34;,&#34;total_cases_per_1m_population&#34;:&#34;30,893&#34;,&#34;deaths_per_1m_population&#34;:&#34;426&#34;,&#34;total_tests&#34;:&#34;11,237,010&#34;,&#34;tests_per_1m_population&#34;:&#34;298,062&#34;},{&#34;country_name&#34;:&#34;Bulgaria&#34;,&#34;cases&#34;:&#34;1,152,892&#34;,&#34;deaths&#34;:&#34;36,849&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;959,542&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;105&#34;,&#34;active_cases&#34;:&#34;156,501&#34;,&#34;total_cases_per_1m_population&#34;:&#34;168,206&#34;,&#34;deaths_per_1m_population&#34;:&#34;5,376&#34;,&#34;total_tests&#34;:&#34;9,797,011&#34;,&#34;tests_per_1m_population&#34;:&#34;1,429,377&#34;},{&#34;country_name&#34;:&#34;Croatia&#34;,&#34;cases&#34;:&#34;1,117,175&#34;,&#34;deaths&#34;:&#34;15,778&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,096,829&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;22&#34;,&#34;active_cases&#34;:&#34;4,568&#34;,&#34;total_cases_per_1m_population&#34;:&#34;275,195&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,887&#34;,&#34;total_tests&#34;:&#34;4,762,146&#34;,&#34;tests_per_1m_population&#34;:&#34;1,173,065&#34;},{&#34;country_name&#34;:&#34;Cuba&#34;,&#34;cases&#34;:&#34;1,101,486&#34;,&#34;deaths&#34;:&#34;8,523&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,091,603&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;23&#34;,&#34;active_cases&#34;:&#34;1,360&#34;,&#34;total_cases_per_1m_population&#34;:&#34;97,355&#34;,&#34;deaths_per_1m_population&#34;:&#34;753&#34;,&#34;total_tests&#34;:&#34;12,920,253&#34;,&#34;tests_per_1m_population&#34;:&#34;1,141,957&#34;},{&#34;country_name&#34;:&#34;Lebanon&#34;,&#34;cases&#34;:&#34;1,096,320&#34;,&#34;deaths&#34;:&#34;10,374&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,079,455&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;186&#34;,&#34;active_cases&#34;:&#34;6,491&#34;,&#34;total_cases_per_1m_population&#34;:&#34;161,931&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,532&#34;,&#34;total_tests&#34;:&#34;4,795,578&#34;,&#34;tests_per_1m_population&#34;:&#34;708,328&#34;},{&#34;country_name&#34;:&#34;Lithuania&#34;,&#34;cases&#34;:&#34;1,054,618&#34;,&#34;deaths&#34;:&#34;9,063&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,016,510&#34;,&#34;new_deaths&#34;:&#34;9&#34;,&#34;new_cases&#34;:&#34;427&#34;,&#34;serious_critical&#34;:&#34;31&#34;,&#34;active_cases&#34;:&#34;29,045&#34;,&#34;total_cases_per_1m_population&#34;:&#34;397,407&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,415&#34;,&#34;total_tests&#34;:&#34;8,217,113&#34;,&#34;tests_per_1m_population&#34;:&#34;3,096,414&#34;},{&#34;country_name&#34;:&#34;Tunisia&#34;,&#34;cases&#34;:&#34;1,039,532&#34;,&#34;deaths&#34;:&#34;28,533&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;29&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;86,327&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,369&#34;,&#34;total_tests&#34;:&#34;4,563,397&#34;,&#34;tests_per_1m_population&#34;:&#34;378,962&#34;},{&#34;country_name&#34;:&#34;Slovenia&#34;,&#34;cases&#34;:&#34;1,003,970&#34;,&#34;deaths&#34;:&#34;6,576&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;980,501&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;30&#34;,&#34;active_cases&#34;:&#34;16,893&#34;,&#34;total_cases_per_1m_population&#34;:&#34;482,805&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,162&#34;,&#34;total_tests&#34;:&#34;2,640,107&#34;,&#34;tests_per_1m_population&#34;:&#34;1,269,615&#34;},{&#34;country_name&#34;:&#34;Finland&#34;,&#34;cases&#34;:&#34;1,000,472&#34;,&#34;deaths&#34;:&#34;3,638&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;46,000&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;31&#34;,&#34;active_cases&#34;:&#34;950,834&#34;,&#34;total_cases_per_1m_population&#34;:&#34;180,062&#34;,&#34;deaths_per_1m_population&#34;:&#34;655&#34;,&#34;total_tests&#34;:&#34;10,644,579&#34;,&#34;tests_per_1m_population&#34;:&#34;1,915,782&#34;},{&#34;country_name&#34;:&#34;Nepal&#34;,&#34;cases&#34;:&#34;978,743&#34;,&#34;deaths&#34;:&#34;11,951&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;966,523&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;11&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;269&#34;,&#34;total_cases_per_1m_population&#34;:&#34;32,535&#34;,&#34;deaths_per_1m_population&#34;:&#34;397&#34;,&#34;total_tests&#34;:&#34;5,616,752&#34;,&#34;tests_per_1m_population&#34;:&#34;186,711&#34;},{&#34;country_name&#34;:&#34;Belarus&#34;,&#34;cases&#34;:&#34;977,434&#34;,&#34;deaths&#34;:&#34;6,922&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;928,536&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;41,976&#34;,&#34;total_cases_per_1m_population&#34;:&#34;103,501&#34;,&#34;deaths_per_1m_population&#34;:&#34;733&#34;,&#34;total_tests&#34;:&#34;13,092,771&#34;,&#34;tests_per_1m_population&#34;:&#34;1,386,401&#34;},{&#34;country_name&#34;:&#34;Bolivia&#34;,&#34;cases&#34;:&#34;904,377&#34;,&#34;deaths&#34;:&#34;21,908&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;855,123&#34;,&#34;new_deaths&#34;:&#34;1&#34;,&#34;new_cases&#34;:&#34;83&#34;,&#34;serious_critical&#34;:&#34;220&#34;,&#34;active_cases&#34;:&#34;27,346&#34;,&#34;total_cases_per_1m_population&#34;:&#34;75,614&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,832&#34;,&#34;total_tests&#34;:&#34;2,693,845&#34;,&#34;tests_per_1m_population&#34;:&#34;225,230&#34;},{&#34;country_name&#34;:&#34;UAE&#34;,&#34;cases&#34;:&#34;897,136&#34;,&#34;deaths&#34;:&#34;2,302&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;879,787&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;244&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;15,047&#34;,&#34;total_cases_per_1m_population&#34;:&#34;88,772&#34;,&#34;deaths_per_1m_population&#34;:&#34;228&#34;,&#34;total_tests&#34;:&#34;154,420,740&#34;,&#34;tests_per_1m_population&#34;:&#34;15,279,961&#34;},{&#34;country_name&#34;:&#34;Uruguay&#34;,&#34;cases&#34;:&#34;895,775&#34;,&#34;deaths&#34;:&#34;7,197&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;886,654&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;18&#34;,&#34;active_cases&#34;:&#34;1,924&#34;,&#34;total_cases_per_1m_population&#34;:&#34;256,268&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,059&#34;,&#34;total_tests&#34;:&#34;6,091,188&#34;,&#34;tests_per_1m_population&#34;:&#34;1,742,599&#34;},{&#34;country_name&#34;:&#34;New Zealand&#34;,&#34;cases&#34;:&#34;884,289&#34;,&#34;deaths&#34;:&#34;636&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;824,272&#34;,&#34;new_deaths&#34;:&#34;9&#34;,&#34;new_cases&#34;:&#34;5,714&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;59,381&#34;,&#34;total_cases_per_1m_population&#34;:&#34;176,784&#34;,&#34;deaths_per_1m_population&#34;:&#34;127&#34;,&#34;total_tests&#34;:&#34;6,983,031&#34;,&#34;tests_per_1m_population&#34;:&#34;1,396,020&#34;},{&#34;country_name&#34;:&#34;Ecuador&#34;,&#34;cases&#34;:&#34;868,053&#34;,&#34;deaths&#34;:&#34;35,581&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;759&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;47,888&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,963&#34;,&#34;total_tests&#34;:&#34;2,470,170&#34;,&#34;tests_per_1m_population&#34;:&#34;136,273&#34;},{&#34;country_name&#34;:&#34;Costa Rica&#34;,&#34;cases&#34;:&#34;847,784&#34;,&#34;deaths&#34;:&#34;8,383&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;829,515&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;43&#34;,&#34;active_cases&#34;:&#34;9,886&#34;,&#34;total_cases_per_1m_population&#34;:&#34;163,725&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,619&#34;,&#34;total_tests&#34;:&#34;4,240,743&#34;,&#34;tests_per_1m_population&#34;:&#34;818,979&#34;},{&#34;country_name&#34;:&#34;Guatemala&#34;,&#34;cases&#34;:&#34;841,341&#34;,&#34;deaths&#34;:&#34;17,496&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;821,185&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;2,660&#34;,&#34;total_cases_per_1m_population&#34;:&#34;45,444&#34;,&#34;deaths_per_1m_population&#34;:&#34;945&#34;,&#34;total_tests&#34;:&#34;4,402,305&#34;,&#34;tests_per_1m_population&#34;:&#34;237,787&#34;},{&#34;country_name&#34;:&#34;Latvia&#34;,&#34;cases&#34;:&#34;817,316&#34;,&#34;deaths&#34;:&#34;5,743&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;803,135&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;322&#34;,&#34;serious_critical&#34;:&#34;9&#34;,&#34;active_cases&#34;:&#34;8,438&#34;,&#34;total_cases_per_1m_population&#34;:&#34;442,135&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,107&#34;,&#34;total_tests&#34;:&#34;7,154,016&#34;,&#34;tests_per_1m_population&#34;:&#34;3,870,035&#34;},{&#34;country_name&#34;:&#34;Azerbaijan&#34;,&#34;cases&#34;:&#34;792,476&#34;,&#34;deaths&#34;:&#34;9,707&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;782,634&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;135&#34;,&#34;total_cases_per_1m_population&#34;:&#34;76,908&#34;,&#34;deaths_per_1m_population&#34;:&#34;942&#34;,&#34;total_tests&#34;:&#34;6,792,132&#34;,&#34;tests_per_1m_population&#34;:&#34;659,165&#34;},{&#34;country_name&#34;:&#34;Panama&#34;,&#34;cases&#34;:&#34;771,486&#34;,&#34;deaths&#34;:&#34;8,182&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;759,832&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;3,472&#34;,&#34;total_cases_per_1m_population&#34;:&#34;173,862&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,844&#34;,&#34;total_tests&#34;:&#34;5,820,472&#34;,&#34;tests_per_1m_population&#34;:&#34;1,311,699&#34;},{&#34;country_name&#34;:&#34;Saudi Arabia&#34;,&#34;cases&#34;:&#34;753,332&#34;,&#34;deaths&#34;:&#34;9,076&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;740,467&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;45&#34;,&#34;active_cases&#34;:&#34;3,789&#34;,&#34;total_cases_per_1m_population&#34;:&#34;21,047&#34;,&#34;deaths_per_1m_population&#34;:&#34;254&#34;,&#34;total_tests&#34;:&#34;41,817,866&#34;,&#34;tests_per_1m_population&#34;:&#34;1,168,345&#34;},{&#34;country_name&#34;:&#34;Sri Lanka&#34;,&#34;cases&#34;:&#34;663,131&#34;,&#34;deaths&#34;:&#34;16,502&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;642,574&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;4,055&#34;,&#34;total_cases_per_1m_population&#34;:&#34;30,736&#34;,&#34;deaths_per_1m_population&#34;:&#34;765&#34;,&#34;total_tests&#34;:&#34;6,486,117&#34;,&#34;tests_per_1m_population&#34;:&#34;300,627&#34;},{&#34;country_name&#34;:&#34;Paraguay&#34;,&#34;cases&#34;:&#34;649,034&#34;,&#34;deaths&#34;:&#34;18,795&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;624,673&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;5,566&#34;,&#34;total_cases_per_1m_population&#34;:&#34;89,022&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,578&#34;,&#34;total_tests&#34;:&#34;2,623,300&#34;,&#34;tests_per_1m_population&#34;:&#34;359,816&#34;},{&#34;country_name&#34;:&#34;Kuwait&#34;,&#34;cases&#34;:&#34;631,294&#34;,&#34;deaths&#34;:&#34;2,555&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;627,899&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;840&#34;,&#34;total_cases_per_1m_population&#34;:&#34;143,981&#34;,&#34;deaths_per_1m_population&#34;:&#34;583&#34;,&#34;total_tests&#34;:&#34;7,999,656&#34;,&#34;tests_per_1m_population&#34;:&#34;1,824,506&#34;},{&#34;country_name&#34;:&#34;Myanmar&#34;,&#34;cases&#34;:&#34;612,733&#34;,&#34;deaths&#34;:&#34;19,434&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;591,609&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,690&#34;,&#34;total_cases_per_1m_population&#34;:&#34;11,127&#34;,&#34;deaths_per_1m_population&#34;:&#34;353&#34;,&#34;total_tests&#34;:&#34;7,891,077&#34;,&#34;tests_per_1m_population&#34;:&#34;143,296&#34;},{&#34;country_name&#34;:&#34;Palestine&#34;,&#34;cases&#34;:&#34;581,816&#34;,&#34;deaths&#34;:&#34;5,353&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;575,899&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;17&#34;,&#34;active_cases&#34;:&#34;564&#34;,&#34;total_cases_per_1m_population&#34;:&#34;109,459&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,007&#34;,&#34;total_tests&#34;:&#34;3,078,533&#34;,&#34;tests_per_1m_population&#34;:&#34;579,175&#34;},{&#34;country_name&#34;:&#34;Dominican Republic&#34;,&#34;cases&#34;:&#34;578,954&#34;,&#34;deaths&#34;:&#34;4,376&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;574,297&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;16&#34;,&#34;active_cases&#34;:&#34;281&#34;,&#34;total_cases_per_1m_population&#34;:&#34;52,421&#34;,&#34;deaths_per_1m_population&#34;:&#34;396&#34;,&#34;total_tests&#34;:&#34;3,261,060&#34;,&#34;tests_per_1m_population&#34;:&#34;295,272&#34;},{&#34;country_name&#34;:&#34;Estonia&#34;,&#34;cases&#34;:&#34;570,257&#34;,&#34;deaths&#34;:&#34;2,531&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;507,474&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;181&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;60,252&#34;,&#34;total_cases_per_1m_population&#34;:&#34;429,364&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,906&#34;,&#34;total_tests&#34;:&#34;3,311,935&#34;,&#34;tests_per_1m_population&#34;:&#34;2,493,655&#34;},{&#34;country_name&#34;:&#34;Bahrain&#34;,&#34;cases&#34;:&#34;565,830&#34;,&#34;deaths&#34;:&#34;1,475&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;560,795&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;3,560&#34;,&#34;total_cases_per_1m_population&#34;:&#34;312,916&#34;,&#34;deaths_per_1m_population&#34;:&#34;816&#34;,&#34;total_tests&#34;:&#34;9,695,962&#34;,&#34;tests_per_1m_population&#34;:&#34;5,362,081&#34;},{&#34;country_name&#34;:&#34;Venezuela&#34;,&#34;cases&#34;:&#34;522,121&#34;,&#34;deaths&#34;:&#34;5,705&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;515,305&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;230&#34;,&#34;active_cases&#34;:&#34;1,111&#34;,&#34;total_cases_per_1m_population&#34;:&#34;18,456&#34;,&#34;deaths_per_1m_population&#34;:&#34;202&#34;,&#34;total_tests&#34;:&#34;3,359,014&#34;,&#34;tests_per_1m_population&#34;:&#34;118,733&#34;},{&#34;country_name&#34;:&#34;Moldova&#34;,&#34;cases&#34;:&#34;516,986&#34;,&#34;deaths&#34;:&#34;11,489&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;504,142&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;49&#34;,&#34;active_cases&#34;:&#34;1,355&#34;,&#34;total_cases_per_1m_population&#34;:&#34;128,698&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,860&#34;,&#34;total_tests&#34;:&#34;3,216,305&#34;,&#34;tests_per_1m_population&#34;:&#34;800,665&#34;},{&#34;country_name&#34;:&#34;Egypt&#34;,&#34;cases&#34;:&#34;515,645&#34;,&#34;deaths&#34;:&#34;24,613&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;442,182&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;122&#34;,&#34;active_cases&#34;:&#34;48,850&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,873&#34;,&#34;deaths_per_1m_population&#34;:&#34;233&#34;,&#34;total_tests&#34;:&#34;3,693,367&#34;,&#34;tests_per_1m_population&#34;:&#34;34,903&#34;},{&#34;country_name&#34;:&#34;Libya&#34;,&#34;cases&#34;:&#34;501,862&#34;,&#34;deaths&#34;:&#34;6,429&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;490,900&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;101&#34;,&#34;active_cases&#34;:&#34;4,533&#34;,&#34;total_cases_per_1m_population&#34;:&#34;71,288&#34;,&#34;deaths_per_1m_population&#34;:&#34;913&#34;,&#34;total_tests&#34;:&#34;2,476,960&#34;,&#34;tests_per_1m_population&#34;:&#34;351,844&#34;},{&#34;country_name&#34;:&#34;Cyprus&#34;,&#34;cases&#34;:&#34;470,481&#34;,&#34;deaths&#34;:&#34;1,011&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;124,370&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;60&#34;,&#34;active_cases&#34;:&#34;345,100&#34;,&#34;total_cases_per_1m_population&#34;:&#34;384,623&#34;,&#34;deaths_per_1m_population&#34;:&#34;827&#34;,&#34;total_tests&#34;:&#34;9,477,138&#34;,&#34;tests_per_1m_population&#34;:&#34;7,747,665&#34;},{&#34;country_name&#34;:&#34;Ethiopia&#34;,&#34;cases&#34;:&#34;470,417&#34;,&#34;deaths&#34;:&#34;7,510&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;454,967&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;15&#34;,&#34;active_cases&#34;:&#34;7,940&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,917&#34;,&#34;deaths_per_1m_population&#34;:&#34;63&#34;,&#34;total_tests&#34;:&#34;4,763,756&#34;,&#34;tests_per_1m_population&#34;:&#34;39,665&#34;},{&#34;country_name&#34;:&#34;Mongolia&#34;,&#34;cases&#34;:&#34;469,580&#34;,&#34;deaths&#34;:&#34;2,177&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;313,256&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;30&#34;,&#34;serious_critical&#34;:&#34;192&#34;,&#34;active_cases&#34;:&#34;154,147&#34;,&#34;total_cases_per_1m_population&#34;:&#34;139,194&#34;,&#34;deaths_per_1m_population&#34;:&#34;645&#34;,&#34;total_tests&#34;:&#34;4,030,048&#34;,&#34;tests_per_1m_population&#34;:&#34;1,194,595&#34;},{&#34;country_name&#34;:&#34;Armenia&#34;,&#34;cases&#34;:&#34;422,825&#34;,&#34;deaths&#34;:&#34;8,622&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;410,558&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;3&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;3,645&#34;,&#34;total_cases_per_1m_population&#34;:&#34;142,210&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,900&#34;,&#34;total_tests&#34;:&#34;3,035,104&#34;,&#34;tests_per_1m_population&#34;:&#34;1,020,807&#34;},{&#34;country_name&#34;:&#34;Honduras&#34;,&#34;cases&#34;:&#34;422,275&#34;,&#34;deaths&#34;:&#34;10,892&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;131,100&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;105&#34;,&#34;active_cases&#34;:&#34;280,283&#34;,&#34;total_cases_per_1m_population&#34;:&#34;41,445&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,069&#34;,&#34;total_tests&#34;:&#34;1,263,329&#34;,&#34;tests_per_1m_population&#34;:&#34;123,991&#34;},{&#34;country_name&#34;:&#34;Oman&#34;,&#34;cases&#34;:&#34;388,995&#34;,&#34;deaths&#34;:&#34;4,257&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;384,055&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;683&#34;,&#34;total_cases_per_1m_population&#34;:&#34;72,833&#34;,&#34;deaths_per_1m_population&#34;:&#34;797&#34;,&#34;total_tests&#34;:&#34;25,000,000&#34;,&#34;tests_per_1m_population&#34;:&#34;4,680,828&#34;},{&#34;country_name&#34;:&#34;Bosnia and Herzegovina&#34;,&#34;cases&#34;:&#34;376,699&#34;,&#34;deaths&#34;:&#34;15,756&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;192,218&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;168,725&#34;,&#34;total_cases_per_1m_population&#34;:&#34;116,122&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,857&#34;,&#34;total_tests&#34;:&#34;1,752,716&#34;,&#34;tests_per_1m_population&#34;:&#34;540,297&#34;},{&#34;country_name&#34;:&#34;R u00e9union&#34;,&#34;cases&#34;:&#34;374,295&#34;,&#34;deaths&#34;:&#34;742&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;355,605&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;10&#34;,&#34;active_cases&#34;:&#34;17,948&#34;,&#34;total_cases_per_1m_population&#34;:&#34;412,744&#34;,&#34;deaths_per_1m_population&#34;:&#34;818&#34;,&#34;total_tests&#34;:&#34;1,603,660&#34;,&#34;tests_per_1m_population&#34;:&#34;1,768,393&#34;},{&#34;country_name&#34;:&#34;Qatar&#34;,&#34;cases&#34;:&#34;364,089&#34;,&#34;deaths&#34;:&#34;677&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;362,568&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;844&#34;,&#34;total_cases_per_1m_population&#34;:&#34;129,670&#34;,&#34;deaths_per_1m_population&#34;:&#34;241&#34;,&#34;total_tests&#34;:&#34;3,425,362&#34;,&#34;tests_per_1m_population&#34;:&#34;1,219,943&#34;},{&#34;country_name&#34;:&#34;Kenya&#34;,&#34;cases&#34;:&#34;323,696&#34;,&#34;deaths&#34;:&#34;5,649&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;317,909&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;138&#34;,&#34;total_cases_per_1m_population&#34;:&#34;5,790&#34;,&#34;deaths_per_1m_population&#34;:&#34;101&#34;,&#34;total_tests&#34;:&#34;3,581,506&#34;,&#34;tests_per_1m_population&#34;:&#34;64,060&#34;},{&#34;country_name&#34;:&#34;Zambia&#34;,&#34;cases&#34;:&#34;318,984&#34;,&#34;deaths&#34;:&#34;3,974&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;314,075&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;935&#34;,&#34;total_cases_per_1m_population&#34;:&#34;16,517&#34;,&#34;deaths_per_1m_population&#34;:&#34;206&#34;,&#34;total_tests&#34;:&#34;3,408,441&#34;,&#34;tests_per_1m_population&#34;:&#34;176,487&#34;},{&#34;country_name&#34;:&#34;North Macedonia&#34;,&#34;cases&#34;:&#34;309,062&#34;,&#34;deaths&#34;:&#34;9,271&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;299,064&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;727&#34;,&#34;total_cases_per_1m_population&#34;:&#34;148,358&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,450&#34;,&#34;total_tests&#34;:&#34;2,007,553&#34;,&#34;tests_per_1m_population&#34;:&#34;963,678&#34;},{&#34;country_name&#34;:&#34;Botswana&#34;,&#34;cases&#34;:&#34;305,859&#34;,&#34;deaths&#34;:&#34;2,688&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;303,026&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;145&#34;,&#34;total_cases_per_1m_population&#34;:&#34;125,491&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,103&#34;,&#34;total_tests&#34;:&#34;2,026,898&#34;,&#34;tests_per_1m_population&#34;:&#34;831,613&#34;},{&#34;country_name&#34;:&#34;Albania&#34;,&#34;cases&#34;:&#34;274,791&#34;,&#34;deaths&#34;:&#34;3,496&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;270,869&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;426&#34;,&#34;total_cases_per_1m_population&#34;:&#34;95,675&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,217&#34;,&#34;total_tests&#34;:&#34;1,799,730&#34;,&#34;tests_per_1m_population&#34;:&#34;626,620&#34;},{&#34;country_name&#34;:&#34;Algeria&#34;,&#34;cases&#34;:&#34;265,761&#34;,&#34;deaths&#34;:&#34;6,874&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;178,344&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;6&#34;,&#34;active_cases&#34;:&#34;80,543&#34;,&#34;total_cases_per_1m_population&#34;:&#34;5,869&#34;,&#34;deaths_per_1m_population&#34;:&#34;152&#34;,&#34;total_tests&#34;:&#34;230,861&#34;,&#34;tests_per_1m_population&#34;:&#34;5,099&#34;},{&#34;country_name&#34;:&#34;Nigeria&#34;,&#34;cases&#34;:&#34;255,685&#34;,&#34;deaths&#34;:&#34;3,143&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;249,890&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;11&#34;,&#34;active_cases&#34;:&#34;2,652&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,187&#34;,&#34;deaths_per_1m_population&#34;:&#34;15&#34;,&#34;total_tests&#34;:&#34;5,036,813&#34;,&#34;tests_per_1m_population&#34;:&#34;23,388&#34;},{&#34;country_name&#34;:&#34;Zimbabwe&#34;,&#34;cases&#34;:&#34;247,524&#34;,&#34;deaths&#34;:&#34;5,468&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;241,362&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;12&#34;,&#34;active_cases&#34;:&#34;694&#34;,&#34;total_cases_per_1m_population&#34;:&#34;16,227&#34;,&#34;deaths_per_1m_population&#34;:&#34;358&#34;,&#34;total_tests&#34;:&#34;2,240,305&#34;,&#34;tests_per_1m_population&#34;:&#34;146,872&#34;},{&#34;country_name&#34;:&#34;Uzbekistan&#34;,&#34;cases&#34;:&#34;238,469&#34;,&#34;deaths&#34;:&#34;1,637&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;236,483&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;27&#34;,&#34;serious_critical&#34;:&#34;23&#34;,&#34;active_cases&#34;:&#34;349&#34;,&#34;total_cases_per_1m_population&#34;:&#34;6,943&#34;,&#34;deaths_per_1m_population&#34;:&#34;48&#34;,&#34;total_tests&#34;:&#34;1,377,915&#34;,&#34;tests_per_1m_population&#34;:&#34;40,120&#34;},{&#34;country_name&#34;:&#34;Montenegro&#34;,&#34;cases&#34;:&#34;234,619&#34;,&#34;deaths&#34;:&#34;2,713&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;231,297&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;6&#34;,&#34;active_cases&#34;:&#34;609&#34;,&#34;total_cases_per_1m_population&#34;:&#34;373,473&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,319&#34;,&#34;total_tests&#34;:&#34;2,444,820&#34;,&#34;tests_per_1m_population&#34;:&#34;3,891,730&#34;},{&#34;country_name&#34;:&#34;Luxembourg&#34;,&#34;cases&#34;:&#34;233,966&#34;,&#34;deaths&#34;:&#34;1,058&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;221,501&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;11,407&#34;,&#34;total_cases_per_1m_population&#34;:&#34;363,099&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,642&#34;,&#34;total_tests&#34;:&#34;4,213,886&#34;,&#34;tests_per_1m_population&#34;:&#34;6,539,666&#34;},{&#34;country_name&#34;:&#34;Mozambique&#34;,&#34;cases&#34;:&#34;225,358&#34;,&#34;deaths&#34;:&#34;2,201&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;223,104&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;13&#34;,&#34;active_cases&#34;:&#34;53&#34;,&#34;total_cases_per_1m_population&#34;:&#34;6,863&#34;,&#34;deaths_per_1m_population&#34;:&#34;67&#34;,&#34;total_tests&#34;:&#34;1,308,458&#34;,&#34;tests_per_1m_population&#34;:&#34;39,849&#34;},{&#34;country_name&#34;:&#34;Laos&#34;,&#34;cases&#34;:&#34;205,975&#34;,&#34;deaths&#34;:&#34;732&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,660&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;1,082&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;197,583&#34;,&#34;total_cases_per_1m_population&#34;:&#34;27,588&#34;,&#34;deaths_per_1m_population&#34;:&#34;98&#34;,&#34;total_tests&#34;:&#34;1,232,128&#34;,&#34;tests_per_1m_population&#34;:&#34;165,029&#34;},{&#34;country_name&#34;:&#34;Kyrgyzstan&#34;,&#34;cases&#34;:&#34;200,983&#34;,&#34;deaths&#34;:&#34;2,991&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;196,386&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;131&#34;,&#34;active_cases&#34;:&#34;1,606&#34;,&#34;total_cases_per_1m_population&#34;:&#34;29,915&#34;,&#34;deaths_per_1m_population&#34;:&#34;445&#34;,&#34;total_tests&#34;:&#34;1,907,195&#34;,&#34;tests_per_1m_population&#34;:&#34;283,874&#34;},{&#34;country_name&#34;:&#34;China&#34;,&#34;cases&#34;:&#34;200,654&#34;,&#34;deaths&#34;:&#34;4,725&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;166,398&#34;,&#34;new_deaths&#34;:&#34;39&#34;,&#34;new_cases&#34;:&#34;1,580&#34;,&#34;serious_critical&#34;:&#34;236&#34;,&#34;active_cases&#34;:&#34;29,531&#34;,&#34;total_cases_per_1m_population&#34;:&#34;139&#34;,&#34;deaths_per_1m_population&#34;:&#34;3&#34;,&#34;total_tests&#34;:&#34;160,000,000&#34;,&#34;tests_per_1m_population&#34;:&#34;111,163&#34;},{&#34;country_name&#34;:&#34;Iceland&#34;,&#34;cases&#34;:&#34;183,974&#34;,&#34;deaths&#34;:&#34;112&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;75,685&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;108,177&#34;,&#34;total_cases_per_1m_population&#34;:&#34;532,886&#34;,&#34;deaths_per_1m_population&#34;:&#34;324&#34;,&#34;total_tests&#34;:&#34;1,953,616&#34;,&#34;tests_per_1m_population&#34;:&#34;5,658,702&#34;},{&#34;country_name&#34;:&#34;Maldives&#34;,&#34;cases&#34;:&#34;178,883&#34;,&#34;deaths&#34;:&#34;298&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;163,687&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;25&#34;,&#34;active_cases&#34;:&#34;14,898&#34;,&#34;total_cases_per_1m_population&#34;:&#34;320,737&#34;,&#34;deaths_per_1m_population&#34;:&#34;534&#34;,&#34;total_tests&#34;:&#34;2,213,831&#34;,&#34;tests_per_1m_population&#34;:&#34;3,969,395&#34;},{&#34;country_name&#34;:&#34;Afghanistan&#34;,&#34;cases&#34;:&#34;178,689&#34;,&#34;deaths&#34;:&#34;7,682&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;161,748&#34;,&#34;new_deaths&#34;:&#34;1&#34;,&#34;new_cases&#34;:&#34;39&#34;,&#34;serious_critical&#34;:&#34;1,124&#34;,&#34;active_cases&#34;:&#34;9,259&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,411&#34;,&#34;deaths_per_1m_population&#34;:&#34;190&#34;,&#34;total_tests&#34;:&#34;940,341&#34;,&#34;tests_per_1m_population&#34;:&#34;23,212&#34;},{&#34;country_name&#34;:&#34;Uganda&#34;,&#34;cases&#34;:&#34;164,069&#34;,&#34;deaths&#34;:&#34;3,596&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;100,205&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;60,268&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,394&#34;,&#34;deaths_per_1m_population&#34;:&#34;74&#34;,&#34;total_tests&#34;:&#34;2,612,795&#34;,&#34;tests_per_1m_population&#34;:&#34;54,043&#34;},{&#34;country_name&#34;:&#34;El Salvador&#34;,&#34;cases&#34;:&#34;162,089&#34;,&#34;deaths&#34;:&#34;4,127&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;150,662&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;7,300&#34;,&#34;total_cases_per_1m_population&#34;:&#34;24,764&#34;,&#34;deaths_per_1m_population&#34;:&#34;631&#34;,&#34;total_tests&#34;:&#34;1,950,448&#34;,&#34;tests_per_1m_population&#34;:&#34;297,993&#34;},{&#34;country_name&#34;:&#34;Ghana&#34;,&#34;cases&#34;:&#34;161,124&#34;,&#34;deaths&#34;:&#34;1,445&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;159,655&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;24&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,997&#34;,&#34;deaths_per_1m_population&#34;:&#34;45&#34;,&#34;total_tests&#34;:&#34;2,433,244&#34;,&#34;tests_per_1m_population&#34;:&#34;75,465&#34;},{&#34;country_name&#34;:&#34;Namibia&#34;,&#34;cases&#34;:&#34;158,332&#34;,&#34;deaths&#34;:&#34;4,023&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;153,662&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;647&#34;,&#34;total_cases_per_1m_population&#34;:&#34;60,341&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,533&#34;,&#34;total_tests&#34;:&#34;1,001,354&#34;,&#34;tests_per_1m_population&#34;:&#34;381,621&#34;},{&#34;country_name&#34;:&#34;Martinique&#34;,&#34;cases&#34;:&#34;147,519&#34;,&#34;deaths&#34;:&#34;918&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;104&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;146,497&#34;,&#34;total_cases_per_1m_population&#34;:&#34;393,657&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,450&#34;,&#34;total_tests&#34;:&#34;828,928&#34;,&#34;tests_per_1m_population&#34;:&#34;2,212,008&#34;},{&#34;country_name&#34;:&#34;Trinidad and Tobago&#34;,&#34;cases&#34;:&#34;144,359&#34;,&#34;deaths&#34;:&#34;3,812&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;133,604&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;18&#34;,&#34;active_cases&#34;:&#34;6,943&#34;,&#34;total_cases_per_1m_population&#34;:&#34;102,552&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,708&#34;,&#34;total_tests&#34;:&#34;696,148&#34;,&#34;tests_per_1m_population&#34;:&#34;494,540&#34;},{&#34;country_name&#34;:&#34;Brunei&#34;,&#34;cases&#34;:&#34;141,014&#34;,&#34;deaths&#34;:&#34;218&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;139,724&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;1,072&#34;,&#34;total_cases_per_1m_population&#34;:&#34;316,857&#34;,&#34;deaths_per_1m_population&#34;:&#34;490&#34;,&#34;total_tests&#34;:&#34;717,784&#34;,&#34;tests_per_1m_population&#34;:&#34;1,612,853&#34;},{&#34;country_name&#34;:&#34;Guadeloupe&#34;,&#34;cases&#34;:&#34;140,130&#34;,&#34;deaths&#34;:&#34;854&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,250&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;19&#34;,&#34;active_cases&#34;:&#34;137,026&#34;,&#34;total_cases_per_1m_population&#34;:&#34;350,108&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,134&#34;,&#34;total_tests&#34;:&#34;938,039&#34;,&#34;tests_per_1m_population&#34;:&#34;2,343,644&#34;},{&#34;country_name&#34;:&#34;Cambodia&#34;,&#34;cases&#34;:&#34;136,200&#34;,&#34;deaths&#34;:&#34;3,056&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;132,896&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;248&#34;,&#34;total_cases_per_1m_population&#34;:&#34;7,948&#34;,&#34;deaths_per_1m_population&#34;:&#34;178&#34;,&#34;total_tests&#34;:&#34;2,946,965&#34;,&#34;tests_per_1m_population&#34;:&#34;171,969&#34;},{&#34;country_name&#34;:&#34;Rwanda&#34;,&#34;cases&#34;:&#34;129,764&#34;,&#34;deaths&#34;:&#34;1,458&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;45,522&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;82,784&#34;,&#34;total_cases_per_1m_population&#34;:&#34;9,590&#34;,&#34;deaths_per_1m_population&#34;:&#34;108&#34;,&#34;total_tests&#34;:&#34;5,225,494&#34;,&#34;tests_per_1m_population&#34;:&#34;386,173&#34;},{&#34;country_name&#34;:&#34;Jamaica&#34;,&#34;cases&#34;:&#34;129,489&#34;,&#34;deaths&#34;:&#34;2,943&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;82,965&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;43,581&#34;,&#34;total_cases_per_1m_population&#34;:&#34;43,387&#34;,&#34;deaths_per_1m_population&#34;:&#34;986&#34;,&#34;total_tests&#34;:&#34;981,688&#34;,&#34;tests_per_1m_population&#34;:&#34;328,929&#34;},{&#34;country_name&#34;:&#34;Cameroon&#34;,&#34;cases&#34;:&#34;119,780&#34;,&#34;deaths&#34;:&#34;1,927&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;117,791&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;13&#34;,&#34;active_cases&#34;:&#34;62&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,318&#34;,&#34;deaths_per_1m_population&#34;:&#34;69&#34;,&#34;total_tests&#34;:&#34;1,751,774&#34;,&#34;tests_per_1m_population&#34;:&#34;63,154&#34;},{&#34;country_name&#34;:&#34;Angola&#34;,&#34;cases&#34;:&#34;99,194&#34;,&#34;deaths&#34;:&#34;1,900&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;97,149&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;145&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,858&#34;,&#34;deaths_per_1m_population&#34;:&#34;55&#34;,&#34;total_tests&#34;:&#34;1,499,795&#34;,&#34;tests_per_1m_population&#34;:&#34;43,209&#34;},{&#34;country_name&#34;:&#34;Malta&#34;,&#34;cases&#34;:&#34;90,595&#34;,&#34;deaths&#34;:&#34;688&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;84,646&#34;,&#34;new_deaths&#34;:&#34;1&#34;,&#34;new_cases&#34;:&#34;196&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;5,261&#34;,&#34;total_cases_per_1m_population&#34;:&#34;204,196&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,551&#34;,&#34;total_tests&#34;:&#34;1,872,465&#34;,&#34;tests_per_1m_population&#34;:&#34;4,220,438&#34;},{&#34;country_name&#34;:&#34;DRC&#34;,&#34;cases&#34;:&#34;87,023&#34;,&#34;deaths&#34;:&#34;1,337&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;50,930&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;34,756&#34;,&#34;total_cases_per_1m_population&#34;:&#34;921&#34;,&#34;deaths_per_1m_population&#34;:&#34;14&#34;,&#34;total_tests&#34;:&#34;846,704&#34;,&#34;tests_per_1m_population&#34;:&#34;8,962&#34;},{&#34;country_name&#34;:&#34;Senegal&#34;,&#34;cases&#34;:&#34;85,984&#34;,&#34;deaths&#34;:&#34;1,966&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;84,001&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;17&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,902&#34;,&#34;deaths_per_1m_population&#34;:&#34;112&#34;,&#34;total_tests&#34;:&#34;1,063,849&#34;,&#34;tests_per_1m_population&#34;:&#34;60,653&#34;},{&#34;country_name&#34;:&#34;Malawi&#34;,&#34;cases&#34;:&#34;85,747&#34;,&#34;deaths&#34;:&#34;2,633&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;81,938&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;67&#34;,&#34;active_cases&#34;:&#34;1,176&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,283&#34;,&#34;deaths_per_1m_population&#34;:&#34;132&#34;,&#34;total_tests&#34;:&#34;571,585&#34;,&#34;tests_per_1m_population&#34;:&#34;28,548&#34;},{&#34;country_name&#34;:&#34;Ivory Coast&#34;,&#34;cases&#34;:&#34;81,887&#34;,&#34;deaths&#34;:&#34;799&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;81,061&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;27&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,972&#34;,&#34;deaths_per_1m_population&#34;:&#34;29&#34;,&#34;total_tests&#34;:&#34;1,494,624&#34;,&#34;tests_per_1m_population&#34;:&#34;54,238&#34;},{&#34;country_name&#34;:&#34;French Guiana&#34;,&#34;cases&#34;:&#34;80,422&#34;,&#34;deaths&#34;:&#34;394&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,254&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;68,774&#34;,&#34;total_cases_per_1m_population&#34;:&#34;257,228&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,260&#34;,&#34;total_tests&#34;:&#34;622,646&#34;,&#34;tests_per_1m_population&#34;:&#34;1,991,518&#34;},{&#34;country_name&#34;:&#34;Suriname&#34;,&#34;cases&#34;:&#34;79,302&#34;,&#34;deaths&#34;:&#34;1,327&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;49,396&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;28,579&#34;,&#34;total_cases_per_1m_population&#34;:&#34;133,030&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,226&#34;,&#34;total_tests&#34;:&#34;235,824&#34;,&#34;tests_per_1m_population&#34;:&#34;395,598&#34;},{&#34;country_name&#34;:&#34;Channel Islands&#34;,&#34;cases&#34;:&#34;73,609&#34;,&#34;deaths&#34;:&#34;166&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;72,059&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,384&#34;,&#34;total_cases_per_1m_population&#34;:&#34;416,444&#34;,&#34;deaths_per_1m_population&#34;:&#34;939&#34;,&#34;total_tests&#34;:&#34;1,252,808&#34;,&#34;tests_per_1m_population&#34;:&#34;7,087,782&#34;},{&#34;country_name&#34;:&#34;French Polynesia&#34;,&#34;cases&#34;:&#34;72,648&#34;,&#34;deaths&#34;:&#34;648&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;255,948&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,283&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Eswatini&#34;,&#34;cases&#34;:&#34;70,284&#34;,&#34;deaths&#34;:&#34;1,397&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;68,764&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;11&#34;,&#34;active_cases&#34;:&#34;123&#34;,&#34;total_cases_per_1m_population&#34;:&#34;59,470&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,182&#34;,&#34;total_tests&#34;:&#34;1,012,397&#34;,&#34;tests_per_1m_population&#34;:&#34;856,623&#34;},{&#34;country_name&#34;:&#34;Barbados&#34;,&#34;cases&#34;:&#34;67,256&#34;,&#34;deaths&#34;:&#34;389&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;63,424&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;3,443&#34;,&#34;total_cases_per_1m_population&#34;:&#34;233,520&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,351&#34;,&#34;total_tests&#34;:&#34;640,085&#34;,&#34;tests_per_1m_population&#34;:&#34;2,222,440&#34;},{&#34;country_name&#34;:&#34;Fiji&#34;,&#34;cases&#34;:&#34;64,524&#34;,&#34;deaths&#34;:&#34;862&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;62,677&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;985&#34;,&#34;total_cases_per_1m_population&#34;:&#34;71,048&#34;,&#34;deaths_per_1m_population&#34;:&#34;949&#34;,&#34;total_tests&#34;:&#34;506,642&#34;,&#34;tests_per_1m_population&#34;:&#34;557,871&#34;},{&#34;country_name&#34;:&#34;Madagascar&#34;,&#34;cases&#34;:&#34;64,121&#34;,&#34;deaths&#34;:&#34;1,391&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;59,370&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;14&#34;,&#34;active_cases&#34;:&#34;3,360&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,213&#34;,&#34;deaths_per_1m_population&#34;:&#34;48&#34;,&#34;total_tests&#34;:&#34;418,849&#34;,&#34;tests_per_1m_population&#34;:&#34;14,455&#34;},{&#34;country_name&#34;:&#34;Guyana&#34;,&#34;cases&#34;:&#34;63,413&#34;,&#34;deaths&#34;:&#34;1,228&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;62,092&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;93&#34;,&#34;total_cases_per_1m_population&#34;:&#34;79,925&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,548&#34;,&#34;total_tests&#34;:&#34;590,638&#34;,&#34;tests_per_1m_population&#34;:&#34;744,436&#34;},{&#34;country_name&#34;:&#34;Sudan&#34;,&#34;cases&#34;:&#34;62,093&#34;,&#34;deaths&#34;:&#34;4,930&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,359&#34;,&#34;deaths_per_1m_population&#34;:&#34;108&#34;,&#34;total_tests&#34;:&#34;562,941&#34;,&#34;tests_per_1m_population&#34;:&#34;12,319&#34;},{&#34;country_name&#34;:&#34;New Caledonia&#34;,&#34;cases&#34;:&#34;60,457&#34;,&#34;deaths&#34;:&#34;312&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;60,064&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;9&#34;,&#34;active_cases&#34;:&#34;81&#34;,&#34;total_cases_per_1m_population&#34;:&#34;208,148&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,074&#34;,&#34;total_tests&#34;:&#34;98,964&#34;,&#34;tests_per_1m_population&#34;:&#34;340,724&#34;},{&#34;country_name&#34;:&#34;Mauritania&#34;,&#34;cases&#34;:&#34;58,683&#34;,&#34;deaths&#34;:&#34;982&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;57,693&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;8&#34;,&#34;total_cases_per_1m_population&#34;:&#34;12,050&#34;,&#34;deaths_per_1m_population&#34;:&#34;202&#34;,&#34;total_tests&#34;:&#34;799,187&#34;,&#34;tests_per_1m_population&#34;:&#34;164,099&#34;},{&#34;country_name&#34;:&#34;Bhutan&#34;,&#34;cases&#34;:&#34;57,771&#34;,&#34;deaths&#34;:&#34;20&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;53,080&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;431&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;4,671&#34;,&#34;total_cases_per_1m_population&#34;:&#34;73,412&#34;,&#34;deaths_per_1m_population&#34;:&#34;25&#34;,&#34;total_tests&#34;:&#34;2,284,301&#34;,&#34;tests_per_1m_population&#34;:&#34;2,902,749&#34;},{&#34;country_name&#34;:&#34;Belize&#34;,&#34;cases&#34;:&#34;57,419&#34;,&#34;deaths&#34;:&#34;676&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;56,534&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;6&#34;,&#34;active_cases&#34;:&#34;209&#34;,&#34;total_cases_per_1m_population&#34;:&#34;139,823&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,646&#34;,&#34;total_tests&#34;:&#34;534,770&#34;,&#34;tests_per_1m_population&#34;:&#34;1,302,237&#34;},{&#34;country_name&#34;:&#34;Taiwan&#34;,&#34;cases&#34;:&#34;56,468&#34;,&#34;deaths&#34;:&#34;856&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;23,729&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;5,172&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;31,883&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,363&#34;,&#34;deaths_per_1m_population&#34;:&#34;36&#34;,&#34;total_tests&#34;:&#34;14,289,370&#34;,&#34;tests_per_1m_population&#34;:&#34;598,017&#34;},{&#34;country_name&#34;:&#34;Cabo Verde&#34;,&#34;cases&#34;:&#34;56,004&#34;,&#34;deaths&#34;:&#34;401&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;55,538&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;23&#34;,&#34;active_cases&#34;:&#34;65&#34;,&#34;total_cases_per_1m_population&#34;:&#34;98,792&#34;,&#34;deaths_per_1m_population&#34;:&#34;707&#34;,&#34;total_tests&#34;:&#34;400,982&#34;,&#34;tests_per_1m_population&#34;:&#34;707,340&#34;},{&#34;country_name&#34;:&#34;Syria&#34;,&#34;cases&#34;:&#34;55,795&#34;,&#34;deaths&#34;:&#34;3,150&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;52,090&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;555&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,054&#34;,&#34;deaths_per_1m_population&#34;:&#34;172&#34;,&#34;total_tests&#34;:&#34;146,269&#34;,&#34;tests_per_1m_population&#34;:&#34;8,007&#34;},{&#34;country_name&#34;:&#34;Gabon&#34;,&#34;cases&#34;:&#34;47,597&#34;,&#34;deaths&#34;:&#34;303&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;47,282&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;12&#34;,&#34;total_cases_per_1m_population&#34;:&#34;20,512&#34;,&#34;deaths_per_1m_population&#34;:&#34;131&#34;,&#34;total_tests&#34;:&#34;1,592,483&#34;,&#34;tests_per_1m_population&#34;:&#34;686,270&#34;},{&#34;country_name&#34;:&#34;Papua New Guinea&#34;,&#34;cases&#34;:&#34;43,732&#34;,&#34;deaths&#34;:&#34;649&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;43,025&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;58&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,726&#34;,&#34;deaths_per_1m_population&#34;:&#34;70&#34;,&#34;total_tests&#34;:&#34;249,149&#34;,&#34;tests_per_1m_population&#34;:&#34;26,927&#34;},{&#34;country_name&#34;:&#34;Seychelles&#34;,&#34;cases&#34;:&#34;42,079&#34;,&#34;deaths&#34;:&#34;165&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;41,260&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;654&#34;,&#34;total_cases_per_1m_population&#34;:&#34;423,134&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,659&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Cura u00e7ao&#34;,&#34;cases&#34;:&#34;41,966&#34;,&#34;deaths&#34;:&#34;273&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;41,251&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;442&#34;,&#34;total_cases_per_1m_population&#34;:&#34;253,872&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,652&#34;,&#34;total_tests&#34;:&#34;496,693&#34;,&#34;tests_per_1m_population&#34;:&#34;3,004,725&#34;},{&#34;country_name&#34;:&#34;Andorra&#34;,&#34;cases&#34;:&#34;41,013&#34;,&#34;deaths&#34;:&#34;153&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;40,343&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;14&#34;,&#34;active_cases&#34;:&#34;517&#34;,&#34;total_cases_per_1m_population&#34;:&#34;529,282&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,974&#34;,&#34;total_tests&#34;:&#34;249,838&#34;,&#34;tests_per_1m_population&#34;:&#34;3,224,215&#34;},{&#34;country_name&#34;:&#34;Burundi&#34;,&#34;cases&#34;:&#34;38,887&#34;,&#34;deaths&#34;:&#34;38&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;773&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;38,076&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,104&#34;,&#34;deaths_per_1m_population&#34;:&#34;3&#34;,&#34;total_tests&#34;:&#34;345,742&#34;,&#34;tests_per_1m_population&#34;:&#34;27,594&#34;},{&#34;country_name&#34;:&#34;Mauritius&#34;,&#34;cases&#34;:&#34;37,656&#34;,&#34;deaths&#34;:&#34;990&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;35,656&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,010&#34;,&#34;total_cases_per_1m_population&#34;:&#34;29,521&#34;,&#34;deaths_per_1m_population&#34;:&#34;776&#34;,&#34;total_tests&#34;:&#34;358,675&#34;,&#34;tests_per_1m_population&#34;:&#34;281,186&#34;},{&#34;country_name&#34;:&#34;Mayotte&#34;,&#34;cases&#34;:&#34;37,038&#34;,&#34;deaths&#34;:&#34;187&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,964&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;33,887&#34;,&#34;total_cases_per_1m_population&#34;:&#34;130,099&#34;,&#34;deaths_per_1m_population&#34;:&#34;657&#34;,&#34;total_tests&#34;:&#34;176,919&#34;,&#34;tests_per_1m_population&#34;:&#34;621,442&#34;},{&#34;country_name&#34;:&#34;Togo&#34;,&#34;cases&#34;:&#34;36,977&#34;,&#34;deaths&#34;:&#34;273&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;36,679&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;25&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,285&#34;,&#34;deaths_per_1m_population&#34;:&#34;32&#34;,&#34;total_tests&#34;:&#34;727,740&#34;,&#34;tests_per_1m_population&#34;:&#34;84,338&#34;},{&#34;country_name&#34;:&#34;Guinea&#34;,&#34;cases&#34;:&#34;36,459&#34;,&#34;deaths&#34;:&#34;440&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;35,976&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;43&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,647&#34;,&#34;deaths_per_1m_population&#34;:&#34;32&#34;,&#34;total_tests&#34;:&#34;660,107&#34;,&#34;tests_per_1m_population&#34;:&#34;47,919&#34;},{&#34;country_name&#34;:&#34;Faeroe Islands&#34;,&#34;cases&#34;:&#34;34,658&#34;,&#34;deaths&#34;:&#34;28&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,693&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;26,937&#34;,&#34;total_cases_per_1m_population&#34;:&#34;704,460&#34;,&#34;deaths_per_1m_population&#34;:&#34;569&#34;,&#34;total_tests&#34;:&#34;778,000&#34;,&#34;tests_per_1m_population&#34;:&#34;15,813,651&#34;},{&#34;country_name&#34;:&#34;Aruba&#34;,&#34;cases&#34;:&#34;34,589&#34;,&#34;deaths&#34;:&#34;212&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;34,251&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;126&#34;,&#34;total_cases_per_1m_population&#34;:&#34;321,507&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,971&#34;,&#34;total_tests&#34;:&#34;177,885&#34;,&#34;tests_per_1m_population&#34;:&#34;1,653,452&#34;},{&#34;country_name&#34;:&#34;Tanzania&#34;,&#34;cases&#34;:&#34;33,864&#34;,&#34;deaths&#34;:&#34;803&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;539&#34;,&#34;deaths_per_1m_population&#34;:&#34;13&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Bahamas&#34;,&#34;cases&#34;:&#34;33,463&#34;,&#34;deaths&#34;:&#34;789&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;32,310&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;11&#34;,&#34;active_cases&#34;:&#34;364&#34;,&#34;total_cases_per_1m_population&#34;:&#34;83,652&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,972&#34;,&#34;total_tests&#34;:&#34;229,817&#34;,&#34;tests_per_1m_population&#34;:&#34;574,504&#34;},{&#34;country_name&#34;:&#34;Lesotho&#34;,&#34;cases&#34;:&#34;32,910&#34;,&#34;deaths&#34;:&#34;697&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;24,155&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;8,058&#34;,&#34;total_cases_per_1m_population&#34;:&#34;15,146&#34;,&#34;deaths_per_1m_population&#34;:&#34;321&#34;,&#34;total_tests&#34;:&#34;431,221&#34;,&#34;tests_per_1m_population&#34;:&#34;198,454&#34;},{&#34;country_name&#34;:&#34;Mali&#34;,&#34;cases&#34;:&#34;30,727&#34;,&#34;deaths&#34;:&#34;731&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;29,795&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;201&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,442&#34;,&#34;deaths_per_1m_population&#34;:&#34;34&#34;,&#34;total_tests&#34;:&#34;663,805&#34;,&#34;tests_per_1m_population&#34;:&#34;31,160&#34;},{&#34;country_name&#34;:&#34;Haiti&#34;,&#34;cases&#34;:&#34;30,640&#34;,&#34;deaths&#34;:&#34;835&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;29,389&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;416&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,629&#34;,&#34;deaths_per_1m_population&#34;:&#34;72&#34;,&#34;total_tests&#34;:&#34;132,422&#34;,&#34;tests_per_1m_population&#34;:&#34;11,363&#34;},{&#34;country_name&#34;:&#34;Isle of Man&#34;,&#34;cases&#34;:&#34;28,416&#34;,&#34;deaths&#34;:&#34;87&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;26,794&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,535&#34;,&#34;total_cases_per_1m_population&#34;:&#34;331,015&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,013&#34;,&#34;total_tests&#34;:&#34;150,753&#34;,&#34;tests_per_1m_population&#34;:&#34;1,756,107&#34;},{&#34;country_name&#34;:&#34;Benin&#34;,&#34;cases&#34;:&#34;26,952&#34;,&#34;deaths&#34;:&#34;163&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;25,506&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;1,283&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,123&#34;,&#34;deaths_per_1m_population&#34;:&#34;13&#34;,&#34;total_tests&#34;:&#34;604,310&#34;,&#34;tests_per_1m_population&#34;:&#34;47,598&#34;},{&#34;country_name&#34;:&#34;Somalia&#34;,&#34;cases&#34;:&#34;26,485&#34;,&#34;deaths&#34;:&#34;1,350&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;13,182&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;11,953&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,587&#34;,&#34;deaths_per_1m_population&#34;:&#34;81&#34;,&#34;total_tests&#34;:&#34;400,466&#34;,&#34;tests_per_1m_population&#34;:&#34;23,990&#34;},{&#34;country_name&#34;:&#34;Congo&#34;,&#34;cases&#34;:&#34;24,079&#34;,&#34;deaths&#34;:&#34;385&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;20,178&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;3,516&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,178&#34;,&#34;deaths_per_1m_population&#34;:&#34;67&#34;,&#34;total_tests&#34;:&#34;347,815&#34;,&#34;tests_per_1m_population&#34;:&#34;60,352&#34;},{&#34;country_name&#34;:&#34;Saint Lucia&#34;,&#34;cases&#34;:&#34;23,239&#34;,&#34;deaths&#34;:&#34;368&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;22,736&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;135&#34;,&#34;total_cases_per_1m_population&#34;:&#34;125,520&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,988&#34;,&#34;total_tests&#34;:&#34;142,630&#34;,&#34;tests_per_1m_population&#34;:&#34;770,382&#34;},{&#34;country_name&#34;:&#34;Timor-Leste&#34;,&#34;cases&#34;:&#34;22,860&#34;,&#34;deaths&#34;:&#34;130&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;22,714&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;16&#34;,&#34;total_cases_per_1m_population&#34;:&#34;16,762&#34;,&#34;deaths_per_1m_population&#34;:&#34;95&#34;,&#34;total_tests&#34;:&#34;261,007&#34;,&#34;tests_per_1m_population&#34;:&#34;191,388&#34;},{&#34;country_name&#34;:&#34;Cayman Islands&#34;,&#34;cases&#34;:&#34;21,755&#34;,&#34;deaths&#34;:&#34;26&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;8,553&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;13,176&#34;,&#34;total_cases_per_1m_population&#34;:&#34;324,145&#34;,&#34;deaths_per_1m_population&#34;:&#34;387&#34;,&#34;total_tests&#34;:&#34;222,773&#34;,&#34;tests_per_1m_population&#34;:&#34;3,319,273&#34;},{&#34;country_name&#34;:&#34;Burkina Faso&#34;,&#34;cases&#34;:&#34;20,853&#34;,&#34;deaths&#34;:&#34;382&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;20,439&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;32&#34;,&#34;total_cases_per_1m_population&#34;:&#34;951&#34;,&#34;deaths_per_1m_population&#34;:&#34;17&#34;,&#34;total_tests&#34;:&#34;248,995&#34;,&#34;tests_per_1m_population&#34;:&#34;11,350&#34;},{&#34;country_name&#34;:&#34;Nicaragua&#34;,&#34;cases&#34;:&#34;18,491&#34;,&#34;deaths&#34;:&#34;225&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;4,225&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;14,041&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,733&#34;,&#34;deaths_per_1m_population&#34;:&#34;33&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Gibraltar&#34;,&#34;cases&#34;:&#34;17,706&#34;,&#34;deaths&#34;:&#34;102&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;16,579&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,025&#34;,&#34;total_cases_per_1m_population&#34;:&#34;525,822&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,029&#34;,&#34;total_tests&#34;:&#34;534,283&#34;,&#34;tests_per_1m_population&#34;:&#34;15,866,807&#34;},{&#34;country_name&#34;:&#34;South Sudan&#34;,&#34;cases&#34;:&#34;17,422&#34;,&#34;deaths&#34;:&#34;138&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;13,514&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;3,770&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,524&#34;,&#34;deaths_per_1m_population&#34;:&#34;12&#34;,&#34;total_tests&#34;:&#34;376,391&#34;,&#34;tests_per_1m_population&#34;:&#34;32,928&#34;},{&#34;country_name&#34;:&#34;Tajikistan&#34;,&#34;cases&#34;:&#34;17,388&#34;,&#34;deaths&#34;:&#34;124&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;17,264&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,752&#34;,&#34;deaths_per_1m_population&#34;:&#34;12&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Liechtenstein&#34;,&#34;cases&#34;:&#34;17,103&#34;,&#34;deaths&#34;:&#34;85&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;16,831&#34;,&#34;new_deaths&#34;:&#34;1&#34;,&#34;new_cases&#34;:&#34;12&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;187&#34;,&#34;total_cases_per_1m_population&#34;:&#34;446,251&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,218&#34;,&#34;total_tests&#34;:&#34;102,174&#34;,&#34;tests_per_1m_population&#34;:&#34;2,665,919&#34;},{&#34;country_name&#34;:&#34;San Marino&#34;,&#34;cases&#34;:&#34;16,140&#34;,&#34;deaths&#34;:&#34;114&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;15,662&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;364&#34;,&#34;total_cases_per_1m_population&#34;:&#34;473,870&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,347&#34;,&#34;total_tests&#34;:&#34;149,271&#34;,&#34;tests_per_1m_population&#34;:&#34;4,382,590&#34;},{&#34;country_name&#34;:&#34;Equatorial Guinea&#34;,&#34;cases&#34;:&#34;15,907&#34;,&#34;deaths&#34;:&#34;183&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;15,698&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;26&#34;,&#34;total_cases_per_1m_population&#34;:&#34;10,704&#34;,&#34;deaths_per_1m_population&#34;:&#34;123&#34;,&#34;total_tests&#34;:&#34;310,972&#34;,&#34;tests_per_1m_population&#34;:&#34;209,251&#34;},{&#34;country_name&#34;:&#34;Djibouti&#34;,&#34;cases&#34;:&#34;15,611&#34;,&#34;deaths&#34;:&#34;189&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;15,411&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;11&#34;,&#34;total_cases_per_1m_population&#34;:&#34;15,396&#34;,&#34;deaths_per_1m_population&#34;:&#34;186&#34;,&#34;total_tests&#34;:&#34;303,924&#34;,&#34;tests_per_1m_population&#34;:&#34;299,748&#34;},{&#34;country_name&#34;:&#34;CAR&#34;,&#34;cases&#34;:&#34;14,649&#34;,&#34;deaths&#34;:&#34;113&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;6,859&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;7,677&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,941&#34;,&#34;deaths_per_1m_population&#34;:&#34;23&#34;,&#34;total_tests&#34;:&#34;81,294&#34;,&#34;tests_per_1m_population&#34;:&#34;16,320&#34;},{&#34;country_name&#34;:&#34;Grenada&#34;,&#34;cases&#34;:&#34;14,428&#34;,&#34;deaths&#34;:&#34;220&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;13,945&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;263&#34;,&#34;total_cases_per_1m_population&#34;:&#34;127,159&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,939&#34;,&#34;total_tests&#34;:&#34;148,567&#34;,&#34;tests_per_1m_population&#34;:&#34;1,309,376&#34;},{&#34;country_name&#34;:&#34;Bermuda&#34;,&#34;cases&#34;:&#34;13,143&#34;,&#34;deaths&#34;:&#34;131&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;12,719&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;293&#34;,&#34;total_cases_per_1m_population&#34;:&#34;212,453&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,118&#34;,&#34;total_tests&#34;:&#34;866,313&#34;,&#34;tests_per_1m_population&#34;:&#34;14,003,734&#34;},{&#34;country_name&#34;:&#34;Solomon Islands&#34;,&#34;cases&#34;:&#34;12,437&#34;,&#34;deaths&#34;:&#34;139&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,194&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;1,104&#34;,&#34;total_cases_per_1m_population&#34;:&#34;17,339&#34;,&#34;deaths_per_1m_population&#34;:&#34;194&#34;,&#34;total_tests&#34;:&#34;5,117&#34;,&#34;tests_per_1m_population&#34;:&#34;7,134&#34;},{&#34;country_name&#34;:&#34;Dominica&#34;,&#34;cases&#34;:&#34;12,011&#34;,&#34;deaths&#34;:&#34;63&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,926&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;22&#34;,&#34;total_cases_per_1m_population&#34;:&#34;166,107&#34;,&#34;deaths_per_1m_population&#34;:&#34;871&#34;,&#34;total_tests&#34;:&#34;187,690&#34;,&#34;tests_per_1m_population&#34;:&#34;2,595,666&#34;},{&#34;country_name&#34;:&#34;Gambia&#34;,&#34;cases&#34;:&#34;11,995&#34;,&#34;deaths&#34;:&#34;365&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,591&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;39&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,724&#34;,&#34;deaths_per_1m_population&#34;:&#34;144&#34;,&#34;total_tests&#34;:&#34;155,686&#34;,&#34;tests_per_1m_population&#34;:&#34;61,314&#34;},{&#34;country_name&#34;:&#34;Greenland&#34;,&#34;cases&#34;:&#34;11,971&#34;,&#34;deaths&#34;:&#34;21&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,761&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;9,189&#34;,&#34;total_cases_per_1m_population&#34;:&#34;210,209&#34;,&#34;deaths_per_1m_population&#34;:&#34;369&#34;,&#34;total_tests&#34;:&#34;164,926&#34;,&#34;tests_per_1m_population&#34;:&#34;2,896,081&#34;},{&#34;country_name&#34;:&#34;Yemen&#34;,&#34;cases&#34;:&#34;11,818&#34;,&#34;deaths&#34;:&#34;2,148&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,001&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;23&#34;,&#34;active_cases&#34;:&#34;669&#34;,&#34;total_cases_per_1m_population&#34;:&#34;381&#34;,&#34;deaths_per_1m_population&#34;:&#34;69&#34;,&#34;total_tests&#34;:&#34;265,253&#34;,&#34;tests_per_1m_population&#34;:&#34;8,553&#34;},{&#34;country_name&#34;:&#34;Monaco&#34;,&#34;cases&#34;:&#34;11,604&#34;,&#34;deaths&#34;:&#34;54&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,362&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;188&#34;,&#34;total_cases_per_1m_population&#34;:&#34;291,969&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,359&#34;,&#34;total_tests&#34;:&#34;54,960&#34;,&#34;tests_per_1m_population&#34;:&#34;1,382,850&#34;},{&#34;country_name&#34;:&#34;Saint Martin&#34;,&#34;cases&#34;:&#34;10,279&#34;,&#34;deaths&#34;:&#34;63&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,399&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;8,817&#34;,&#34;total_cases_per_1m_population&#34;:&#34;257,903&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,581&#34;,&#34;total_tests&#34;:&#34;112,382&#34;,&#34;tests_per_1m_population&#34;:&#34;2,819,701&#34;},{&#34;country_name&#34;:&#34;Sint Maarten&#34;,&#34;cases&#34;:&#34;9,990&#34;,&#34;deaths&#34;:&#34;86&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,841&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;10&#34;,&#34;active_cases&#34;:&#34;63&#34;,&#34;total_cases_per_1m_population&#34;:&#34;228,317&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,965&#34;,&#34;total_tests&#34;:&#34;62,056&#34;,&#34;tests_per_1m_population&#34;:&#34;1,418,261&#34;},{&#34;country_name&#34;:&#34;Eritrea&#34;,&#34;cases&#34;:&#34;9,733&#34;,&#34;deaths&#34;:&#34;103&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,629&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,678&#34;,&#34;deaths_per_1m_population&#34;:&#34;28&#34;,&#34;total_tests&#34;:&#34;23,693&#34;,&#34;tests_per_1m_population&#34;:&#34;6,518&#34;},{&#34;country_name&#34;:&#34;Caribbean Netherlands&#34;,&#34;cases&#34;:&#34;9,592&#34;,&#34;deaths&#34;:&#34;34&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,392&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;166&#34;,&#34;total_cases_per_1m_population&#34;:&#34;359,749&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,275&#34;,&#34;total_tests&#34;:&#34;30,126&#34;,&#34;tests_per_1m_population&#34;:&#34;1,129,880&#34;},{&#34;country_name&#34;:&#34;Tonga&#34;,&#34;cases&#34;:&#34;9,553&#34;,&#34;deaths&#34;:&#34;11&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;8,306&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,236&#34;,&#34;total_cases_per_1m_population&#34;:&#34;88,571&#34;,&#34;deaths_per_1m_population&#34;:&#34;102&#34;,&#34;total_tests&#34;:&#34;408,213&#34;,&#34;tests_per_1m_population&#34;:&#34;3,784,761&#34;},{&#34;country_name&#34;:&#34;Niger&#34;,&#34;cases&#34;:&#34;8,914&#34;,&#34;deaths&#34;:&#34;309&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;8,507&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;98&#34;,&#34;total_cases_per_1m_population&#34;:&#34;346&#34;,&#34;deaths_per_1m_population&#34;:&#34;12&#34;,&#34;total_tests&#34;:&#34;249,026&#34;,&#34;tests_per_1m_population&#34;:&#34;9,657&#34;},{&#34;country_name&#34;:&#34;Guinea-Bissau&#34;,&#34;cases&#34;:&#34;8,185&#34;,&#34;deaths&#34;:&#34;171&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,515&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;6&#34;,&#34;active_cases&#34;:&#34;499&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,989&#34;,&#34;deaths_per_1m_population&#34;:&#34;83&#34;,&#34;total_tests&#34;:&#34;132,611&#34;,&#34;tests_per_1m_population&#34;:&#34;64,628&#34;},{&#34;country_name&#34;:&#34;Comoros&#34;,&#34;cases&#34;:&#34;8,100&#34;,&#34;deaths&#34;:&#34;160&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,933&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;7&#34;,&#34;total_cases_per_1m_population&#34;:&#34;8,970&#34;,&#34;deaths_per_1m_population&#34;:&#34;177&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Sierra Leone&#34;,&#34;cases&#34;:&#34;7,681&#34;,&#34;deaths&#34;:&#34;125&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;929&#34;,&#34;deaths_per_1m_population&#34;:&#34;15&#34;,&#34;total_tests&#34;:&#34;259,958&#34;,&#34;tests_per_1m_population&#34;:&#34;31,435&#34;},{&#34;country_name&#34;:&#34;Antigua and Barbuda&#34;,&#34;cases&#34;:&#34;7,571&#34;,&#34;deaths&#34;:&#34;135&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,402&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;34&#34;,&#34;total_cases_per_1m_population&#34;:&#34;76,172&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,358&#34;,&#34;total_tests&#34;:&#34;18,901&#34;,&#34;tests_per_1m_population&#34;:&#34;190,164&#34;},{&#34;country_name&#34;:&#34;Liberia&#34;,&#34;cases&#34;:&#34;7,432&#34;,&#34;deaths&#34;:&#34;294&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,747&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;1,391&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,410&#34;,&#34;deaths_per_1m_population&#34;:&#34;56&#34;,&#34;total_tests&#34;:&#34;139,824&#34;,&#34;tests_per_1m_population&#34;:&#34;26,521&#34;},{&#34;country_name&#34;:&#34;Chad&#34;,&#34;cases&#34;:&#34;7,396&#34;,&#34;deaths&#34;:&#34;193&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;4,874&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;2,329&#34;,&#34;total_cases_per_1m_population&#34;:&#34;428&#34;,&#34;deaths_per_1m_population&#34;:&#34;11&#34;,&#34;total_tests&#34;:&#34;191,341&#34;,&#34;tests_per_1m_population&#34;:&#34;11,075&#34;},{&#34;country_name&#34;:&#34;Samoa&#34;,&#34;cases&#34;:&#34;7,185&#34;,&#34;deaths&#34;:&#34;13&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,605&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;5,567&#34;,&#34;total_cases_per_1m_population&#34;:&#34;35,783&#34;,&#34;deaths_per_1m_population&#34;:&#34;65&#34;,&#34;total_tests&#34;:&#34;53,893&#34;,&#34;tests_per_1m_population&#34;:&#34;268,399&#34;},{&#34;country_name&#34;:&#34;Vanuatu&#34;,&#34;cases&#34;:&#34;6,793&#34;,&#34;deaths&#34;:&#34;12&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,991&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;790&#34;,&#34;total_cases_per_1m_population&#34;:&#34;21,222&#34;,&#34;deaths_per_1m_population&#34;:&#34;37&#34;,&#34;total_tests&#34;:&#34;24,976&#34;,&#34;tests_per_1m_population&#34;:&#34;78,027&#34;},{&#34;country_name&#34;:&#34;St. Vincent Grenadines&#34;,&#34;cases&#34;:&#34;6,779&#34;,&#34;deaths&#34;:&#34;106&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;6,641&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;32&#34;,&#34;total_cases_per_1m_population&#34;:&#34;60,757&#34;,&#34;deaths_per_1m_population&#34;:&#34;950&#34;,&#34;total_tests&#34;:&#34;98,860&#34;,&#34;tests_per_1m_population&#34;:&#34;886,033&#34;},{&#34;country_name&#34;:&#34;British Virgin Islands&#34;,&#34;cases&#34;:&#34;6,296&#34;,&#34;deaths&#34;:&#34;62&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;205,792&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,027&#34;,&#34;total_tests&#34;:&#34;102,862&#34;,&#34;tests_per_1m_population&#34;:&#34;3,362,163&#34;},{&#34;country_name&#34;:&#34;Sao Tome and Principe&#34;,&#34;cases&#34;:&#34;5,953&#34;,&#34;deaths&#34;:&#34;73&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,875&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;5&#34;,&#34;total_cases_per_1m_population&#34;:&#34;26,282&#34;,&#34;deaths_per_1m_population&#34;:&#34;322&#34;,&#34;total_tests&#34;:&#34;29,036&#34;,&#34;tests_per_1m_population&#34;:&#34;128,193&#34;},{&#34;country_name&#34;:&#34;Turks and Caicos&#34;,&#34;cases&#34;:&#34;5,941&#34;,&#34;deaths&#34;:&#34;36&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,862&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;43&#34;,&#34;total_cases_per_1m_population&#34;:&#34;149,791&#34;,&#34;deaths_per_1m_population&#34;:&#34;908&#34;,&#34;total_tests&#34;:&#34;478,593&#34;,&#34;tests_per_1m_population&#34;:&#34;12,066,789&#34;},{&#34;country_name&#34;:&#34;Saint Kitts and Nevis&#34;,&#34;cases&#34;:&#34;5,561&#34;,&#34;deaths&#34;:&#34;43&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,517&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1&#34;,&#34;total_cases_per_1m_population&#34;:&#34;103,215&#34;,&#34;deaths_per_1m_population&#34;:&#34;798&#34;,&#34;total_tests&#34;:&#34;65,141&#34;,&#34;tests_per_1m_population&#34;:&#34;1,209,046&#34;},{&#34;country_name&#34;:&#34;Cook Islands&#34;,&#34;cases&#34;:&#34;4,727&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,990&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;737&#34;,&#34;total_cases_per_1m_population&#34;:&#34;268,686&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;15,740&#34;,&#34;tests_per_1m_population&#34;:&#34;894,674&#34;},{&#34;country_name&#34;:&#34;St. Barth&#34;,&#34;cases&#34;:&#34;4,432&#34;,&#34;deaths&#34;:&#34;6&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;446,279&#34;,&#34;deaths_per_1m_population&#34;:&#34;604&#34;,&#34;total_tests&#34;:&#34;78,646&#34;,&#34;tests_per_1m_population&#34;:&#34;7,919,243&#34;},{&#34;country_name&#34;:&#34;Palau&#34;,&#34;cases&#34;:&#34;4,396&#34;,&#34;deaths&#34;:&#34;6&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,879&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;511&#34;,&#34;total_cases_per_1m_population&#34;:&#34;240,877&#34;,&#34;deaths_per_1m_population&#34;:&#34;329&#34;,&#34;total_tests&#34;:&#34;45,500&#34;,&#34;tests_per_1m_population&#34;:&#34;2,493,151&#34;},{&#34;country_name&#34;:&#34;Kiribati&#34;,&#34;cases&#34;:&#34;3,076&#34;,&#34;deaths&#34;:&#34;13&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,597&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;466&#34;,&#34;total_cases_per_1m_population&#34;:&#34;25,058&#34;,&#34;deaths_per_1m_population&#34;:&#34;106&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Anguilla&#34;,&#34;cases&#34;:&#34;2,731&#34;,&#34;deaths&#34;:&#34;9&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,716&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;6&#34;,&#34;total_cases_per_1m_population&#34;:&#34;179,141&#34;,&#34;deaths_per_1m_population&#34;:&#34;590&#34;,&#34;total_tests&#34;:&#34;51,382&#34;,&#34;tests_per_1m_population&#34;:&#34;3,370,417&#34;},{&#34;country_name&#34;:&#34;Saint Pierre Miquelon&#34;,&#34;cases&#34;:&#34;2,641&#34;,&#34;deaths&#34;:&#34;1&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,449&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;191&#34;,&#34;total_cases_per_1m_population&#34;:&#34;459,864&#34;,&#34;deaths_per_1m_population&#34;:&#34;174&#34;,&#34;total_tests&#34;:&#34;22,941&#34;,&#34;tests_per_1m_population&#34;:&#34;3,994,602&#34;},{&#34;country_name&#34;:&#34;Diamond Princess&#34;,&#34;cases&#34;:&#34;712&#34;,&#34;deaths&#34;:&#34;13&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;699&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;0&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Wallis and Futuna&#34;,&#34;cases&#34;:&#34;454&#34;,&#34;deaths&#34;:&#34;7&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;438&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;9&#34;,&#34;total_cases_per_1m_population&#34;:&#34;41,713&#34;,&#34;deaths_per_1m_population&#34;:&#34;643&#34;,&#34;total_tests&#34;:&#34;20,508&#34;,&#34;tests_per_1m_population&#34;:&#34;1,884,234&#34;},{&#34;country_name&#34;:&#34;Montserrat&#34;,&#34;cases&#34;:&#34;183&#34;,&#34;deaths&#34;:&#34;2&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;174&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;7&#34;,&#34;total_cases_per_1m_population&#34;:&#34;36,622&#34;,&#34;deaths_per_1m_population&#34;:&#34;400&#34;,&#34;total_tests&#34;:&#34;9,700&#34;,&#34;tests_per_1m_population&#34;:&#34;1,941,165&#34;},{&#34;country_name&#34;:&#34;Falkland Islands&#34;,&#34;cases&#34;:&#34;128&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;34,944&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;8,632&#34;,&#34;tests_per_1m_population&#34;:&#34;2,356,538&#34;},{&#34;country_name&#34;:&#34;Macao&#34;,&#34;cases&#34;:&#34;82&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;82&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;123&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;5,375&#34;,&#34;tests_per_1m_population&#34;:&#34;8,079&#34;},{&#34;country_name&#34;:&#34;Vatican City&#34;,&#34;cases&#34;:&#34;29&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;29&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;36,025&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Marshall Islands&#34;,&#34;cases&#34;:&#34;15&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;8&#34;,&#34;total_cases_per_1m_population&#34;:&#34;250&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Western Sahara&#34;,&#34;cases&#34;:&#34;10&#34;,&#34;deaths&#34;:&#34;1&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;16&#34;,&#34;deaths_per_1m_population&#34;:&#34;2&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;MS Zaandam&#34;,&#34;cases&#34;:&#34;9&#34;,&#34;deaths&#34;:&#34;2&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;0&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Niue&#34;,&#34;cases&#34;:&#34;8&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,860&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Nauru&#34;,&#34;cases&#34;:&#34;3&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;274&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Saint Helena&#34;,&#34;cases&#34;:&#34;2&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;327&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Micronesia&#34;,&#34;cases&#34;:&#34;1&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;9&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;}],&#34;statistic_taken_at&#34;:&#34;2022-04-24 11:18:01&#34;,&#34;world_total&#34;:{&#34;total_cases&#34;:&#34;509,268,964&#34;,&#34;new_cases&#34;:&#34;204,268&#34;,&#34;total_deaths&#34;:&#34;6,242,509&#34;,&#34;new_deaths&#34;:&#34;630&#34;,&#34;total_recovered&#34;:&#34;461,827,849&#34;,&#34;active_cases&#34;:&#34;41,198,606&#34;,&#34;serious_critical&#34;:&#34;42,510&#34;,&#34;total_cases_per_1m_population&#34;:&#34;65,334&#34;,&#34;deaths_per_1m_population&#34;:&#34;800.9&#34;,&#34;statistic_taken_at&#34;:&#34;2022-04-24 11:18:01&#34;}} . package com.nighthawk.spring_portfolio.mvc.covid; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/covid&quot;) //prefix of API public class CovidApiController { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getCovid() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . | package com.nighthawk.spring_portfolio.mvc.covid; illegal start of expression . Hacks . Benefit of using an API? : API&#39;s allow you to access data that already exists. This is much more convienent than gathering your own data when there is so much more data available online for free use (as demonstrated in the covid19 example). You are free to use the API data however you want. | Benefit(s) of backend implementation? : it is something that frotend applications can reference. It&#39;s easy to check and fix if there is a error that turns out to be a logic error. All the logic that powers front end features is visible and can be understood. People can collaborate to make a front end feature run. | . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://wft-geo-db.p.rapidapi.com/v1/geo/adminDivisions&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;f877084053msh82cfa972b631ab7p1c4893jsn442e2f514bb0&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;wft-geo-db.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;data&#34;:[{&#34;id&#34;:3515514,&#34;wikiDataId&#34;:&#34;Q4117373&#34;,&#34;name&#34;:&#34;Al Mamzar&#34;,&#34;country&#34;:&#34;United Arab Emirates&#34;,&#34;countryCode&#34;:&#34;AE&#34;,&#34;region&#34;:&#34;Dubai&#34;,&#34;regionCode&#34;:&#34;DU&#34;,&#34;latitude&#34;:25.309469444,&#34;longitude&#34;:55.342811111,&#34;population&#34;:0},{&#34;id&#34;:3386644,&#34;wikiDataId&#34;:&#34;Q3694483&#34;,&#34;name&#34;:&#34;Ab Band District&#34;,&#34;country&#34;:&#34;Afghanistan&#34;,&#34;countryCode&#34;:&#34;AF&#34;,&#34;region&#34;:&#34;Ghazni&#34;,&#34;regionCode&#34;:&#34;GHA&#34;,&#34;latitude&#34;:32.983,&#34;longitude&#34;:67.967,&#34;population&#34;:0},{&#34;id&#34;:3339608,&#34;wikiDataId&#34;:&#34;Q2572213&#34;,&#34;name&#34;:&#34;Ab Kamari&#34;,&#34;country&#34;:&#34;Afghanistan&#34;,&#34;countryCode&#34;:&#34;AF&#34;,&#34;region&#34;:&#34;Badghis&#34;,&#34;regionCode&#34;:&#34;BDG&#34;,&#34;latitude&#34;:34.925,&#34;longitude&#34;:62.901666666,&#34;population&#34;:0},{&#34;id&#34;:3228129,&#34;wikiDataId&#34;:&#34;Q1650529&#34;,&#34;name&#34;:&#34;Achin&#34;,&#34;country&#34;:&#34;Afghanistan&#34;,&#34;countryCode&#34;:&#34;AF&#34;,&#34;region&#34;:&#34;Nangarhar&#34;,&#34;regionCode&#34;:&#34;NAN&#34;,&#34;latitude&#34;:34.0894,&#34;longitude&#34;:70.683,&#34;population&#34;:0},{&#34;id&#34;:3301438,&#34;wikiDataId&#34;:&#34;Q2714271&#34;,&#34;name&#34;:&#34;Adraskan District&#34;,&#34;country&#34;:&#34;Afghanistan&#34;,&#34;countryCode&#34;:&#34;AF&#34;,&#34;region&#34;:&#34;Herat&#34;,&#34;regionCode&#34;:&#34;HER&#34;,&#34;latitude&#34;:33.705277777,&#34;longitude&#34;:61.995555555,&#34;population&#34;:0}],&#34;links&#34;:[{&#34;rel&#34;:&#34;first&#34;,&#34;href&#34;:&#34;/v1/geo/cities?offset=0&amp;limit=5&#34;},{&#34;rel&#34;:&#34;next&#34;,&#34;href&#34;:&#34;/v1/geo/cities?offset=5&amp;limit=5&#34;},{&#34;rel&#34;:&#34;last&#34;,&#34;href&#34;:&#34;/v1/geo/cities?offset=71955&amp;limit=5&#34;}],&#34;metadata&#34;:{&#34;currentOffset&#34;:0,&#34;totalCount&#34;:71958}} .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/30/API.html",
            "relUrl": "/java/jupyter/2022/09/30/API.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Mid-term",
            "content": "I’m able to access AWS at home and at school . | AWS access | Personal Spring Github | Fastpages Github | Shared Spring Github | Team Fastpages Github | .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/09/29/MidTerm.html",
            "relUrl": "/hacks/2022/09/29/MidTerm.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "TT 6 Design Starters",
            "content": "Part 1 Project Design . PBL Plan | Figma Wireframes | . Part 2 Fibonacci . Class running fibonacci | . Part 3 Javascript Tutorial . Javascript | Calculator | . Ticket Issue #6 .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/09/25/TT6.html",
            "relUrl": "/hacks/2022/09/25/TT6.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Javascript",
            "content": "Console Log Output . console.log(&quot;Hello, World!&quot;); . Hello, World! . var msg = &quot;Hello, World!&quot;; console.log(msg); function logIt(output) { console.log(output); } logIt(msg); . Hello, World! Hello, World! . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Building a Person Function/Class Object . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Hacks . Mean Median Mode Range Calculator .",
            "url": "https://tangalice.github.io/alicetang/javascript/jupyter/2022/09/25/Javascript.html",
            "relUrl": "/javascript/jupyter/2022/09/25/Javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Fibonacci Class",
            "content": "Original Code . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . For Loop . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; public class Fibo { String name; int size; int hashID; ArrayList&lt;Long&gt; list; HashMap&lt;Integer, Object&gt; hash; long executionTime; public Fibo() { this(20); } public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } protected void init() { final long startTime = System.nanoTime(); this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); this.executionTime = System.nanoTime() - startTime; } public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } public long getNth() { return list.get(this.size - 1); } public Object getNthSeq(int i) { return hash.get(i); } public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } System.out.println(&quot;Init method runtime = &quot; + this.executionTime); } static class FiboFor extends Fibo { public FiboFor() { super(20); } public FiboFor(int n) { super(n); } @Override protected void init() { final long startTime = System.nanoTime(); this.name = &quot;For Loop Demonstration&quot;; long[] numbers = {0, 1}; for (int i = 0; i &lt; this.size; i++) { this.setData(numbers[0]); numbers = new long[] {numbers[1], numbers[0] + numbers[1]}; } this.executionTime = System.nanoTime() - startTime; } } static public void main(String[] args) { FiboFor test1 = new FiboFor(); test1.print(); } } Fibo.main(null); . Init method = For Loop Demonstration fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 56979 . While Loop . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; public class Fibo { String name; int size; int hashID; ArrayList&lt;Long&gt; list; HashMap&lt;Integer, Object&gt; hash; long executionTime; public Fibo() { this(20); } public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } protected void init() { final long startTime = System.nanoTime(); this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); this.executionTime = System.nanoTime() - startTime; } public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } public long getNth() { return list.get(this.size - 1); } public Object getNthSeq(int i) { return hash.get(i); } public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } System.out.println(&quot;Init method runtime = &quot; + this.executionTime); } static class FiboWhile extends Fibo { public FiboWhile() { super(20); } public FiboWhile(int n) { super(n); } @Override protected void init() { final long startTime = System.nanoTime(); this.name = &quot;While Loop Demonstration&quot;; long[] numbers = {0, 1}; int i = 0; while (i &lt; this.size) { this.setData(numbers[0]); numbers = new long[] {numbers[1], numbers[0] + numbers[1]}; i++; } this.executionTime = System.nanoTime() - startTime; } } static public void main(String[] args) { FiboWhile test2 = new FiboWhile(); test2.print(); } } Fibo.main(null); . Init method = While Loop Demonstration fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 630113 . Recursion . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; public class Fibo { String name; int size; int hashID; ArrayList&lt;Long&gt; list; HashMap&lt;Integer, Object&gt; hash; long executionTime; public Fibo() { this(20); } public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } protected void init() { final long startTime = System.nanoTime(); this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); this.executionTime = System.nanoTime() - startTime; } public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } public long getNth() { return list.get(this.size - 1); } public Object getNthSeq(int i) { return hash.get(i); } public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } System.out.println(&quot;Init method runtime = &quot; + this.executionTime); } static class FiboRecursion extends Fibo { public FiboRecursion() { super(20); } public FiboRecursion(int n) { super(n); } @Override protected void init() { final long startTime = System.nanoTime(); this.name = &quot;Recursion Method Demonstration&quot;; int counter = 0; long[] numbers = {0, 1}; increment(numbers, counter); this.executionTime = System.nanoTime() - startTime; } public void increment(long[] numbers, int counter) { this.setData(numbers[0]); if (counter &lt; this.size - 1) { numbers = new long[] {numbers[1], numbers[0] + numbers[1]}; increment(numbers, counter + 1); } } } static public void main(String[] args) { FiboRecursion test3 = new FiboRecursion(); test3.print(); } } Fibo.main(null); . Init method = Recursion Method Demonstration fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 52159 . Hacks . Skill 1.B: differnet types of loops and methods of program were used for each situation. A for loop, while loop, and recursion were used to show different methods of achieving the same fibonacci calculations. . | Skill 4.C: The for loop, while loop and recursion methods all yield the same results because they are printed in the same format. Different types of loops don&#39;t necssarily change the oput if implmented in the same way with the same purpose. This is the case with this method, their ouputs are the same. . | Skill 5.A: Recursion runs faster than for and while loops since it is not a loop and doesn&#39;t have to repeat code. But all the methods work equally well and the differnece in time for these fibonacci calculations are not noticable. . | .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/25/Fibonacci.html",
            "relUrl": "/java/jupyter/2022/09/25/Fibonacci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Monkeys",
            "content": "class MonkeyLoop { String [][] monkeys; public MonkeyLoop() { monkeys = new String[][]{ //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot;, //[0][3] legs &quot; Alice &quot; //[0][4] name }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot;, &quot; Iris &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot;, &quot; Samaya &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot;, &quot; Sarayu &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot;, //[4][3] &quot; Mort &quot; //[4][4] }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { for (int row = 0; row &lt; monkeyCount; row++) { for (int col = 0; col &lt; monkeys[row].length; col++) { System.out.print(monkeys[row][col] + &quot; &quot;); System.out.println(); } System.out.println(); } if (i &gt; 1){ System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); } else{ System.out.println(i + &quot; little monkey jumping on the bed...&quot;); } System.out.println(&quot;One fell down and bumped his head!&quot;); System.out.println(&quot;Mama called the doctor and the doctor said,&quot;); if (i == 1){ System.out.println(&quot;Put those monkeys right to bed!&quot;); } else{ System.out.println(&quot;No more monkeys jumping on the bed!&quot;); } System.out.println(); monkeyCount -= 1; } System.out.println(&quot;Now there&#39;s no little monkeys jumping on the bed&quot;); System.out.println(&quot;&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new MonkeyLoop().printPoem(); } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Alice ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ Iris ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 Samaya ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ Sarayu (◕‿◕✿) _⍾_/ ==4== _/ _ Mort 5 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said, No more monkeys jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Alice ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ Iris ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 Samaya ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ Sarayu 4 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said, No more monkeys jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Alice ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ Iris ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 Samaya 3 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said, No more monkeys jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Alice ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ Iris 2 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said, No more monkeys jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Alice 1 little monkey jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said, Put those monkeys right to bed! Now there&#39;s no little monkeys jumping on the bed THE END . Horizontal vs Vertical . Printing monkeys horizontally vs vertically. I switched the order of the for loops. The row loop goes inside of the colomn loop in order to print the monkeys horizontally, and vice versa for vertically. . class MonkeyLoop { String [][] monkeys; public MonkeyLoop() { monkeys = new String[][]{ //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ &quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot; ʕ ͡° ͜ʖ ° ͡ʔ &quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) { System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); for (int col = 0; col &lt; monkeys[col].length; col++) { for (int row = 0; row &lt; monkeyCount; row++) { System.out.print(monkeys[row][col] + &quot; &quot;); } System.out.println(); } monkeyCount -= 1; } System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;-&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new MonkeyLoop().printPoem(); } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed - THE END . Hacks Questions . In imperative programming, functions are implicitly coded in every step required to solve a problem. Every operation is coded and the code itself specifies how the problem is to be solved, which means that pre-coded models are not called on. | Is this program in more of an Imperative Programming Style or OOP Style? Explain. Even though this program has some properties of OOP such as objects (the array) specific to the monkeyloop class and a constructor, it is more like the imperative programming style. Every step needed to run the program is coded in the printPoem function and the single command in main is just to run that method. . | Are the monkeys objects? Yes. Arrays are objects and even though in this program their content is not being alterned. You can still manipulate the data in the monkey array through the index if you wanted to . | How to access 2-D arrays? You can access the 2-D array by using the row index value and column index value: Name_of_the Array[Row_index][Column_index]; . | In this program the row represented the monkey number and the colomn represented each body part | .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/19/monkeys.html",
            "relUrl": "/java/jupyter/2022/09/19/monkeys.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "TT 5 Free Response Q1",
            "content": "Part 1 Free Response Question 1 . 2018 FRQ1 | 2019 FRQ1 | . Part 2 Iterations with 2D Arrays . Monkeys | . Other . Deployed Team Site | Agile Methodology Notes | Agile Team Scrum Board | . Ticket Issue #5 .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/09/19/TT5.html",
            "relUrl": "/hacks/2022/09/19/TT5.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "2019 FRQ1",
            "content": "The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. . public class APCalendar { /** Returns true if year is a leap year and false otherwise.*/ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { /* to be implemented in part (a) */ } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { /* to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } . | (a) Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. • isLeapYear(year) returns true if year is a leap year and false otherwise. Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. /** Returns the number of leap years between year1 and year2, inclusive. . Precondition: 0 &lt;= year1 &lt;= year2 */ | . public static int numberOfLeapYears(int year1, int year2) . public static int numberOfLeapYears(int year1, int year2) { int count=0; for (int i = year1; i &lt;= year2; i++) { if(isLeapYear(i)) { count += 1; } } return count; } . (b) Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. /** Returns the value representing the day of the week for the given date . (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. | Precondition: The date represented by month, day, year is a valid date. */ | . public static int dayOfWeek(int month, int day, int year) . public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int NthDay = dayOfYear(month, day, year); int returnDay = (startDay + nthDay - 1) % 7; return returnDay; } .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/19/2019FRQ1.html",
            "relUrl": "/java/jupyter/2022/09/19/2019FRQ1.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "2018 FRQ1",
            "content": "This question involves reasoning about a simulation of a frog hopping in a straight line. The frog attempts to hop to a goal within a specified number of hops. The simulation is encapsulated in the following FrogSimulation class. You will write two of the methods in this class. . public class FrogSimulation { /** Distance, in inches, from the starting position to the goal. */ private int goalDistance; /** Maximum number of hops allowed to reach the goal. */ private int maxHops; /** Constructs a FrogSimulation where dist is the distance, in inches, from the starting * position to the goal, and numHops is the maximum number of hops allowed to reach the goal. * Precondition: dist &gt; 0; numHops &gt; 0 */ public FrogSimulation(int dist, int numHops) { goalDistance = dist; maxHops = numHops; } /** Returns an integer representing the distance, in inches, to be moved when the frog hops. */ private int hopDistance() { /* implementation not shown */ } /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise.*/ public boolean simulate() { /* to be implemented in part (a) */ } /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { /* to be implemented in part (b) */ } } . | (a) Complete method simulate below. You must use hopDistance appropriately to receive full credit. /** Simulates a frog attempting to reach the goal as described in part (a). . Returns true if the frog successfully reached or passed the goal during the simulation; | false otherwise.*/ | . public boolean simulate() . public boolean simulate() { int position = 0; for (int i = 0; i &lt; maxHops; i++) { position += hopDistance(); if (position &gt;= goalDistance) { return true; } else if (position &lt; 0) { return false; } } return false; } . (b) Write the runSimulations method, which performs a given number of simulations and returns the proportion of simulations in which the frog successfully reached or passed the goal. For example, if the parameter passed to runSimulations is 400, and 100 of the 400 simulate method calls returned true, then the runSimulations method should return 0.25. Complete method runSimulations below. Assume that simulate works as specified, regardless of what you wrote in part (a). You must use simulate appropriately to receive full credit. /** Runs num simulations and returns the proportion of simulations in which the frog . successfully reached or passed the goal. | Precondition: num &gt; 0 */ | . public double runSimulations(int num) . public double runSimulations(int num) { int count = 0; for (int i = 0; i &lt; num; i++) { if(simulate()) { count +=1; } } return (double)count/num; } .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/19/2018FRQ1.html",
            "relUrl": "/java/jupyter/2022/09/19/2018FRQ1.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "TT 4 Backend Development",
            "content": "Part 1 Ifs and Expressions Lesson . Lesson | . Part 2 AWS Deployment . Deployed Site | . Part 3 Focus and Habits . Notes from Video + Extra | . Other . Skills and Interests | Resume | . Ticket Issue #4 .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/09/12/TT4.html",
            "relUrl": "/hacks/2022/09/12/TT4.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Focus and Habits",
            "content": "Video Notes . College students will sacrifice their mental health for their grades and for their classes | Build habits for yourself about doing things you love | Help others to make yourself feel better | Better physical heatlh can help improve mental health, workout or go on walks | Be grateful for the opportunities and resources you have | Don’t compare yourself to other, be the best version of yourself | . Notes of Gratitude . Dear Mom, I am so grateful that you are always there for me. Even when I have to ask you about the most simple questions when I’m doing homework, you always immediately stop what you are doing to help me. I feel comfortable to talk to you about whatever I want. I’m so lucky to have such a supportive mom. . Dear Mrs. Ayres, I am so grateful to have had you as my US history teacher. Your lessons were always so engaging and you put so much thought into them. I’m grateful you had so much passion for teaching and that made me look forward to your class everyday. . Gratitude List . I’m gratefull I live in San Diego | I’m grateful for my supportive friendgroup | I’m grateful for my best friend Aishani who’s always there for me | I’m grateful for a loving family | I’m grateful to not have to worry about money | . Goals . Sleep earlier | Stop procrastinating | Become more self driven and motivated | Start working out consistently | Fix my eating schedule | Get good grades and into a good college | .",
            "url": "https://tangalice.github.io/alicetang/2022/09/12/FocusHabits.html",
            "relUrl": "/2022/09/12/FocusHabits.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Skills and Interests",
            "content": "Inside School Extracurriculars . present . SD STEM Startups (Vice President) | NHS (member) | The Featheralist (Artist) | DNHS Food Bank (member) | DNHS Branch of UCSD OAP (Vice President) | . Outside School Extracurriculars . past and present . 12 week remote TechSmart Internship | 8 week REHS internship | UCSD Outreach Ambassador | Community Volunteering (English Tutoring) | Art | .",
            "url": "https://tangalice.github.io/alicetang/2022/09/11/Skills.html",
            "relUrl": "/2022/09/11/Skills.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Boolean and If Expressions",
            "content": "IF Statement . An If statement is a conditional statement that, when true, runs the code inside the statement. . //condition inside if statment is true so system outprints &quot;Hi&quot; if (true) { System.out.println(&quot;Hi&quot;); } //true and not false so system prints out &quot;Hello&quot; if (true &amp;&amp; !false) { System.out.println(&quot;Hello&quot;); } . Hi Hello . If/Else Statement . The If/Else statement extends the If statement by specifying an action if the If (true/false expression) is false. With the If statement, a program will execute the true code block or do nothing. With the If/Else statement, the program will execute either the true code block or the false code block so something is always executed with an If/Else statement. . int x = 10; //if statement is false so the else statment runs if (x&lt;5) { System.out.println(&quot;Hello&quot;); } else { System.out.println(&quot;Greater than 5&quot;); } . Greater than 5 . If/ElseIf Statement . The If/ElseIf statement allows you to create a chain of If statements. You are able to test more than two conditions unlike the If/Else statment. The If statements are evaluated in order until one of the If expressions is true or the end of the If/ElseIf chain is reached. If the end of the If/ElseIf chain is reached without a true expression, no code blocks are executed. . int x = 9; //false conditions until last else if statement so that one runs if (x&lt;2){ System.out.println(&quot;Less than 2&quot;); } else if (x&lt;4){ System.out.println(&quot;Less than 4&quot;); } else if (x&lt;6){ System.out.println(&quot;Less than 6&quot;); } else if (x&lt;8){ System.out.println(&quot;Less than 8&quot;); } else if (x&lt;10){ System.out.println(&quot;Less than 10&quot;); } . Less than 10 . If/ElseIf/Else Statement . If/ElseIf/Else statements are the same as If/ElseIf statements except they have a trailing Else statement added at the end. This way there is executable code if none of the If or Else If statments are true. . char x = &#39;d&#39;; //none of the if or elseif statments are true so it goes through the chain and runs the else statment if (x==&#39;a&#39;){ System.out.println(&quot;x is a&quot;); } else if (x==&#39;b&#39;){ System.out.println(&quot;x is b&quot;); } else if (x==&#39;c&#39;){ System.out.println(&quot;x is c&quot;); } else { System.out.println(&quot;not a, b, or c&quot;); } . not a, b, or c . If/ElseIf/Else statments can be used to decide different program outputs depending on what the user inputted. For example, they would be helpful in a menu program. . Scanner inputStream = new Scanner(System.in); String userInputStr; int choice; System.out.println(&quot;choose an integer 1-5: &quot;); userInputStr = inputStream.nextLine(); choice = Integer.parseInt(userInputStr); //get user input for choice System.out.println(choice); //false conditions until choice equals 4 and only that else if statement runs if (choice==1){ System.out.println(&quot; nyou chose one&quot;); } else if (choice==2){ System.out.println(&quot; nyou chose two&quot;); } else if (choice==3){ System.out.println(&quot; nyou chose three&quot;); } else if (choice==4){ System.out.println(&quot; nyou chose four&quot;); } else if (choice==5){ System.out.println(&quot; nyou chose five&quot;); } else { System.out.println(&quot;invalid input&quot;); } . choose an integer 1-5: 4 you chose four . Switch Statement . A switch statement is usually more efficient than a set of nested ifs. The switch statement is a control flow statement. It evaluates a user selection and different parts of code can be executed quickly. Below, a switch statement will preform the same function as the chain of nested ifs above. . Scanner inputStream = new Scanner(System.in); String userInputStr; int choice; System.out.println(&quot;choose an integer 1-5: &quot;); userInputStr = inputStream.nextLine(); choice = Integer.parseInt(userInputStr); System.out.println(choice); switch (choice) { //based on what the user inputted for the choice variable, different cases will run case 1: System.out.println(&quot; nyou chose one&quot;); break; case 2: System.out.println(&quot; nyou chose two&quot;); break; case 3: System.out.println(&quot; nyou chose three&quot;); break; //default prevents it from moving on to and running the following cases case 4: System.out.println(&quot; nyou chose four&quot;); break; case 5: System.out.println(&quot; nyou chose five&quot;); break; default: System.out.println(&quot;invalid input&quot;); } . choose an integer 1-5: 4 you chose four . Boolean Expressions . A Boolean expression is a logical statement that is either True or False. Boolean expressions can compare any type of data if both parts of the expression have the same basic data type. A Boolean expression can be a combination of the Boolean constants true or false. . Logic Gates . Logic gates are used to carry out logical operations on single or multiple binary inputs and give one binary output. In simple terms, logic gates are the electronic circuits in a digital system. . . Buffer/YES : output is the same as the input | NOT : output is the opposite of the input | AND : returns true if both inputs are true | NAND : returns false if both inputs are true | OR : returns true if at least one of the inputs are true, returns false if both inputs are false | NOR : returns false if at least one of the inputs are true, returns true if both inputs are false | XOR : returns true if the two inputs are different | XNOR : returns true if two inputs are the same | . . These tables demonstrate the input and output combinations of different logic gates . Tips to help remember the symbols: each main shape is unique to a logic gate (ex: triangle = buffer/YES) | a small circle represents the addition of &quot;NOT&quot; to the logic gate | a small curved line represents the addition of &quot;exclusive&quot; or &quot;X&quot; to the logic gate | . | . De Morgan&#39;s Law . DeMorgan&#39;s laws tell us how to transform logical expressions (with multiple AND and/or OR statements) using the NOT operator. . (not(A and B)) is equal to (not A or not B) | (not(A or B)) is equal to (not A and not B) | (not(A and B)) is not equal to (not A and not B) | . . Syntax . union symbol (∪) : OR | intersection symbol (∩) : AND | apostrophe (&#39;) : NOT | . boolean a = true; boolean b = false; //Not (A and B) boolean result1 = !(a &amp;&amp; b); //Not A or Not B boolean result2 = ((!a) || (!b)); if (result1 == result2){ System.out.println(&quot;result 1 and 2 are the same&quot;); } else{ //result 1 and 2 will always be equal, the code should never reach here System.out.println(&quot;Error&quot;); } //Not (A or B) boolean result3 = !(a || b); //Not A and Not B boolean result4 = ((!a) &amp;&amp; (!b)); if (result3 == result4){ System.out.println(&quot;result 3 and 4 are the same&quot;); } else{ //result 3 and 4 will always be equal, the code should never reach here System.out.println(&quot;Error&quot;); } . result 1 and 2 are the same result 3 and 4 are the same . Truth Tables . A truth table is a breakdown of a logic function by listing all possible values the function can attain. Such a table typically contains several rows and columns, with the top row representing the logical variables and combinations, in increasing complexity leading up to the final function. . Resources . https://www.computerhope.com/jargon/i/ifstatme.htm | https://eecs.oregonstate.edu/ecampus-video/CS161/template/chapter_4/ifelse.html | https://www.onlinemathlearning.com/demorgans-law.html | https://blog.penjee.com/what-is-demorgans-law-in-programming-answered-with-pics/ | https://www.cs.utah.edu/~germain/PPS/Topics/truth_tables_and_logic.html | .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/10/Ifs.html",
            "relUrl": "/java/jupyter/2022/09/10/Ifs.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Letter of Rec",
            "content": "Resume | Highschool Transcript | . Bulleted Items . 5 bulleted items on qualities as a student . OPEN MINDED (walked into csp last year with very narrow view of cs, saw live reviews in a grade oriented perspective only, finally started to view CSP and CSA differently, as oppurtunity to demonstrate my progress and learn) | CREATIVE (create very detailed and accurate wireframes using FIGMA (aesthetic and visually appealing as well as user friendly), took creative liberty and created a logo with different themed version and a slogan for the PBL website (Study website -&gt; STUD the study owl) ) | HIGH ACHIEVER (always looking for more opportunities to complete more work than just the required hacks. For example, in the innovation using object hacks I worked on an extra code exploration where I explored mutators, constructors, and accessors. Another example is when we were learning boolean and if expressions I went one step further and explored truth tables and logic gates. ) | COLLABORATIVE (worked very well in teams all of last year in CSP and this tri in CSA) | CURIOUS (wanted to explore other programming languages and other applications of computer science -&gt; applied for a tech research internship involving MatLab programming language, dual enrolled at a foothill communtiy college and took a course on Object Oriented Programming in Java over the summer ) | . 5 bulleted items on technical accomplishments . manage team as scrum master (create and delegate tasks, create and manage scrumboard, organize issues) | deployment of individual project on AWS EC2 instance | PBL project planning - intricate FIGMA wireframes, flowchart of linking website pages | javascript, java, and python backend work (logic word game feature (wordle), sticky note note-taker with local storage implemented (can edit, add, delete notes)) | html, css, scss front end work (APIs, cat facts api, city facts api)(made homepages, navbar, and other pages more visually appleaing and following a cohesive theme)(light mode and dark mode with scss) | took oppurtunity to learn and work with MatLab programming language in UCSD REHS internship | . Original Letter of Rec Prep: . When I first contacted you about writing a letter of rec for me for a summer internship you asked for 3 of my best moments from computer science principles. Here is exactly what I wrote before. . One very memorable moment for me was the end of trimester 1 of AP CSP. For the FINAL CSP Video I was asked along with a couple other students to help grade other people’s videos because the video I had made was very good and successfully connected all the college board topics to my work from the TRI. This moment in CSP is pretty important to me because prior to this happening I was intimidated by all of the computer science principles concepts which lead me to be very quiet in class and not participate as much during team live reviews. But I felt like my accomplishments had been recognized at this moment which lead me to be more confident in my programming skills during trimester 2. The increase and confidence also encouraged me to speak up more during discussions. . | Another memorable moment for me was the mid term vocabulary live review. Samaya was my partner and we got live reviewed together. I felt that this live review was different from all the previous ones. A really good conversation took place. It went beyond just what the vocab words meant and we discussed how the terms/concepts related to our code. I started seeing live reviews as an opportunity to further my knowledge and expand on what I had already learned instead of just a review to get a grade. . | A third memorable moment for me was when I got my cat facts API to work near the start of the second trimester. I had struggled for a bit and could not get my API to work. So I came in during tutorial for the first time to ask you for help. Previously I had been hesitant to reach out for help because I wasn’t confident in my programming skills at all. But after we worked together and I finally got my API to run correctly it was really rewarding for me. . | . Additions to the Original Letter: . Here is some progress I made in or through your classes following the original letter of rec. . I felt confident enough to apply to an REHS internship at the SDSC of UCSD because I took your AP CSP class. I applied for a project about the Visualization of Ultradian Rhythms in Sleep EEG and MEG. This internship required me to be familiar with the Python language and just computer science in general because I would be working with a language that I’ve never encountered called MatLab. During my interview for the position, I showed my research mentor snippets of python and javascript code that I wrote in your class. I also showed him the deployed PBL websites we spent the majority of the year designing and creating to demonstrate that I was familiar with programming. During the course of the internship, I worked with python and Matlab to develop different algorithms to transform raw EEG and MEG sleep data from 4 human subjects into visualizations like 2D Topographic Brain Maps and 3D Spatiotemporal Isosurfaces. I got to experience a real application of coding because of the foundations I built in computer science in your class. . | In the first few weeks of AP CSA, which will be the start of the second year I’m spending as your student, I can already feel the differences compared to the start of last year in AP CSP. During the very beginning of last school year, I struggled to understand everything; it felt like the class was taking off way too fast. Admittedly a lot of my weekly work in the live reviews were scuffed together last minute and included content that I still did not understand at the moment. I remember hoping during the team live reviews that you would not call on me to explain anything because I didn’t understand all the concepts. Over the past year, I feel that I’ve grown a lot as a programmer. Now, I understand everything that I am doing when I work on the weekly hacks, and if I am stuck it is quickly resolved. I’ve walked into all of the team live reviews so far this year feeling prepared. I find it funny compared to last year how I now sometimes feel like there is not enough time during live reviews to show you everythign I worked on during the week. . | .",
            "url": "https://tangalice.github.io/alicetang/2022/09/06/LOR.html",
            "relUrl": "/2022/09/06/LOR.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "TT 3 Innovation Using Objects",
            "content": "Part 1 Menu Exploration . Personal Menu | Team Math Options Menu | Team Repo | Team Roles For Features | . Part 2 Documentation and Analysis . Explain where a Class is defined: You define a class whenever you need to add variables, objects or methods to your code. Here a class called Menu is being defined. It will hold different variables, objects and methods. public class Menu { . | Explain where an instances of a Class is defined: An instance of a class is defined when you create an object of that class. Here in Code.org a new object of the Painter class called myPainter is being created Painter myPainter = new Painter(); . | Explain where an object is Calling a Method: An object calls a method when it wants to preform that action and execute the code. Here the Menu class is calling its main method to execute. Menu.main(null); . | Explain where an object is Mutating data: The Integer object is using the method parseInt to mutate the user input, which automatically enters as a string, into an interger. This integer is then stored in a new variable called userNum userNum = Integer.parseInt(userInputStr); . | Constructors: methods with the same name as the class it is in. It is a speacial methods used to initialize objects. Here is a constructor that takes parameters inside of a class called ThreeString - Exploration Code //constructor that takes parameters ThreeString(String str1, String str2, String str3) { if (validString(str1) &amp;&amp; validString(str2) &amp;&amp; validString(str3)) { string1 = str1; string2 = str2; string3 = str3; } else { string1 = DEFAULT_STRING; string2 = DEFAULT_STRING; string3 = DEFAULT_STRING; } } . | Mutators: methods that mutate the value of a private member variable. Here the methods setString1 sets the value of a private member of the ThreeString class called string1 public boolean setString1(String str) { boolean status = false; if (validString(str)) { string1 = str; status = true; } return status; } . | Accessors: methods that accesses and returns the value of a private member variable. Here the getString1 method acesses and returns the value of the private member string1. public String getString1() { return string1; } . | Describe Console, GUI differences, or Code.org differences: A console is not as visual as the other two. It requires the user to enter inputs and returns respective outputs. To code, it requires a good understanding of script and syntax. The GUI (graphic user interface) is more user friendly because it has a visual display and it is a more clickable platform. But you can’t really perform multiple tasks at once. On Code.org there is the painter as a visual object to help understand exactly how the code implements. The file and public class name should be the same. This platform is great for beginners to begin to learn how to code. | . Part 3 Other . Unit 1 completed on Code.org | . Ticket Issue #3 .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/09/05/TT3.html",
            "relUrl": "/hacks/2022/09/05/TT3.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } Scanner input = new Scanner(System.in); Scanner inputStream = new Scanner(System.in); String userInputStr; int numofNum, userNum, fact, tempType; double celcius, farenheit, kelvin, medianNum, sdNumber; char endReply; public static final String REPORT = &quot; nFactorial of &quot;; public static final String FCONVERT = &quot; nConverted to Farenheit: &quot;; public static final String KCONVERT = &quot; nConverted to Kelvin: &quot;; //median public static double findMed(double arr[], int n) { // sort the array Arrays.sort(arr); // check for even case if (n % 2 != 0) { return (double)arr[n / 2]; } return (double)(arr[(n - 1) / 2] + arr[n / 2]) / 2.0; } //factorial public static int findFact(int n) { int f = 1; for (int i=1; i&lt;n+1; i++) { f = f * i; } return f; } // standard deviation public static double sdcalc (double[] numsSD) { double sum = 0.0; for (int i=0; i&lt;numsSD.length; i++) { sum += numsSD[i]; } double average = sum/numsSD.length; double sdsum = 0.0; double standev = 0.0; for (int j=0; j&lt;numsSD.length; j++) { sdsum += Math.pow(numsSD[j]-average, 2); standev = Math.sqrt(sdsum/numsSD.length); } return standev; } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Factorial&quot;); System.out.println(&quot;2 - Temperature Converter&quot;); System.out.println(&quot;3 - Median&quot;); System.out.println(&quot;4 - Number Sort&quot;); System.out.println(&quot;5 - Standard Deviation&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Factorial &quot;); System.out.print(&quot; nInput an integer: &quot;); userInputStr = input.nextLine(); userNum = Integer.parseInt(userInputStr); fact = findFact(userNum); System.out.print(REPORT + userNum +&quot; is &quot;+fact); break; case 2: // initialize variables celcius = 0.; farenheit = 0.; kelvin = 0.; System.out.print(&quot;This program converts degress in Celcius to Farenheit or Kelvin n&quot;); // get degress in celcius from user System.out.print(&quot; nTemperature in Celcius: &quot;); userInputStr = inputStream.nextLine(); celcius = Double.parseDouble(userInputStr); System.out.print(celcius); // input from user, what do they want to convert to while(true) { System.out.print(&quot; nConvert to (1)Farenheit or (2)Kelvin: &quot;); userInputStr = inputStream.nextLine(); tempType = Integer.parseInt(userInputStr); if ((tempType == 1) || (tempType == 2)) { break; } else { System.out.print(tempType); System.out.println(&quot; nPlease input either 1 or 2&quot;); } } System.out.print(tempType); //conversion if (tempType == 1) //convert to farenheit { farenheit = (celcius*1.8)+32; //multiple by 1.8 and then add 32, result is a double System.out.print(FCONVERT); System.out.print(farenheit); } else //convert to kelvin { kelvin = celcius + 273.15; //add 273.15, result is a double System.out.print(KCONVERT); System.out.print(kelvin); } break; case 3: System.out.print(&quot;Median &quot;); System.out.print(&quot; nhow many values would you like to input?&quot;); userInputStr = inputStream.nextLine(); numofNum = Integer.parseInt(userInputStr); double[] arr = new double [numofNum]; //creates array with doubles, numofNum number of values in the array for (int i=0; i&lt;numofNum; i++) //gets info from user for each spot in array { System.out.print(&quot; nenter value: &quot;); userInputStr = inputStream.nextLine(); arr[i] = Double.parseDouble(userInputStr); System.out.print(arr[i]); } int n = arr.length; System.out.println(&quot; nMedian: &quot; + findMed(arr, n)); break; case 4: System.out.print(&quot;Number Sort &quot;); System.out.print(&quot; nhow many values would you like to input?&quot;); userInputStr = inputStream.nextLine(); numofNum = Integer.parseInt(userInputStr); double[] arr2 = new double [numofNum]; //creates array with doubles, numofNum number of values in the array for (int i=0; i&lt;numofNum; i++) //gets info from user for each spot in array { System.out.print(&quot; nenter value: &quot;); userInputStr = inputStream.nextLine(); arr2[i] = Double.parseDouble(userInputStr); System.out.print(arr2[i]); } Arrays.sort(arr2); //sort array System.out.println(&quot; nSorted Numbers: &quot;); for (int i=0; i&lt;numofNum; i++) //prints each spot in array { System.out.print(arr2[i]+ &quot;, &quot;); } break; case 5: System.out.print(&quot;Standard Deviation&quot;); System.out.print(&quot; nhow many values would you like to find the standard deviation of?&quot;); userInputStr = input.nextLine(); numofNum = Integer.parseInt(userInputStr); double[] numsSD = new double [numofNum]; //creates array with doubles, nomofNum number of values in the array for (int i=0; i&lt;numofNum; i++) { System.out.print(&quot; nenter value:&quot;); userInputStr = input.nextLine(); numsSD[i] = Double.parseDouble(userInputStr); System.out.print(numsSD[i]); } sdNumber = sdcalc(numsSD); System.out.print(&quot; nthe standard deviation is &quot; +sdNumber); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Factorial 2 - Temperature Converter 3 - Median 4 - Number Sort 5 - Standard Deviation 0 - Quit - 1: Factorial Input an integer: Factorial of 7 is 5040 2: This program converts degress in Celcius to Farenheit or Kelvin Temperature in Celcius: 35.0 Convert to (1)Farenheit or (2)Kelvin: 2 Converted to Kelvin: 308.15 3: Median how many values would you like to input? enter value: 1.0 enter value: 6.0 enter value: 5.0 enter value: 7.0 Median: 5.5 4: Number Sort how many values would you like to input? enter value: 2.0 enter value: 2.0 enter value: 1.0 Sorted Numbers: 1.0, 2.0, 2.0, 5: Standard Deviation how many values would you like to find the standard deviation of? enter value:3.0 enter value:3.0 enter value:4.0 enter value:8.0 enter value:99.0 the standard deviation is 37.844946822528364 0: Goodbye, World! . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/05/Menu.html",
            "relUrl": "/java/jupyter/2022/09/05/Menu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Three String Class",
            "content": "import java.util.*; public class Explore { public static void main(String[] args) { //initializing object data String s1=&quot;aa&quot;; String s2=&quot;bb&quot;; String s3=&quot;cc&quot;; String s4=&quot;dd&quot;; String INVALIDSTR=&quot;ajfaworngvowrngvhaworgvnaer;igvnae;rigvnowihefowahg&quot; + &quot;owarhgaei;rgvn&quot;; String VALIDSTR=&quot;test2&quot;; //Instantiate four ThreeString objects ThreeString myObject1 = new ThreeString(); ThreeString myObject2 = new ThreeString(s1, s2, s3); ThreeString myObject3 = new ThreeString(); ThreeString myObject4 = new ThreeString(s2, s3, s4); System.out.println(&quot;=========Original objects========&quot;); System.out.println(&quot;Object 1: &quot;+myObject1.toString()); System.out.println(&quot;Object 2: &quot;+myObject2.toString()); System.out.println(&quot;Object 3: &quot;+myObject3.toString()); System.out.println(&quot;Object 4: &quot;+myObject4.toString()); //mutate one member in each object myObject1.setString1(s4); myObject2.setString2(s1); myObject3.setString3(s3); myObject4.setString1(s2); System.out.println(&quot;=========Mutated objects=========&quot;); System.out.println(&quot;Object 1: &quot;+myObject1.toString()); System.out.println(&quot;Object 2: &quot;+myObject2.toString()); System.out.println(&quot;Object 3: &quot;+myObject3.toString()); System.out.println(&quot;Object 4: &quot;+myObject4.toString()); //Mutator Tests System.out.println(&quot; n=========Mutator tests========== n&quot;); //Test 1, unsuccessful if (myObject1.setString1(INVALIDSTR)) { System.out.println(&quot;TEST1: setString1 mutator call successful&quot;); System.out.println(&quot;myObject1.string1 is &quot;+ myObject1.getString1()); } else { System.out.println(&quot;TEST1: setString1 mutator call unsuccessful&quot;); System.out.println(&quot;myObject1.string1 is &quot;+ myObject1.getString1()); } //Test 2, successful if (myObject3.setString3(VALIDSTR)) { System.out.println(&quot;TEST2: setString1 mutator call successful&quot;); System.out.println(&quot;myObject3.string3 is &quot;+ myObject3.getString3()); } else { System.out.println(&quot;TEST2: setString1 mutator call unsuccessful&quot;); System.out.println(&quot;myObject3.string3 is &quot;+ myObject3.getString3()); } //Accessor Tests System.out.println(&quot; n=========Acessor calls========== n&quot;); System.out.println(&quot;myObject1.string1 is &quot;+ myObject1.getString1()); System.out.println(&quot;myObject2.string2 is &quot;+ myObject2.getString2()); } } class ThreeString { //private members private String string1; private String string2; private String string3; //public constants public static final int LENGTH_MIN = 1; public static final int LENGTH_MAX = 50; public static final String DEFAULT_STRING = &quot; (undefined) &quot;; //default constructor ThreeString() { string1 = DEFAULT_STRING; string2 = DEFAULT_STRING; string3 = DEFAULT_STRING; } //constructor that takes parameters ThreeString(String str1, String str2, String str3) { if (validString(str1) &amp;&amp; validString(str2) &amp;&amp; validString(str3)) { string1 = str1; string2 = str2; string3 = str3; } else { string1 = DEFAULT_STRING; string2 = DEFAULT_STRING; string3 = DEFAULT_STRING; } } // Mutators and Accessors for all 3 private members- public boolean setString1(String str) { boolean status = false; if (validString(str)) { string1 = str; status = true; } return status; } public String getString1() { return string1; } public boolean setString2(String str) { boolean status = false; if (validString(str)) { string2 = str; status = true; } return status; } public String getString2() { return string2; } public boolean setString3(String str) { boolean status = false; if (validString(str)) { string3 = str; status = true; } return status; } public String getString3() { return string3; } // //method to display all member information public String toString() { return string1+&quot; &quot;+string2+&quot; &quot;+string3 +&quot; n&quot;; } // private method to check if string is valid private boolean validString( String str ) { if ((str.length() &gt; LENGTH_MAX) || (str.length() &lt; LENGTH_MIN)) { return false; } else { return true; } } } Explore.main(null); . =========Original objects======== Object 1: (undefined) (undefined) (undefined) Object 2: aa bb cc Object 3: (undefined) (undefined) (undefined) Object 4: bb cc dd =========Mutated objects========= Object 1: dd (undefined) (undefined) Object 2: aa aa cc Object 3: (undefined) (undefined) cc Object 4: bb cc dd =========Mutator tests========== TEST1: setString1 mutator call unsuccessful myObject1.string1 is dd TEST2: setString1 mutator call successful myObject3.string3 is test2 =========Acessor calls========== myObject1.string1 is dd myObject2.string2 is aa .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/04/ThreeString.html",
            "relUrl": "/java/jupyter/2022/09/04/ThreeString.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Number Sort",
            "content": "import java.util.Scanner; public class Sort{ public static void main(String[] args) { String userInputStr; int numofNum; Scanner inputStream = new Scanner(System.in); System.out.print(&quot;how many values would you like to input?&quot;); userInputStr = inputStream.nextLine(); numofNum = Integer.parseInt(userInputStr); double[] arr = new double [numofNum]; //creates array with doubles, numofNum number of values in the array for (int i=0; i&lt;numofNum; i++) //gets info from user for each spot in array { System.out.print(&quot; nenter value: &quot;); userInputStr = inputStream.nextLine(); arr[i] = Double.parseDouble(userInputStr); System.out.print(arr[i]); } Arrays.sort(arr); //sort array System.out.println(&quot; n nSorted Numbers: &quot;); for (int i=0; i&lt;numofNum; i++) //prints each spot in array { System.out.print(arr[i]+ &quot;, &quot;); } } } Sort.main(null); . how many values would you like to input? enter value: 3.2 enter value: 5.7 enter value: 1.2 enter value: 8.6 enter value: 5.4 Sorted Numbers: 1.2, 3.2, 5.4, 5.7, 8.6, .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/04/Sort.html",
            "relUrl": "/java/jupyter/2022/09/04/Sort.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Median Calculator",
            "content": "import java.util.Scanner; public class Median { public static void main(String[] args) { String userInputStr; double medianNum; int numofNum; Scanner inputStream = new Scanner(System.in); System.out.print(&quot;how many values would you like to input?&quot;); userInputStr = inputStream.nextLine(); numofNum = Integer.parseInt(userInputStr); double[] arr = new double [numofNum]; //creates array with doubles, numofNum number of values in the array for (int i=0; i&lt;numofNum; i++) //gets info from user for each spot in array { System.out.print(&quot; nenter value: &quot;); userInputStr = inputStream.nextLine(); arr[i] = Double.parseDouble(userInputStr); System.out.print(arr[i]); } int n = arr.length; System.out.println(&quot; nMedian: &quot; + findMed(arr, n)); } public static double findMed(double arr[], int n) { // sort the array Arrays.sort(arr); // check for even case if (n % 2 != 0) { return (double)arr[n / 2]; } return (double)(arr[(n - 1) / 2] + arr[n / 2]) / 2.0; } } Median.main(null); . how many values would you like to input? enter value: 2.2 enter value: 1.1 enter value: 4.4 enter value: 5.5 enter value: 3.3 enter value: 6.6 Median: 3.85 .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/02/Median.html",
            "relUrl": "/java/jupyter/2022/09/02/Median.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Factorial Calculator",
            "content": "import java.util.*; import java.lang.Math; public class Factorial { //Constants public static final String REPORT = &quot; nFactorial of &quot;; public static void main(String[] args) { String userInputStr; int userNum, fact; Scanner inputStream = new Scanner(System.in); while(true) { System.out.print(&quot; nInput an integer: &quot;); userInputStr = inputStream.nextLine(); userNum = Integer.parseInt(userInputStr); fact = findFact(userNum); System.out.print(REPORT + userNum +&quot; is &quot;+fact); System.out.print(&quot; nContinue(Yes/No)? &quot;); userInputStr = inputStream.nextLine(); char a = userInputStr.charAt(0); if ((a == &#39;y&#39;) || (a == &#39;Y&#39;)) { System.out.print(userInputStr+&quot; n&quot;); } if ((a == &#39;n&#39;) || (a == &#39;N&#39;)) { System.out.print(userInputStr); break; } } } static int findFact(int n) { int f = 1; for (int i=1; i&lt;n+1; i++) { f = f * i; } return f; } } Factorial.main(null); . Input an integer: Factorial of 7 is 5040 Continue(Yes/No)? Yes Input an integer: Factorial of 4 is 24 Continue(Yes/No)? yeah Input an integer: Factorial of 9 is 362880 Continue(Yes/No)? noo .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/09/01/Factorial.html",
            "relUrl": "/java/jupyter/2022/09/01/Factorial.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "To Do List",
            "content": "TO DO LIST . ⭐️= must do today . CSA . hacks Monday morning ⭐️ . | . Physics . 2 worksheets Monday morning ⭐️ . | . Lit . Read 2 short stories Monday morning ⭐️ . | Literary devices Tuesday 10 pm . | Read 20 more pages Friday morning . | Workshop Friday connections work Friday morning . | Allusions presentation next Monday Sep 5 . | . Stats . Worksheet Monday morning ⭐️ . | Canvas MC Monday morning ⭐️ . | . College . Ayres letter of rec ASAP . | Ask mort about letter of rec ASAP . | Prepare to meet with ozuna Friday afternoon . | Work on essays Saturday 2pm . | Finish set up common app account . | Set up UC account . | Work on list of colleges . | . Other . Online Shop . | Revive SD STEM startups . | Fix clothes . | Clean blazer shoe laces . | .",
            "url": "https://tangalice.github.io/alicetang/2022/08/29/To-Do-List.html",
            "relUrl": "/2022/08/29/To-Do-List.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "TT 2 Innovation Primatives",
            "content": "Part 1 Fastpages . Notes Page to capture new ideas/terms learned | New jupyter notebook files published (Temp Converter, Recipe Nutrition) | New post file published with image (TT 1.1) | New docx file published from google doc source (To Do List) | EC : documenting another class (Lit annotations) | . Part 2 Primitives . Java Jupyter Notebook demonstrating understanding of primitives | . Part 3 Bash . Bash Installations | . Part 4 Roles, Issues, and Scrumboard . Team Scrum Board | . . Team Roles Decided : Scrum Master - Alice, Frontend - Iris, Backend - Samaya, Deployment Manager - Sarayu | . Part 5 Other . Home Page customized | Organizational pages for Jupyter Notebooks and Hacks | 5 lessons completed on code.org | . . Ticket Issue #2 .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/08/29/TT2.html",
            "relUrl": "/hacks/2022/08/29/TT2.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Bash",
            "content": "Python --version Python2 --version . Python 3.8.8 Python 2.7.16 . conda list . # packages in environment at /Users/alicetang/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py38_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2021.05 py38_0 anaconda-client 1.7.2 py38_0 anaconda-navigator 2.0.3 py38_0 anaconda-project 0.9.1 pyhd3eb1b0_1 anyio 2.2.0 py38hecd8cb5_1 appdirs 1.4.4 py_0 applaunchservices 0.2.1 py_0 appnope 0.1.2 py38hecd8cb5_1001 appscript 1.1.2 py38h9ed2024_0 argh 0.26.2 py38_0 argon2-cffi 20.1.0 py38h9ed2024_1 asn1crypto 1.4.0 py_0 astroid 2.5 py38hecd8cb5_1 astropy 4.2.1 py38h9ed2024_1 async_generator 1.10 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 20.3.0 pyhd3eb1b0_0 autopep8 1.5.6 pyhd3eb1b0_0 babel 2.9.0 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.0 pyhd3eb1b0_2 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.shutil_get_terminal_size 1.0.0 pyhd3eb1b0_3 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi beautifulsoup4 4.9.3 pyha847dfd_0 bitarray 1.9.2 py38h9ed2024_1 bkcharts 0.2 py38_0 black 19.10b0 py_0 blas 1.0 mkl bleach 3.3.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.3.2 py38hecd8cb5_0 boto 2.49.0 py38_0 bottleneck 1.3.2 py38hf1fa96c_1 brotlipy 0.7.0 py38h9ed2024_1003 bzip2 1.0.8 h1de35cc_0 c-ares 1.17.1 h9ed2024_0 ca-certificates 2021.4.13 hecd8cb5_1 certifi 2020.12.5 py38hecd8cb5_0 cffi 1.14.5 py38h2125817_0 chardet 4.0.0 py38hecd8cb5_1003 click 7.1.2 pyhd3eb1b0_0 cloudpickle 1.6.0 py_0 clyent 1.2.2 py38_1 colorama 0.4.4 pyhd3eb1b0_0 conda 4.13.0 py38hecd8cb5_0 conda-build 3.21.4 py38hecd8cb5_0 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-package-handling 1.7.3 py38h9ed2024_1 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 contextlib2 0.6.0.post1 py_0 cryptography 3.4.7 py38h2fd3fbb_0 curl 7.71.1 hb0a8c7a_1 cycler 0.10.0 py38_0 cython 0.29.23 py38h23ab428_0 cytoolz 0.11.0 py38haf1e3a3_0 dask 2021.4.0 pyhd3eb1b0_0 dask-core 2021.4.0 pyhd3eb1b0_0 dbus 1.13.18 h18a8e69_0 decorator 5.0.6 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 py_0 distributed 2021.4.0 py38hecd8cb5_0 docutils 0.17 py38hecd8cb5_1 entrypoints 0.3 py38_0 et_xmlfile 1.0.1 py_1001 expat 2.3.0 h23ab428_2 fastcache 1.1.0 py38h1de35cc_0 filelock 3.0.12 pyhd3eb1b0_1 flake8 3.9.0 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 flask-sqlalchemy 2.5.1 pypi_0 pypi freetype 2.10.4 ha233b18_0 fsspec 0.9.0 pyhd3eb1b0_0 future 0.18.2 py38_1 get_terminal_size 1.0.0 h7520d66_0 gettext 0.21.0 h7535e17_0 gevent 21.1.2 py38h9ed2024_1 glib 2.68.1 hdf23fa2_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.0.8 py38h6ef4df4_3 greenlet 1.0.0 py38h23ab428_2 h5py 2.10.0 py38h3134771_0 hdf5 1.10.4 hfa1e0ec_0 heapdict 1.0.1 py_0 html5lib 1.1 py_0 icu 58.2 h0a44026_3 idna 2.10 pyhd3eb1b0_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.2.0 pyhd3eb1b0_0 importlib-metadata 3.10.0 py38hecd8cb5_0 importlib_metadata 3.10.0 hd3eb1b0_0 iniconfig 1.1.1 pyhd3eb1b0_0 intel-openmp 2021.2.0 hecd8cb5_564 intervaltree 3.1.0 py_0 ipykernel 5.3.4 py38h5ca1d4c_0 ipython 7.22.0 py38h01d92e1_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.3 pyhd3eb1b0_1 isort 5.8.0 pyhd3eb1b0_0 itsdangerous 1.1.0 pyhd3eb1b0_0 jbig 2.1 h4d881f8_0 jdcal 1.4.1 py_0 jedi 0.17.2 py38hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 joblib 1.0.1 pyhd3eb1b0_0 jpeg 9b he5867d9_2 json5 0.9.5 py_0 jsonschema 3.2.0 py_2 jupyter 1.0.0 py38_7 jupyter-packaging 0.7.12 pyhd3eb1b0_0 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.7.1 py38hecd8cb5_0 jupyter_server 1.4.1 py38hecd8cb5_0 jupyterlab 3.0.14 pyhd3eb1b0_1 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.4.0 pyhd3eb1b0_0 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 keyring 22.3.0 py38hecd8cb5_0 kiwisolver 1.3.1 py38h23ab428_0 krb5 1.18.2 h75d18d8_0 lazy-object-proxy 1.6.0 py38h9ed2024_0 lcms2 2.12 hf1fd2bf_0 libarchive 3.4.2 haa3ed63_0 libcurl 7.71.1 h8a08a2b_1 libcxx 10.0.0 1 libedit 3.1.20210216 h9ed2024_1 libev 4.33 haf1e3a3_0 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 h1de35cc_0 liblief 0.10.1 h0a44026_0 libllvm10 10.0.1 h76017ad_5 libpng 1.6.37 ha441bb4_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.9.0 ha12b0ac_1 libtiff 4.2.0 h87d7836_0 libuv 1.40.0 haf1e3a3_0 libwebp-base 1.2.0 h9ed2024_0 libxml2 2.9.10 h7cdb67c_3 libxslt 1.1.34 h83b36ba_0 llvm-openmp 10.0.0 h28b9765_0 llvmlite 0.36.0 py38he4411ff_4 locket 0.2.1 py38hecd8cb5_1 lxml 4.6.3 py38h26b266a_0 lz4-c 1.9.3 h23ab428_0 lzo 2.10 haf1e3a3_2 markupsafe 1.1.1 py38h1de35cc_1 mat73 0.59 pypi_0 pypi matplotlib 3.3.4 py38hecd8cb5_0 matplotlib-base 3.3.4 py38h8b3ea08_0 mccabe 0.6.1 py38_1 mistune 0.8.4 py38h1de35cc_1001 mkl 2021.2.0 hecd8cb5_269 mkl-service 2.3.0 py38h9ed2024_1 mkl_fft 1.3.0 py38h4a7008c_2 mkl_random 1.2.1 py38hb2f4e1b_2 mock 4.0.3 pyhd3eb1b0_0 more-itertools 8.7.0 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpmath 1.2.1 py38hecd8cb5_0 msgpack-python 1.0.2 py38hf7b0b51_1 multipledispatch 0.6.0 py38_0 mypy_extensions 0.4.3 py38_0 navigator-updater 0.2.1 py38_0 nbclassic 0.2.6 pyhd3eb1b0_0 nbclient 0.5.3 pyhd3eb1b0_0 nbconvert 6.0.7 py38_0 nbformat 5.1.3 pyhd3eb1b0_0 ncurses 6.2 h0a44026_1 nest-asyncio 1.5.1 pyhd3eb1b0_0 networkx 2.5 py_0 nltk 3.6.1 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1006 notebook 6.3.0 py38hecd8cb5_0 numba 0.53.1 py38hb2f4e1b_0 numexpr 2.7.3 py38h5873af2_1 numpy 1.20.1 py38hd6e1bb9_0 numpy-base 1.20.1 py38h585ceec_0 numpydoc 1.1.0 pyhd3eb1b0_1 olefile 0.46 py_0 openpyxl 3.0.7 pyhd3eb1b0_0 openssl 1.1.1k h9ed2024_0 packaging 20.9 pyhd3eb1b0_0 pandas 1.2.4 py38h23ab428_0 pandoc 2.12 hecd8cb5_0 pandocfilters 1.4.3 py38hecd8cb5_1 parso 0.7.0 py_0 partd 1.2.0 pyhd3eb1b0_0 path 15.1.2 py38hecd8cb5_0 path.py 12.5.0 0 pathlib2 2.3.5 py38hecd8cb5_2 pathspec 0.7.0 py_0 patsy 0.5.1 py38_0 pcre 8.44 hb1e8313_0 pep8 1.7.1 py38_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 8.2.0 py38h5270095_0 pip 21.3.1 pypi_0 pypi pkginfo 1.7.0 py38hecd8cb5_0 pluggy 0.13.1 py38hecd8cb5_0 ply 3.11 py38_0 prometheus_client 0.10.1 pyhd3eb1b0_0 prompt-toolkit 3.0.17 pyh06a4308_0 prompt_toolkit 3.0.17 hd3eb1b0_0 psutil 5.8.0 py38h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 py 1.10.0 pyhd3eb1b0_0 py-lief 0.10.1 py38haf313ee_0 pycodestyle 2.6.0 pyhd3eb1b0_0 pycosat 0.6.3 py38h1de35cc_1 pycparser 2.20 py_2 pycurl 7.43.0.6 py38hddc9c9b_0 pydocstyle 6.0.0 pyhd3eb1b0_0 pyerfa 1.7.3 py38h9ed2024_0 pyflakes 2.2.0 pyhd3eb1b0_0 pygments 2.8.1 pyhd3eb1b0_0 pylint 2.7.4 py38hecd8cb5_1 pyls-black 0.4.6 hd3eb1b0_0 pyls-spyder 0.3.2 pyhd3eb1b0_0 pyodbc 4.0.30 py38h0a44026_0 pyopenssl 20.0.1 pyhd3eb1b0_1 pyparsing 2.4.7 pyhd3eb1b0_0 pyqt 5.9.2 py38h655552a_2 pyrsistent 0.17.3 py38haf1e3a3_0 pysocks 1.7.1 py38_1 pytables 3.6.1 py38h4727e94_0 pytest 6.2.3 py38hecd8cb5_2 python 3.8.8 h88f2d9e_5 python-dateutil 2.8.1 pyhd3eb1b0_0 python-jsonrpc-server 0.4.0 py_0 python-language-server 0.36.2 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python.app 3 py38h9ed2024_0 pytz 2021.1 pyhd3eb1b0_0 pywavelets 1.1.1 py38haf1e3a3_2 pyyaml 5.4.1 py38h9ed2024_1 pyzmq 23.2.0 pypi_0 pypi qdarkstyle 2.8.1 py_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.2 pyhd3eb1b0_0 qtconsole 5.0.3 pyhd3eb1b0_0 qtpy 1.9.0 py_0 readline 8.1 h9ed2024_0 regex 2021.4.4 py38h9ed2024_0 requests 2.25.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.18.0 py_0 rtree 0.9.7 py38hecd8cb5_1 ruamel_yaml 0.15.100 py38h9ed2024_0 scikit-image 0.18.1 py38hb2f4e1b_0 scikit-learn 0.24.1 py38hb2f4e1b_0 scipy 1.6.2 py38hd5f7400_1 seaborn 0.11.1 pyhd3eb1b0_0 send2trash 1.5.0 pyhd3eb1b0_1 setuptools 52.0.0 py38hecd8cb5_0 simplegeneric 0.8.1 py38_2 singledispatch 3.6.1 pyhd3eb1b0_1001 sip 4.19.8 py38h0a44026_0 six 1.15.0 py38hecd8cb5_0 sniffio 1.2.0 py38hecd8cb5_1 snowballstemmer 2.1.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.3.0 pyhd3eb1b0_0 soupsieve 2.2.1 pyhd3eb1b0_0 sphinx 4.0.1 pyhd3eb1b0_0 sphinxcontrib 1.0 py38_1 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.4 pyhd3eb1b0_0 sphinxcontrib-websupport 1.2.4 py_0 spyder 4.2.5 py38hecd8cb5_0 spyder-kernels 1.10.2 py38hecd8cb5_0 sqlalchemy 1.4.7 py38h9ed2024_0 sqlite 3.35.4 hce871da_0 statsmodels 0.12.2 py38h9ed2024_0 sympy 1.8 py38hecd8cb5_0 tbb 2020.3 h879752b_0 tblib 1.7.0 py_0 terminado 0.9.4 py38hecd8cb5_0 testpath 0.4.4 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.1.0 pyh5ca1d4c_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2020.10.1 py38h0cf3a3e_2 tk 8.6.10 hb0a8c7a_0 toml 0.10.2 pyhd3eb1b0_0 toolz 0.11.1 pyhd3eb1b0_0 tornado 6.1 py38h9ed2024_0 tqdm 4.59.0 pyhd3eb1b0_1 traitlets 5.0.5 pyhd3eb1b0_0 typed-ast 1.4.2 py38h9ed2024_1 typing_extensions 3.7.4.3 pyha847dfd_0 ujson 4.0.2 py38h23ab428_0 unicodecsv 0.14.1 py38_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.4 pyhd3eb1b0_0 watchdog 1.0.2 py38h9ed2024_1 wcwidth 0.2.5 py_0 webencodings 0.5.1 py38_1 werkzeug 1.0.1 pyhd3eb1b0_0 wheel 0.36.2 pyhd3eb1b0_0 widgetsnbextension 3.5.1 py38_0 wrapt 1.12.1 py38haf1e3a3_1 wurlitzer 2.1.0 py38hecd8cb5_0 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 1.3.8 pyhd3eb1b0_0 xlwings 0.23.0 py38hecd8cb5_0 xlwt 1.3.0 py38_0 xmltodict 0.12.0 py_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 zeromq 4.3.4 h23ab428_0 zict 2.0.0 pyhd3eb1b0_0 zipp 3.4.1 pyhd3eb1b0_0 zlib 1.2.11 h1de35cc_3 zope 1.0 py38_1 zope.event 4.5.0 py38_0 zope.interface 5.3.0 py38h9ed2024_0 zstd 1.4.5 h41d2c2f_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py38_7 jupyter-packaging 0.7.12 pyhd3eb1b0_0 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.7.1 py38hecd8cb5_0 jupyter_server 1.4.1 py38hecd8cb5_0 jupyterlab 3.0.14 pyhd3eb1b0_1 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.4.0 pyhd3eb1b0_0 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /Users/alicetang/Library/Jupyter/kernels/bash java /Users/alicetang/Library/Jupyter/kernels/java javascript /Users/alicetang/Library/Jupyter/kernels/javascript python3 /Library/Frameworks/Python.framework/Versions/3.9/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Library/Frameworks/Python.framework/Versions/3.9/share/jupyter/kernels/python3 .",
            "url": "https://tangalice.github.io/alicetang/jupyter/2022/08/29/Bash.html",
            "relUrl": "/jupyter/2022/08/29/Bash.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Temperature Converter",
            "content": "import java.util.*; import java.lang.Math; public class TempConverter { //Constants public static final String FCONVERT = &quot; nConverted to Farenheit: &quot;; public static final String KCONVERT = &quot; nConverted to Kelvin: &quot;; public static void main(String[] args) { String userInputStr; //temporary String variable to hold String input from user char endReply; // yes or no so y/n is fitting int tempType; // 1 or 2 to describe the type of conversion double celcius, farenheit, kelvin; //temperature will have decimals boolean end; //boolean (true/false) to end while loop Scanner inputStream = new Scanner(System.in); // initialize variables celcius = 0.; farenheit = 0.; kelvin = 0.; end = true; System.out.print(&quot;This program converts degress in Celcius to Farenheit or Kelvin n&quot;); while(end) { // get degress in celcius from user System.out.print(&quot; nTemperature in Celcius: &quot;); userInputStr = inputStream.nextLine(); celcius = Double.parseDouble(userInputStr); System.out.print(celcius); // input from user, what do they want to conver to while(true) { System.out.print(&quot; nConvert to (1)Farenheit or (2)Kelvin: &quot;); userInputStr = inputStream.nextLine(); tempType = Integer.parseInt(userInputStr); if ((tempType == 1) || (tempType == 2)) { break; } else { System.out.print(tempType); System.out.println(&quot; nPlease input either 1 or 2&quot;); } } System.out.print(tempType); //conversion if (tempType == 1) //convert to farenheit { farenheit = (celcius*1.8)+32; //multiple by 1.8 and then add 32, result is a double System.out.print(FCONVERT); System.out.print(farenheit); } else //convert to kelvin { kelvin = celcius + 273.15; //add 273.15, result is a double System.out.print(KCONVERT); System.out.print(kelvin); } // input from user, ask if they want to do another conversion while(true) { System.out.print(&quot; nWould you like to do another conversion? (y/n): &quot;); userInputStr = inputStream.nextLine(); endReply = userInputStr.charAt(0); if ((endReply == &#39;y&#39;) || (endReply == &#39;Y&#39;)) //do another conversion { System.out.print(endReply); break; } else if ((endReply == &#39;n&#39;) || (endReply == &#39;N&#39;)) //stop here { System.out.print(endReply); end = false; break; } else //invalid input, repeat prompt { System.out.print(endReply); System.out.print(&quot; nPlease input y or n n&quot;); } } } } } TempConverter.main(null); . This program converts degress in Celcius to Farenheit or Kelvin Temperature in Celcius: 56.0 Convert to (1)Farenheit or (2)Kelvin: 4 Please input either 1 or 2 Convert to (1)Farenheit or (2)Kelvin: 1 Converted to Farenheit: 132.8 Would you like to do another conversion? (y/n): g Please input y or n Would you like to do another conversion? (y/n): y Temperature in Celcius: 36.0 Convert to (1)Farenheit or (2)Kelvin: 2 Converted to Kelvin: 309.15 Would you like to do another conversion? (y/n): N .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/08/28/TemperatureConverter.html",
            "relUrl": "/java/jupyter/2022/08/28/TemperatureConverter.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "AP Lit Annotations",
            "content": ". .",
            "url": "https://tangalice.github.io/alicetang/ap%20lit/2022/08/27/Volar.html",
            "relUrl": "/ap%20lit/2022/08/27/Volar.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Recipe Nutrition Calculator",
            "content": "// Grams of Nutrition Converter import java.util.Scanner; public class Nutrition { // food #1 constants static final String FOOD_1_NAME = &quot;all-purpose flour&quot;; static final int FOOD_1_CALORIES_P100G = 364; // in calories static final double FOOD_1_FAT_P100G = 0.98; // in grams static final double FOOD_1_CARBS_P100G = 76.31; // in grams static final double FOOD_1_PROTEIN_P100G = 10.33; // in grams // food #2 constants static final String FOOD_2_NAME = &quot;egg&quot;; static final int FOOD_2_CALORIES_P100G = 143; // in calories static final double FOOD_2_FAT_P100G = 9.5; // in grams static final double FOOD_2_CARBS_P100G = 0.7; // in grams static final double FOOD_2_PROTEIN_P100G = 13.; // in grams // food #3 constants static final String FOOD_3_NAME = &quot;cheddar cheese&quot;; static final int FOOD_3_CALORIES_P100G = 104; // in calories static final double FOOD_3_FAT_P100G = 33.; // in grams static final double FOOD_3_CARBS_P100G = 3.1; // in grams static final double FOOD_3_PROTEIN_P100G = 23; // in grams // food #4 constants static final String FOOD_4_NAME = &quot;potato&quot;; static final int FOOD_4_CALORIES_P100G = 93; // in calories static final double FOOD_4_FAT_P100G = 0.1; // in grams static final double FOOD_4_CARBS_P100G = 21.; // in grams static final double FOOD_4_PROTEIN_P100G = 2.5; // in grams // food #5 constants static final String FOOD_5_NAME = &quot;tomato paste&quot;; static final int FOOD_5_CALORIES_P100G = 82; // in calories static final double FOOD_5_FAT_P100G = 0.5; // in grams static final double FOOD_5_CARBS_P100G = 19.; // in grams static final double FOOD_5_PROTEIN_P100G = 4.3; // in grams static final String INDENT = &quot; &quot;; static final String SEPARATOR = &quot; n&quot;; public static void main(String[] args) { String recipeName, userInputStr; int recipeServingsInt, userInputInt; double totalCals, totalFat, totalCarbs, totalProtein, serCals, serFat, serCarbs, serProtein; Scanner inputStream = new Scanner(System.in); // initialize accumulator variables totalCals = 0; totalFat = 0.; totalCarbs = 0.; totalProtein = 0.; // initialize result variables serCals = 0; serFat = 0.; serCarbs = 0.; serProtein = 0.; // print menu System.out.println(&quot;- List of Possible Ingredients &quot;); System.out.println(INDENT + &quot;Food #1: &quot; + FOOD_1_NAME); System.out.println(INDENT + &quot;Food #2: &quot; + FOOD_2_NAME); System.out.println(INDENT + &quot;Food #2: &quot; + FOOD_3_NAME); System.out.println(INDENT + &quot;Food #2: &quot; + FOOD_4_NAME); System.out.println(INDENT + &quot;Food #3: &quot; + FOOD_5_NAME + SEPARATOR); // name of recipe System.out.print(&quot;What is the recipe&#39;s name? &quot;); recipeName = inputStream.nextLine(); System.out.print(recipeName); // # of servings System.out.print(&quot; nHow many servings? &quot;); userInputStr = inputStream.nextLine(); recipeServingsInt = Integer.parseInt(userInputStr); System.out.print(recipeServingsInt); if ((recipeServingsInt &gt; 15) || (recipeServingsInt &lt; 1)) //servings range { System.out.println(&quot;Error: Enter a value between 1 and 15 n&quot;); System.exit(-1); } // food #1 System.out.print(&quot; nHow many grams of &quot; + FOOD_1_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_1_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_1_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_1_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_1_PROTEIN_P100G / 100.); // food #2 System.out.print(&quot; nHow many grams of &quot; + FOOD_2_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_2_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_2_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_2_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_2_PROTEIN_P100G / 100.); // food #3 System.out.print(&quot; nHow many grams of &quot; + FOOD_3_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_3_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_3_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_3_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_3_PROTEIN_P100G / 100.); // food #4 System.out.print(&quot; nHow many grams of &quot; + FOOD_4_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_4_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_4_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_4_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_4_PROTEIN_P100G / 100.); // food #5 System.out.print(&quot; nHow many grams of &quot; + FOOD_5_NAME + &quot;? &quot;); userInputStr = inputStream.nextLine(); userInputInt = Integer.parseInt(userInputStr); System.out.print(userInputInt); if ((userInputInt &gt; 1500) || (userInputInt &lt; 0)) //grams range { System.out.println(&quot;Error: Enter a value between 0 and 1500 n&quot;); System.exit(-1); } // update accumulators totalCals += userInputInt * (FOOD_5_CALORIES_P100G / 100.); totalFat += userInputInt * (FOOD_5_FAT_P100G / 100.); totalCarbs += userInputInt * (FOOD_5_CARBS_P100G / 100.); totalProtein += userInputInt * (FOOD_5_PROTEIN_P100G / 100.); inputStream.close(); // calculate results -- serCals = totalCals / recipeServingsInt; serFat = totalFat / recipeServingsInt; serCarbs = totalCarbs / recipeServingsInt; serProtein = totalProtein / recipeServingsInt; // report results -- System.out.println(&quot; nNutrition for &quot; + recipeName + &quot; per serving&quot;); System.out.println(INDENT + &quot;Calories: &quot; + serCals + &quot; cals&quot;); System.out.println(INDENT + &quot;Fat: &quot; + serFat + &quot; grams&quot;); System.out.println(INDENT + &quot;Carbs: &quot; + serCarbs + &quot; grams&quot;); System.out.println(INDENT + &quot;Protein: &quot; + serProtein + &quot; grams&quot;); } } Nutrition.main(null); . - List of Possible Ingredients Food #1: all-purpose flour Food #2: egg Food #2: cheddar cheese Food #2: potato Food #3: tomato paste What is the recipe&#39;s name? Breakfast Burrito How many servings? 6 How many grams of all-purpose flour? 70 How many grams of egg? 50 How many grams of cheddar cheese? 30 How many grams of potato? 40 How many grams of tomato paste? 23 Nutrition for Breakfast Burrito per serving Calories: 68.92666666666666 cals Fat: 2.5818333333333334 grams Carbs: 11.2445 grams Protein: 3.77 grams .",
            "url": "https://tangalice.github.io/alicetang/java/jupyter/2022/08/26/Nutrition.html",
            "relUrl": "/java/jupyter/2022/08/26/Nutrition.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "TT 1 Tools and Equipment",
            "content": "Part 1 Fastpages . Python Jupyter Notebook | Java Jupyter Notebook | . . FastPages Insights | . Part 2 Java Project . . Java Project Minor Change Commit | CSA Project Insights | . Ticket Issue #1 .",
            "url": "https://tangalice.github.io/alicetang/hacks/2022/08/21/TT1.html",
            "relUrl": "/hacks/2022/08/21/TT1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Python Jupyter Notebook",
            "content": "msg1 = &quot;Hello&quot; msg2 = &quot;I&#39;m Alice&quot; print(msg1) print(msg2) . Hello I&#39;m Alice .",
            "url": "https://tangalice.github.io/alicetang/python/jupyter/2022/08/21/PythonJupyterNotebook.html",
            "relUrl": "/python/jupyter/2022/08/21/PythonJupyterNotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tangalice.github.io/alicetang/2020/02/20/test.html",
            "relUrl": "/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post65": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tangalice.github.io/alicetang/2020/01/14/test-markdown-post.html",
            "relUrl": "/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "Tri 1 Reflection In the first few weeks of AP CSA, which will be the start of the second year I’m spending as your student, I can already feel the differences compared to the start of last year in AP CSP. During the very beginning of last school year, I struggled to understand everything; it felt like the class was taking off way too fast. Admittedly a lot of my weekly work in the live reviews were scuffed together last minute and included content that I still did not understand at the moment. I remember hoping during the team live reviews that you would not call on me to explain anything because I didn’t understand all the concepts. Over the past year, I feel that I’ve grown a lot as a programmer. Now, I understand everything that I am doing when I work on the weekly hacks, and if I am stuck it is quickly resolved. I’ve walked into all of the team live reviews so far this year feeling prepared. I find it funny compared to last year how I now sometimes feel like there is not enough time during live reviews to show you everythign I worked on during the week. Additionally, last year I did not get to try deployment. But in CSA I found it valuable that we all got to learn how to deploy on an AWS instance. The backend to front end was also new to me and I think it is a good method to keep code organized. .",
          "url": "https://tangalice.github.io/alicetang/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Hacks",
          "content": "TT 7 - Project Approval . TT 6 - Design Starters . TT 5 - Free Response Q1 . TT 4 - Backend Development . TT 3 - Innovation Using Objects . TT 2 - Innovation Primitives . TT 1 - Tools and Equipment .",
          "url": "https://tangalice.github.io/alicetang/hacks/",
          "relUrl": "/hacks/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Jupyter Notebooks",
          "content": "Arrays Lesson . Classes Lesson . Iteration Lesson . Goblin HW . OOP Lesson . Primitives Lesson . Array Lists . Rapid API . Arrays and Images . Javascript . Fibonacci Class . 2019 FRQ1 . 2018 FRQ1 . Iteration with 2D Arrays . Booleans and Ifs . Three String Class . Menu . Number Sort . Median Calculator . Factorial Calculator . Temperature Converter . Recipe Nutrition Calculator . Bash . Python Greeting .",
          "url": "https://tangalice.github.io/alicetang/notebooks/",
          "relUrl": "/notebooks/",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "Notes",
          "content": "Front matter - Section at the top of your jupyter notebooks that helps to manage fast pages . . Primitive Java Data Types . boolean | char | byte | short | int | long | float | double | . Non-Primitive Java Data Types . String | Array | class __________________________ . | Constructors: methods with the same name as the class it is in. It is a speacial methods used to initialize objects. Here is a constructor that takes parameters inside of a class called ThreeString - Exploration Code //constructor that takes parameters ThreeString(String str1, String str2, String str3) { if (validString(str1) &amp;&amp; validString(str2) &amp;&amp; validString(str3)) { string1 = str1; string2 = str2; string3 = str3; } else { string1 = DEFAULT_STRING; string2 = DEFAULT_STRING; string3 = DEFAULT_STRING; } } . | Mutators: methods that mutate the value of a private member variable. Here the methods setString1 sets the value of a private member of the ThreeString class called string1 public boolean setString1(String str) { boolean status = false; if (validString(str)) { string1 = str; status = true; } return status; } . | Accessors: methods that accesses and returns the value of a private member variable. Here the getString1 method acesses and returns the value of the private member string1. public String getString1() { return string1; } . | . . Agile Methodology . The Agile methodology is a way to manage a project by breaking it up into several phases. It involves constant collaboration with stakeholders and continuous improvement at every stage. | . Agile Methodology Diagram . College Board Unit Notes . Primitives Lesson | OOP Lesson | Iteration Lesson | Classes Lesson | Arrays Lesson | .",
          "url": "https://tangalice.github.io/alicetang/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tangalice.github.io/alicetang/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}